{"/home/travis/build/npmtest/node-npmtest-waterline/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":2,"37":2,"38":1,"39":2,"40":2,"41":1,"42":2,"43":2,"44":1,"45":1,"46":1,"47":1,"48":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1,1],"10":[1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":2,"9":2,"10":2,"11":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":102,"loc":{"start":{"line":102,"column":83},"end":{"line":105,"column":10}},"skip":true},"7":{"name":"(anonymous_7)","line":113,"loc":{"start":{"line":113,"column":77},"end":{"line":116,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":127,"loc":{"start":{"line":127,"column":77},"end":{"line":130,"column":10}},"skip":true},"9":{"name":"(anonymous_9)","line":138,"loc":{"start":{"line":138,"column":83},"end":{"line":141,"column":10}},"skip":true},"10":{"name":"(anonymous_10)","line":149,"loc":{"start":{"line":149,"column":79},"end":{"line":152,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":160,"loc":{"start":{"line":160,"column":75},"end":{"line":163,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":175,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":46}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":174,"column":5}},"24":{"start":{"line":92,"column":8},"end":{"line":94,"column":63}},"25":{"start":{"line":95,"column":8},"end":{"line":95,"column":14}},"26":{"start":{"line":102,"column":8},"end":{"line":111,"column":10},"skip":true},"27":{"start":{"line":109,"column":12},"end":{"line":109,"column":55},"skip":true},"28":{"start":{"line":110,"column":12},"end":{"line":110,"column":48},"skip":true},"29":{"start":{"line":113,"column":8},"end":{"line":125,"column":10},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":76},"skip":true},"31":{"start":{"line":121,"column":12},"end":{"line":121,"column":73},"skip":true},"32":{"start":{"line":122,"column":12},"end":{"line":122,"column":74},"skip":true},"33":{"start":{"line":123,"column":12},"end":{"line":123,"column":25},"skip":true},"34":{"start":{"line":124,"column":12},"end":{"line":124,"column":45},"skip":true},"35":{"start":{"line":127,"column":8},"end":{"line":136,"column":10},"skip":true},"36":{"start":{"line":134,"column":12},"end":{"line":134,"column":25},"skip":true},"37":{"start":{"line":135,"column":12},"end":{"line":135,"column":45},"skip":true},"38":{"start":{"line":138,"column":8},"end":{"line":147,"column":10},"skip":true},"39":{"start":{"line":145,"column":12},"end":{"line":145,"column":25},"skip":true},"40":{"start":{"line":146,"column":12},"end":{"line":146,"column":48},"skip":true},"41":{"start":{"line":149,"column":8},"end":{"line":158,"column":10},"skip":true},"42":{"start":{"line":156,"column":12},"end":{"line":156,"column":25},"skip":true},"43":{"start":{"line":157,"column":12},"end":{"line":157,"column":46},"skip":true},"44":{"start":{"line":160,"column":8},"end":{"line":169,"column":10},"skip":true},"45":{"start":{"line":167,"column":12},"end":{"line":167,"column":94},"skip":true},"46":{"start":{"line":168,"column":12},"end":{"line":168,"column":48},"skip":true},"47":{"start":{"line":172,"column":8},"end":{"line":172,"column":35},"skip":true},"48":{"start":{"line":173,"column":8},"end":{"line":173,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":95,"column":14}},{"start":{"line":101,"column":4},"end":{"line":173,"column":14},"skip":true}]},"9":{"line":92,"type":"binary-expr","locations":[{"start":{"line":92,"column":18},"end":{"line":92,"column":32}},{"start":{"line":93,"column":12},"end":{"line":93,"column":53}},{"start":{"line":94,"column":12},"end":{"line":94,"column":61}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":45},"end":{"line":102,"column":79},"skip":true},{"start":{"line":102,"column":83},"end":{"line":111,"column":9},"skip":true}]},"11":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":42},"end":{"line":113,"column":73},"skip":true},{"start":{"line":113,"column":77},"end":{"line":125,"column":9},"skip":true}]},"12":{"line":127,"type":"binary-expr","locations":[{"start":{"line":127,"column":42},"end":{"line":127,"column":73},"skip":true},{"start":{"line":127,"column":77},"end":{"line":136,"column":9},"skip":true}]},"13":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":45},"end":{"line":138,"column":79},"skip":true},{"start":{"line":138,"column":83},"end":{"line":147,"column":9},"skip":true}]},"14":{"line":149,"type":"binary-expr","locations":[{"start":{"line":149,"column":43},"end":{"line":149,"column":75},"skip":true},{"start":{"line":149,"column":79},"end":{"line":158,"column":9},"skip":true}]},"15":{"line":160,"type":"binary-expr","locations":[{"start":{"line":160,"column":41},"end":{"line":160,"column":71},"skip":true},{"start":{"line":160,"column":75},"end":{"line":169,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_waterline */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireExampleJsFromReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - post-init","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - post-init","    case 'browser':","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"92":1,"95":1,"102":1,"109":1,"110":1,"113":1,"120":1,"121":1,"122":1,"123":1,"124":1,"127":1,"134":2,"135":2,"138":1,"145":2,"146":2,"149":1,"156":2,"157":2,"160":1,"167":1,"168":1,"172":1,"173":1}},"/home/travis/build/npmtest/node-npmtest-waterline/lib.npmtest_waterline.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/lib.npmtest_waterline.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":54}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":60}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_waterline */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_waterline = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_waterline = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-waterline/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":2,"38":2,"39":2,"40":2,"41":0,"42":2,"43":2,"44":2,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,2],"16":[2,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":2,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":314,"loc":{"start":{"line":314,"column":32},"end":{"line":314,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":325,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":324,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":53},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":294,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":302,"column":8},"end":{"line":302,"column":82},"skip":true},"70":{"start":{"line":305,"column":8},"end":{"line":307,"column":9},"skip":true},"71":{"start":{"line":306,"column":12},"end":{"line":306,"column":82},"skip":true},"72":{"start":{"line":309,"column":8},"end":{"line":311,"column":9},"skip":true},"73":{"start":{"line":310,"column":12},"end":{"line":310,"column":18},"skip":true},"74":{"start":{"line":312,"column":8},"end":{"line":312,"column":54},"skip":true},"75":{"start":{"line":313,"column":8},"end":{"line":313,"column":69},"skip":true},"76":{"start":{"line":314,"column":8},"end":{"line":322,"column":36},"skip":true},"77":{"start":{"line":315,"column":12},"end":{"line":315,"column":61},"skip":true},"78":{"start":{"line":316,"column":12},"end":{"line":319,"column":13},"skip":true},"79":{"start":{"line":317,"column":16},"end":{"line":317,"column":75},"skip":true},"80":{"start":{"line":318,"column":16},"end":{"line":318,"column":23},"skip":true},"81":{"start":{"line":320,"column":12},"end":{"line":320,"column":38},"skip":true},"82":{"start":{"line":321,"column":12},"end":{"line":321,"column":27},"skip":true},"83":{"start":{"line":323,"column":8},"end":{"line":323,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":53}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":323,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":295,"type":"binary-expr","locations":[{"start":{"line":295,"column":12},"end":{"line":295,"column":67},"skip":true},{"start":{"line":296,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":302,"type":"binary-expr","locations":[{"start":{"line":302,"column":43},"end":{"line":302,"column":75},"skip":true},{"start":{"line":302,"column":79},"end":{"line":302,"column":81},"skip":true}]},"25":{"line":305,"type":"if","locations":[{"start":{"line":305,"column":8},"end":{"line":305,"column":8},"skip":true},{"start":{"line":305,"column":8},"end":{"line":305,"column":8},"skip":true}]},"26":{"line":309,"type":"if","locations":[{"start":{"line":309,"column":8},"end":{"line":309,"column":8},"skip":true},{"start":{"line":309,"column":8},"end":{"line":309,"column":8},"skip":true}]},"27":{"line":312,"type":"binary-expr","locations":[{"start":{"line":312,"column":27},"end":{"line":312,"column":43},"skip":true},{"start":{"line":312,"column":47},"end":{"line":312,"column":53},"skip":true}]},"28":{"line":316,"type":"if","locations":[{"start":{"line":316,"column":12},"end":{"line":316,"column":12},"skip":true},{"start":{"line":316,"column":12},"end":{"line":316,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-waterline && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_waterline */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_waterline","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // post-init","    // run browser js-env code - post-init","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught.stack);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_waterline.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        local.assetsDict['/assets.npmtest_waterline.rollup.js'] =","            local.assetsDict['/assets.npmtest_waterline.rollup.js'] ||","            local.fs.readFileSync(","                // buildCustomOrg-hack","                local.npmtest_waterline.__dirname +","                    '/lib.npmtest_waterline.js',","                'utf8'","            ).replace((/^#!/), '//');","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":2,"127":2,"128":2,"129":2,"130":1,"133":2,"134":2,"139":2,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"294":1,"302":1,"305":1,"306":1,"309":1,"310":1,"312":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"320":1,"321":1,"323":1}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":1,"16":1,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":1,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":1,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":1,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},"fnMap":{"1":{"name":"(anonymous_1)","line":13,"loc":{"start":{"line":13,"column":33},"end":{"line":13,"column":44}}},"2":{"name":"(anonymous_2)","line":56,"loc":{"start":{"line":56,"column":37},"end":{"line":56,"column":58}}},"3":{"name":"(anonymous_3)","line":76,"loc":{"start":{"line":76,"column":33},"end":{"line":76,"column":55}}},"4":{"name":"(anonymous_4)","line":86,"loc":{"start":{"line":86,"column":29},"end":{"line":86,"column":47}}},"5":{"name":"loadCollection","line":125,"loc":{"start":{"line":125,"column":2},"end":{"line":125,"column":38}}},"6":{"name":"(anonymous_6)","line":139,"loc":{"start":{"line":139,"column":21},"end":{"line":139,"column":36}}},"7":{"name":"(anonymous_7)","line":140,"loc":{"start":{"line":140,"column":52},"end":{"line":140,"column":66}}},"8":{"name":"(anonymous_8)","line":146,"loc":{"start":{"line":146,"column":41},"end":{"line":146,"column":57}}},"9":{"name":"(anonymous_9)","line":151,"loc":{"start":{"line":151,"column":51},"end":{"line":151,"column":65}}},"10":{"name":"(anonymous_10)","line":159,"loc":{"start":{"line":159,"column":48},"end":{"line":159,"column":72}}},"11":{"name":"(anonymous_11)","line":163,"loc":{"start":{"line":163,"column":39},"end":{"line":163,"column":53}}},"12":{"name":"(anonymous_12)","line":169,"loc":{"start":{"line":169,"column":36},"end":{"line":169,"column":50}}},"13":{"name":"(anonymous_13)","line":188,"loc":{"start":{"line":188,"column":52},"end":{"line":188,"column":76}}},"14":{"name":"(anonymous_14)","line":189,"loc":{"start":{"line":189,"column":48},"end":{"line":189,"column":73}}},"15":{"name":"(anonymous_15)","line":198,"loc":{"start":{"line":198,"column":47},"end":{"line":198,"column":61}}},"16":{"name":"(anonymous_16)","line":206,"loc":{"start":{"line":206,"column":40},"end":{"line":206,"column":55}}},"17":{"name":"(anonymous_17)","line":216,"loc":{"start":{"line":216,"column":68},"end":{"line":216,"column":82}}},"18":{"name":"(anonymous_18)","line":223,"loc":{"start":{"line":223,"column":5},"end":{"line":223,"column":19}}},"19":{"name":"(anonymous_19)","line":225,"loc":{"start":{"line":225,"column":19},"end":{"line":225,"column":33}}},"20":{"name":"teardown","line":239,"loc":{"start":{"line":239,"column":31},"end":{"line":239,"column":53}}},"21":{"name":"(anonymous_21)","line":242,"loc":{"start":{"line":242,"column":44},"end":{"line":242,"column":65}}},"22":{"name":"bootstrap","line":258,"loc":{"start":{"line":258,"column":32},"end":{"line":258,"column":55}}},"23":{"name":"(anonymous_23)","line":287,"loc":{"start":{"line":287,"column":46},"end":{"line":287,"column":85}}},"24":{"name":"(anonymous_24)","line":294,"loc":{"start":{"line":294,"column":31},"end":{"line":294,"column":58}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":26}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":29}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":41}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":53}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":64}},"6":{"start":{"line":6,"column":0},"end":{"line":6,"column":69}},"7":{"start":{"line":7,"column":0},"end":{"line":7,"column":80}},"8":{"start":{"line":13,"column":0},"end":{"line":27,"column":2}},"9":{"start":{"line":15,"column":2},"end":{"line":17,"column":3}},"10":{"start":{"line":16,"column":4},"end":{"line":16,"column":27}},"11":{"start":{"line":21,"column":2},"end":{"line":21,"column":25}},"12":{"start":{"line":24,"column":2},"end":{"line":24,"column":25}},"13":{"start":{"line":26,"column":2},"end":{"line":26,"column":14}},"14":{"start":{"line":35,"column":0},"end":{"line":35,"column":57}},"15":{"start":{"line":38,"column":0},"end":{"line":38,"column":47}},"16":{"start":{"line":56,"column":0},"end":{"line":62,"column":2}},"17":{"start":{"line":59,"column":2},"end":{"line":59,"column":37}},"18":{"start":{"line":61,"column":2},"end":{"line":61,"column":27}},"19":{"start":{"line":76,"column":0},"end":{"line":231,"column":2}},"20":{"start":{"line":77,"column":2},"end":{"line":77,"column":18}},"21":{"start":{"line":80,"column":2},"end":{"line":80,"column":80}},"22":{"start":{"line":80,"column":18},"end":{"line":80,"column":78}},"23":{"start":{"line":81,"column":2},"end":{"line":81,"column":95}},"24":{"start":{"line":81,"column":27},"end":{"line":81,"column":93}},"25":{"start":{"line":82,"column":2},"end":{"line":82,"column":100}},"26":{"start":{"line":82,"column":30},"end":{"line":82,"column":98}},"27":{"start":{"line":85,"column":2},"end":{"line":100,"column":3}},"28":{"start":{"line":86,"column":4},"end":{"line":97,"column":7}},"29":{"start":{"line":89,"column":6},"end":{"line":96,"column":7}},"30":{"start":{"line":90,"column":8},"end":{"line":95,"column":99}},"31":{"start":{"line":99,"column":4},"end":{"line":99,"column":17}},"32":{"start":{"line":103,"column":2},"end":{"line":110,"column":3}},"33":{"start":{"line":104,"column":4},"end":{"line":106,"column":5}},"34":{"start":{"line":105,"column":6},"end":{"line":105,"column":72}},"35":{"start":{"line":109,"column":4},"end":{"line":109,"column":31}},"36":{"start":{"line":113,"column":2},"end":{"line":113,"column":24}},"37":{"start":{"line":116,"column":2},"end":{"line":116,"column":76}},"38":{"start":{"line":119,"column":2},"end":{"line":119,"column":68}},"39":{"start":{"line":122,"column":2},"end":{"line":122,"column":74}},"40":{"start":{"line":125,"column":2},"end":{"line":134,"column":3}},"41":{"start":{"line":126,"column":4},"end":{"line":126,"column":72}},"42":{"start":{"line":127,"column":4},"end":{"line":127,"column":45}},"43":{"start":{"line":131,"column":4},"end":{"line":131,"column":69}},"44":{"start":{"line":133,"column":4},"end":{"line":133,"column":11}},"45":{"start":{"line":136,"column":2},"end":{"line":229,"column":5}},"46":{"start":{"line":140,"column":6},"end":{"line":155,"column":9}},"47":{"start":{"line":141,"column":8},"end":{"line":141,"column":34}},"48":{"start":{"line":141,"column":17},"end":{"line":141,"column":34}},"49":{"start":{"line":144,"column":8},"end":{"line":144,"column":32}},"50":{"start":{"line":146,"column":8},"end":{"line":149,"column":11}},"51":{"start":{"line":147,"column":10},"end":{"line":147,"column":56}},"52":{"start":{"line":147,"column":49},"end":{"line":147,"column":56}},"53":{"start":{"line":148,"column":10},"end":{"line":148,"column":79}},"54":{"start":{"line":151,"column":8},"end":{"line":154,"column":11}},"55":{"start":{"line":152,"column":10},"end":{"line":152,"column":36}},"56":{"start":{"line":152,"column":19},"end":{"line":152,"column":36}},"57":{"start":{"line":153,"column":10},"end":{"line":153,"column":39}},"58":{"start":{"line":160,"column":6},"end":{"line":160,"column":41}},"59":{"start":{"line":161,"column":6},"end":{"line":161,"column":23}},"60":{"start":{"line":163,"column":6},"end":{"line":182,"column":9}},"61":{"start":{"line":164,"column":8},"end":{"line":164,"column":42}},"62":{"start":{"line":167,"column":8},"end":{"line":167,"column":56}},"63":{"start":{"line":169,"column":8},"end":{"line":172,"column":11}},"64":{"start":{"line":170,"column":10},"end":{"line":170,"column":58}},"65":{"start":{"line":170,"column":51},"end":{"line":170,"column":58}},"66":{"start":{"line":171,"column":10},"end":{"line":171,"column":29}},"67":{"start":{"line":175,"column":8},"end":{"line":175,"column":41}},"68":{"start":{"line":176,"column":8},"end":{"line":177,"column":81}},"69":{"start":{"line":179,"column":8},"end":{"line":179,"column":50}},"70":{"start":{"line":180,"column":8},"end":{"line":180,"column":57}},"71":{"start":{"line":181,"column":8},"end":{"line":181,"column":49}},"72":{"start":{"line":184,"column":6},"end":{"line":184,"column":26}},"73":{"start":{"line":189,"column":6},"end":{"line":220,"column":15}},"74":{"start":{"line":190,"column":8},"end":{"line":190,"column":48}},"75":{"start":{"line":191,"column":8},"end":{"line":191,"column":24}},"76":{"start":{"line":192,"column":8},"end":{"line":192,"column":29}},"77":{"start":{"line":195,"column":8},"end":{"line":195,"column":90}},"78":{"start":{"line":195,"column":72},"end":{"line":195,"column":90}},"79":{"start":{"line":198,"column":8},"end":{"line":200,"column":11}},"80":{"start":{"line":199,"column":10},"end":{"line":199,"column":47}},"81":{"start":{"line":203,"column":8},"end":{"line":203,"column":31}},"82":{"start":{"line":206,"column":8},"end":{"line":213,"column":11}},"83":{"start":{"line":207,"column":10},"end":{"line":207,"column":30}},"84":{"start":{"line":208,"column":10},"end":{"line":210,"column":11}},"85":{"start":{"line":209,"column":12},"end":{"line":209,"column":66}},"86":{"start":{"line":212,"column":10},"end":{"line":212,"column":71}},"87":{"start":{"line":216,"column":8},"end":{"line":219,"column":11}},"88":{"start":{"line":217,"column":10},"end":{"line":217,"column":40}},"89":{"start":{"line":217,"column":19},"end":{"line":217,"column":40}},"90":{"start":{"line":218,"column":10},"end":{"line":218,"column":21}},"91":{"start":{"line":224,"column":4},"end":{"line":224,"column":28}},"92":{"start":{"line":224,"column":13},"end":{"line":224,"column":28}},"93":{"start":{"line":225,"column":4},"end":{"line":228,"column":7}},"94":{"start":{"line":226,"column":6},"end":{"line":226,"column":30}},"95":{"start":{"line":226,"column":15},"end":{"line":226,"column":30}},"96":{"start":{"line":227,"column":6},"end":{"line":227,"column":81}},"97":{"start":{"line":239,"column":0},"end":{"line":250,"column":2}},"98":{"start":{"line":240,"column":2},"end":{"line":240,"column":18}},"99":{"start":{"line":242,"column":2},"end":{"line":249,"column":9}},"100":{"start":{"line":243,"column":4},"end":{"line":243,"column":44}},"101":{"start":{"line":246,"column":4},"end":{"line":246,"column":72}},"102":{"start":{"line":246,"column":58},"end":{"line":246,"column":72}},"103":{"start":{"line":248,"column":4},"end":{"line":248,"column":45}},"104":{"start":{"line":258,"column":0},"end":{"line":298,"column":2}},"105":{"start":{"line":259,"column":2},"end":{"line":259,"column":18}},"106":{"start":{"line":287,"column":2},"end":{"line":290,"column":9}},"107":{"start":{"line":288,"column":4},"end":{"line":288,"column":31}},"108":{"start":{"line":289,"column":4},"end":{"line":289,"column":21}},"109":{"start":{"line":294,"column":2},"end":{"line":297,"column":9}},"110":{"start":{"line":296,"column":4},"end":{"line":296,"column":26}}},"branchMap":{"1":{"line":15,"type":"if","locations":[{"start":{"line":15,"column":2},"end":{"line":15,"column":2}},{"start":{"line":15,"column":2},"end":{"line":15,"column":2}}]},"2":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":2},"end":{"line":80,"column":2}},{"start":{"line":80,"column":2},"end":{"line":80,"column":2}}]},"3":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":2},"end":{"line":81,"column":2}},{"start":{"line":81,"column":2},"end":{"line":81,"column":2}}]},"4":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":2},"end":{"line":82,"column":2}},{"start":{"line":82,"column":2},"end":{"line":82,"column":2}}]},"5":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":6},"end":{"line":89,"column":6}},{"start":{"line":89,"column":6},"end":{"line":89,"column":6}}]},"6":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":2},"end":{"line":103,"column":2}},{"start":{"line":103,"column":2},"end":{"line":103,"column":2}}]},"7":{"line":141,"type":"if","locations":[{"start":{"line":141,"column":8},"end":{"line":141,"column":8}},{"start":{"line":141,"column":8},"end":{"line":141,"column":8}}]},"8":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":10},"end":{"line":147,"column":10}},{"start":{"line":147,"column":10},"end":{"line":147,"column":10}}]},"9":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":10},"end":{"line":152,"column":10}},{"start":{"line":152,"column":10},"end":{"line":152,"column":10}}]},"10":{"line":170,"type":"if","locations":[{"start":{"line":170,"column":10},"end":{"line":170,"column":10}},{"start":{"line":170,"column":10},"end":{"line":170,"column":10}}]},"11":{"line":175,"type":"binary-expr","locations":[{"start":{"line":175,"column":19},"end":{"line":175,"column":34}},{"start":{"line":175,"column":38},"end":{"line":175,"column":40}}]},"12":{"line":176,"type":"cond-expr","locations":[{"start":{"line":177,"column":10},"end":{"line":177,"column":72}},{"start":{"line":177,"column":75},"end":{"line":177,"column":80}}]},"13":{"line":195,"type":"if","locations":[{"start":{"line":195,"column":8},"end":{"line":195,"column":8}},{"start":{"line":195,"column":8},"end":{"line":195,"column":8}}]},"14":{"line":208,"type":"if","locations":[{"start":{"line":208,"column":10},"end":{"line":208,"column":10}},{"start":{"line":208,"column":10},"end":{"line":208,"column":10}}]},"15":{"line":217,"type":"if","locations":[{"start":{"line":217,"column":10},"end":{"line":217,"column":10}},{"start":{"line":217,"column":10},"end":{"line":217,"column":10}}]},"16":{"line":224,"type":"if","locations":[{"start":{"line":224,"column":4},"end":{"line":224,"column":4}},{"start":{"line":224,"column":4},"end":{"line":224,"column":4}}]},"17":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":6},"end":{"line":226,"column":6}},{"start":{"line":226,"column":6},"end":{"line":226,"column":6}}]},"18":{"line":246,"type":"if","locations":[{"start":{"line":246,"column":4},"end":{"line":246,"column":4}},{"start":{"line":246,"column":4},"end":{"line":246,"column":4}}]}},"code":["var _ = require('lodash');","var async = require('async');","var Schema = require('waterline-schema');","var Connections = require('./waterline/connections');","var CollectionLoader = require('./waterline/collection/loader');","var COLLECTION_DEFAULTS = require('./waterline/collection/defaults');","var hasOwnProperty = require('./waterline/utils/helpers').object.hasOwnProperty;","","/**"," * Waterline"," */","","var Waterline = module.exports = function() {","","  if (!(this instanceof Waterline)) {","    return new Waterline();","  }","","  // Keep track of all the collections internally so we can build associations","  // between them when needed.","  this._collections = [];","","  // Keep track of all the active connections used by collections","  this._connections = {};","","  return this;","};","","/*"," ***********************************************************"," * Modules that can be extended"," ***********************************************************/","","// Collection to be extended in your application","Waterline.Collection = require('./waterline/collection');","","// Model Instance, returned as query results","Waterline.Model = require('./waterline/model');","","/*"," ***********************************************************"," * Prototype Methods"," ***********************************************************/","","/**"," * loadCollection"," *"," * Loads a new Collection. It should be an extended Waterline.Collection"," * that contains your attributes, instance methods and class methods."," *"," * @param {Object} collection"," * @return {Object} internal models dictionary"," * @api public"," */","","Waterline.prototype.loadCollection = function(collection) {","","  // Cache collection","  this._collections.push(collection);","","  return this._collections;","};","","/**"," * initialize"," *"," * Creates an initialized version of each Collection and auto-migrates depending on"," * the Collection configuration."," *"," * @param {Object} config object containing adapters"," * @param {Function} callback"," * @return {Array} instantiated collections"," * @api public"," */","","Waterline.prototype.initialize = function(options, cb) {","  var self = this;","","  // Ensure a config object is passed in containing adapters","  if (!options) { throw new Error('Usage Error: function(options, callback)'); }","  if (!options.adapters) { throw new Error('Options object must contain an adapters object'); }","  if (!options.connections) { throw new Error('Options object must contain a connections object'); }","","  // Check that the given adapter is compatible with Waterline 0.11.x.","  try {","    _.each(options.adapters, function(adapter) {","      // Adapters meant for Waterline >= 0.12 will have an adapterApiVersion property, so if we","      // see that then we know the adapter won't work with this version of Waterline.","      if (!_.isUndefined(adapter.adapterApiVersion)) {","        throw new Error(","          '\\n-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-\\n'+","          'Cannot initialize Waterline.\\n'+","          'The installed version of adapter `' + adapter.identity + '` is too new!\\n' +","          'Please try installing a version < 1.0.\\n' +","          '-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-\\n');","      }","    });","  } catch (e) {","    return cb(e);","  }","","  // Allow collections to be passed in to the initialize method","  if (options.collections) {","    for (var collection in options.collections) {","      this.loadCollection(_.cloneDeep(options.collections[collection]));","    }","","    // Remove collections from the options after they have been loaded","    delete options.collections;","  }","","  // Cache a reference to instantiated collections","  this.collections = {};","","  // Build up all the connections used by the collections","  this.connections = new Connections(options.adapters, options.connections);","","  // Grab config defaults or set them to empty","  var defaults = _.merge({}, COLLECTION_DEFAULTS, options.defaults);","","  // Build a schema map","  this.schema = new Schema(this._collections, this.connections, defaults);","","  // Load a Collection into memory","  function loadCollection(item, next) {","    var loader = new CollectionLoader(item, self.connections, defaults);","    var collection = loader.initialize(self);","","    // Store the instantiated collection so it can be used","    // internally to create other records","    self.collections[collection.identity.toLowerCase()] = collection;","","    next();","  }","","  async.auto({","","    // Load all the collections into memory","    loadCollections: function(next) {","      async.each(self._collections, loadCollection, function(err) {","        if (err) return next(err);","","        // Migrate Junction Tables","        var junctionTables = [];","","        Object.keys(self.schema).forEach(function(table) {","          if (!self.schema[table].junctionTable) return;","          junctionTables.push(Waterline.Collection.extend(self.schema[table]));","        });","","        async.each(junctionTables, loadCollection, function(err) {","          if (err) return next(err);","          next(null, self.collections);","        });","      });","    },","","    // Build up Collection Schemas","    buildCollectionSchemas: ['loadCollections', function(next, results) {","      var collections = self.collections;","      var schemas = {};","","      Object.keys(collections).forEach(function(key) {","        var collection = collections[key];","","        // Remove hasMany association keys","        var schema = _.clone(collection._schema.schema);","","        Object.keys(schema).forEach(function(key) {","          if (hasOwnProperty(schema[key], 'type')) return;","          delete schema[key];","        });","","        // Grab JunctionTable flag","        var meta = collection.meta || {};","        meta.junctionTable = hasOwnProperty(collection.waterline.schema[collection.identity], 'junctionTable') ?","          collection.waterline.schema[collection.identity].junctionTable : false;","","        schemas[collection.identity] = collection;","        schemas[collection.identity].definition = schema;","        schemas[collection.identity].meta = meta;","      });","","      next(null, schemas);","    }],","","    // Register the Connections with an adapter","    registerConnections: ['buildCollectionSchemas', function(next, results) {","      async.each(Object.keys(self.connections), function(item, nextItem) {","        var connection = self.connections[item];","        var config = {};","        var usedSchemas = {};","","        // Check if the connection's adapter has a register connection method","        if (!hasOwnProperty(connection._adapter, 'registerConnection')) return nextItem();","","        // Copy all values over to a tempory object minus the adapter definition","        Object.keys(connection.config).forEach(function(key) {","          config[key] = connection.config[key];","        });","","        // Set an identity on the connection","        config.identity = item;","","        // Grab the schemas used on this connection","        connection._collections.forEach(function(coll) {","          var identity = coll;","          if (hasOwnProperty(self.collections[coll].__proto__, 'tableName')) {","            identity = self.collections[coll].__proto__.tableName;","          }","","          usedSchemas[identity] = results.buildCollectionSchemas[coll];","        });","","        // Call the registerConnection method","        connection._adapter.registerConnection(config, usedSchemas, function(err) {","          if (err) return nextItem(err);","          nextItem();","        });","      }, next);","    }]","","  }, function(err) {","    if (err) return cb(err);","    self.bootstrap(function(err) {","      if (err) return cb(err);","      cb(null, { collections: self.collections, connections: self.connections });","    });","  });","","};","","/**"," * Teardown"," *"," * Calls the teardown method on each connection if available."," */","","Waterline.prototype.teardown = function teardown(cb) {","  var self = this;","","  async.each(Object.keys(this.connections), function(item, next) {","    var connection = self.connections[item];","","    // Check if the adapter has a teardown method implemented","    if (!hasOwnProperty(connection._adapter, 'teardown')) return next();","","    connection._adapter.teardown(item, next);","  }, cb);","};","","/**"," * Bootstrap"," *"," * Auto-migrate all collections"," */","","Waterline.prototype.bootstrap = function bootstrap(cb) {","  var self = this;","","  //","  // TODO:","  // Come back to this -- see https://github.com/balderdashy/waterline/issues/259","  // (the stuff in this file works fine-- the work would be structural changes elsewhere)","  //","","  // // Use the shema to get a list of junction tables idents","  // // and then determine which are \"logical\" collections","  // // (i.e. everything EXCEPT junction tables)","  // var junctionTableIdents = _(this.schema).filter({junctionTable: true}).pluck('identity').value();","  // var logicalCollections = _(this.collections).omit(junctionTableIdents).value();","","  // // Flatten logical collections obj into an array for convenience","  // var toBeSynced = _.reduce(logicalCollections, function(logicals,coll,ident) {","  //     logicals.push(coll);","  //     return logicals;","  //   }, []);","","  // // console.log(junctionTableIdents);","  // // console.log(Object.keys(logicalCollections));","  // // console.log('\\n',","  // //   'Migrating collections ::',","  // //   _(toBeSynced).pluck('identity').value()","  // // );","","  // For now:","  var toBeSynced = _.reduce(this.collections, function(resources, collection, ident) {","    resources.push(collection);","    return resources;","  }, []);","","  // Run auto-migration strategies on each collection","  // async.each(toBeSynced, function(collection, next) {","  async.eachSeries(toBeSynced, function(collection, next) {","  // async.eachLimit(toBeSynced, 9, function(collection, next) {","    collection.sync(next);","  }, cb);","};",""],"l":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"13":1,"15":0,"16":0,"21":0,"24":0,"26":0,"35":1,"38":1,"56":1,"59":0,"61":0,"76":1,"77":0,"80":0,"81":0,"82":0,"85":0,"86":0,"89":0,"90":0,"99":0,"103":0,"104":0,"105":0,"109":0,"113":0,"116":0,"119":0,"122":0,"125":1,"126":0,"127":0,"131":0,"133":0,"136":0,"140":0,"141":0,"144":0,"146":0,"147":0,"148":0,"151":0,"152":0,"153":0,"160":0,"161":0,"163":0,"164":0,"167":0,"169":0,"170":0,"171":0,"175":0,"176":0,"179":0,"180":0,"181":0,"184":0,"189":0,"190":0,"191":0,"192":0,"195":0,"198":0,"199":0,"203":0,"206":0,"207":0,"208":0,"209":0,"212":0,"216":0,"217":0,"218":0,"224":0,"225":0,"226":0,"227":0,"239":1,"240":0,"242":0,"243":0,"246":0,"248":0,"258":1,"259":0,"287":0,"288":0,"289":0,"294":0,"296":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/connections/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/connections/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":35},"end":{"line":17,"column":63}}},"2":{"name":"_build","line":37,"loc":{"start":{"line":37,"column":31},"end":{"line":37,"column":66}}},"3":{"name":"(anonymous_3)","line":44,"loc":{"start":{"line":44,"column":31},"end":{"line":44,"column":45}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":26}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":27}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":71}},"4":{"start":{"line":17,"column":0},"end":{"line":26,"column":2}},"5":{"start":{"line":20,"column":2},"end":{"line":20,"column":25}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":33}},"7":{"start":{"line":25,"column":2},"end":{"line":25,"column":27}},"8":{"start":{"line":37,"column":0},"end":{"line":75,"column":2}},"9":{"start":{"line":39,"column":2},"end":{"line":39,"column":18}},"10":{"start":{"line":44,"column":2},"end":{"line":73,"column":5}},"11":{"start":{"line":45,"column":4},"end":{"line":45,"column":30}},"12":{"start":{"line":46,"column":4},"end":{"line":47,"column":19}},"13":{"start":{"line":50,"column":4},"end":{"line":53,"column":5}},"14":{"start":{"line":51,"column":6},"end":{"line":51,"column":149}},"15":{"start":{"line":52,"column":6},"end":{"line":52,"column":27}},"16":{"start":{"line":56,"column":4},"end":{"line":62,"column":5}},"17":{"start":{"line":57,"column":6},"end":{"line":60,"column":316}},"18":{"start":{"line":58,"column":8},"end":{"line":58,"column":179}},"19":{"start":{"line":60,"column":11},"end":{"line":60,"column":316}},"20":{"start":{"line":61,"column":6},"end":{"line":61,"column":27}},"21":{"start":{"line":65,"column":4},"end":{"line":69,"column":6}},"22":{"start":{"line":72,"column":4},"end":{"line":72,"column":40}}},"branchMap":{"1":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":4},"end":{"line":50,"column":4}},{"start":{"line":50,"column":4},"end":{"line":50,"column":4}}]},"2":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":4},"end":{"line":56,"column":4}},{"start":{"line":56,"column":4},"end":{"line":56,"column":4}}]},"3":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":6},"end":{"line":57,"column":6}},{"start":{"line":57,"column":6},"end":{"line":57,"column":6}}]}},"code":["/**"," * Module Dependencies"," */","var _ = require('lodash');","var util = require('util');","var hasOwnProperty = require('../utils/helpers').object.hasOwnProperty;","","/**"," * Connections are active \"connections\" to a specific adapter for a specific configuration."," * This allows you to have collections share named connections."," *"," * @param {Object} adapters"," * @param {Object} objects"," * @api public"," */","","var Connections = module.exports = function(adapters, options) {","","  // Hold the active connections","  this._connections = {};","","  // Build the connections","  this._build(adapters, options);","","  return this._connections;","};","","","/**"," * Builds up a named connections object with a clone of the adapter"," * it will use for the connection."," *"," * @param {Object} adapters"," * @param {Object} options"," * @api private"," */","Connections.prototype._build = function _build(adapters, options) {","","  var self = this;","","  // For each of the configured connections in options, find the required","  // adapter by name and build up an object that can be attached to the","  // internal connections object.","  Object.keys(options).forEach(function(key) {","    var config = options[key];","    var msg,","        connection;","","    // Ensure an adapter module is specified","    if (!hasOwnProperty(config, 'adapter')) {","      msg = util.format('Connection (\"%s\") is missing a required property (`adapter`).  You should indicate the name of one of your adapters.', key);","      throw new Error(msg);","    }","","    // Ensure the adapter exists in the adapters options","    if (!hasOwnProperty(adapters, config.adapter)) {","      if (typeof config.adapter !== 'string') {","        msg = util.format('Invalid `adapter` property in connection `%s`.  It should be a string (the name of one of the adapters you passed into `waterline.initialize()`)', key);","      }","      else msg = util.format('Unknown adapter \"%s\" for connection `%s`.  You should double-check that the connection\\'s `adapter` property matches the name of one of your adapters.  Or perhaps you forgot to include your \"%s\" adapter when you called `waterline.initialize()`...', config.adapter, key, config.adapter);","      throw new Error(msg);","    }","","    // Build the connection config","    connection = {","      config: _.merge({}, adapters[config.adapter].defaults, config),","      _adapter: _.cloneDeep(adapters[config.adapter]),","      _collections: []","    };","","    // Attach the connections to the connection library","    self._connections[key] = connection;","  });","","};",""],"l":{"4":1,"5":1,"6":1,"17":1,"20":0,"23":0,"25":0,"37":1,"39":0,"44":0,"45":0,"46":0,"50":0,"51":0,"52":0,"56":0,"57":0,"58":0,"60":0,"61":0,"65":0,"72":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/helpers.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/helpers.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":1,"16":1,"17":1,"18":0,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"objMap","line":15,"loc":{"start":{"line":15,"column":17},"end":{"line":15,"column":57}}},"2":{"name":"(anonymous_2)","line":16,"loc":{"start":{"line":16,"column":25},"end":{"line":16,"column":45}}},"3":{"name":"pluralize","line":33,"loc":{"start":{"line":33,"column":20},"end":{"line":33,"column":64}}},"4":{"name":"capitalize","line":47,"loc":{"start":{"line":47,"column":21},"end":{"line":47,"column":46}}},"5":{"name":"(anonymous_5)","line":68,"loc":{"start":{"line":68,"column":32},"end":{"line":68,"column":52}}},"6":{"name":"matchMongoId","line":82,"loc":{"start":{"line":82,"column":23},"end":{"line":82,"column":49}}}},"statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":6,"column":26}},"2":{"start":{"line":15,"column":0},"end":{"line":20,"column":2}},"3":{"start":{"line":16,"column":2},"end":{"line":19,"column":18}},"4":{"start":{"line":17,"column":4},"end":{"line":17,"column":47}},"5":{"start":{"line":18,"column":4},"end":{"line":18,"column":15}},"6":{"start":{"line":33,"column":0},"end":{"line":37,"column":2}},"7":{"start":{"line":34,"column":2},"end":{"line":34,"column":71}},"8":{"start":{"line":34,"column":33},"end":{"line":34,"column":71}},"9":{"start":{"line":35,"column":2},"end":{"line":35,"column":61}},"10":{"start":{"line":35,"column":30},"end":{"line":35,"column":61}},"11":{"start":{"line":36,"column":2},"end":{"line":36,"column":20}},"12":{"start":{"line":47,"column":0},"end":{"line":50,"column":2}},"13":{"start":{"line":48,"column":2},"end":{"line":48,"column":40}},"14":{"start":{"line":49,"column":2},"end":{"line":49,"column":52}},"15":{"start":{"line":56,"column":0},"end":{"line":56,"column":20}},"16":{"start":{"line":67,"column":0},"end":{"line":67,"column":42}},"17":{"start":{"line":68,"column":0},"end":{"line":71,"column":2}},"18":{"start":{"line":69,"column":2},"end":{"line":69,"column":54}},"19":{"start":{"line":69,"column":41},"end":{"line":69,"column":54}},"20":{"start":{"line":70,"column":2},"end":{"line":70,"column":29}},"21":{"start":{"line":82,"column":0},"end":{"line":89,"column":2}},"22":{"start":{"line":85,"column":2},"end":{"line":88,"column":54}},"23":{"start":{"line":87,"column":4},"end":{"line":87,"column":17}},"24":{"start":{"line":88,"column":7},"end":{"line":88,"column":54}}},"branchMap":{"1":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":2},"end":{"line":34,"column":2}},{"start":{"line":34,"column":2},"end":{"line":34,"column":2}}]},"2":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":2},"end":{"line":35,"column":2}},{"start":{"line":35,"column":2},"end":{"line":35,"column":2}}]},"3":{"line":48,"type":"cond-expr","locations":[{"start":{"line":48,"column":23},"end":{"line":48,"column":25}},{"start":{"line":48,"column":28},"end":{"line":48,"column":39}}]},"4":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":2},"end":{"line":69,"column":2}},{"start":{"line":69,"column":2},"end":{"line":69,"column":2}}]},"5":{"line":69,"type":"binary-expr","locations":[{"start":{"line":69,"column":6},"end":{"line":69,"column":18}},{"start":{"line":69,"column":22},"end":{"line":69,"column":39}}]},"6":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":2},"end":{"line":85,"column":2}},{"start":{"line":85,"column":2},"end":{"line":85,"column":2}}]},"7":{"line":85,"type":"binary-expr","locations":[{"start":{"line":85,"column":6},"end":{"line":85,"column":9}},{"start":{"line":86,"column":3},"end":{"line":86,"column":69}}]},"8":{"line":86,"type":"binary-expr","locations":[{"start":{"line":86,"column":5},"end":{"line":86,"column":19}},{"start":{"line":86,"column":24},"end":{"line":86,"column":38}},{"start":{"line":86,"column":42},"end":{"line":86,"column":67}}]}},"code":["","/**"," * Module Dependencies"," */","","var _ = require('lodash');","","/**"," * Equivalent to _.objMap, _.map for objects, keeps key/value associations"," *"," * Should be deprecated."," *"," * @api public"," */","exports.objMap = function objMap(input, mapper, context) {","  return _.reduce(input, function(obj, v, k) {","    obj[k] = mapper.call(context, v, k, input);","    return obj;","  }, {}, context);","};","","/**"," * Run a method meant for a single object on a object OR array"," * For an object, run the method and return the result."," * For a list, run the method on each item return the resulting array."," * For anything else, return it silently."," *"," * Should be deprecated."," *"," * @api public"," */","","exports.pluralize = function pluralize(collection, application) {","  if (Array.isArray(collection)) return _.map(collection, application);","  if (_.isObject(collection)) return application(collection);","  return collection;","};","","/**"," * _.str.capitalize"," *"," * @param {String} str"," * @return {String}"," * @api public"," */","","exports.capitalize = function capitalize(str) {","  str = str === null ? '' : String(str);","  return str.charAt(0).toUpperCase() + str.slice(1);","};","","/**"," * ignore"," */","","exports.object = {};","","/**"," * Safer helper for hasOwnProperty checks"," *"," * @param {Object} obj"," * @param {String} prop"," * @return {Boolean}"," * @api public"," */","","var hop = Object.prototype.hasOwnProperty;","exports.object.hasOwnProperty = function(obj, prop) {","  if (obj === null || obj === undefined) return false;","  return hop.call(obj, prop);","};","","/**"," * Check if an ID resembles a Mongo BSON ID."," * Can't use the `hop` helper above because BSON ID's will have their own hasOwnProperty value."," *"," * @param {String} id"," * @return {Boolean}"," * @api public"," */","","exports.matchMongoId = function matchMongoId(id) {","  // id must be truthy- and either BE a string, or be an object","  // with a toString method.","  if (!id ||","   !(_.isString(id) || (_.isObject(id) || _.isFunction(id.toString)))","  ) return false;","  else return /^[a-fA-F0-9]{24}$/.test(id.toString());","};",""],"l":{"6":1,"15":1,"16":0,"17":0,"18":0,"33":1,"34":0,"35":0,"36":0,"47":1,"48":0,"49":0,"56":1,"67":1,"68":1,"69":0,"70":0,"82":1,"85":0,"87":0,"88":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/collection/loader.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/collection/loader.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":40},"end":{"line":15,"column":84}}},"2":{"name":"initialize","line":36,"loc":{"start":{"line":36,"column":40},"end":{"line":36,"column":69}}},"3":{"name":"_validate","line":48,"loc":{"start":{"line":48,"column":39},"end":{"line":48,"column":83}}},"4":{"name":"_getConnections","line":85,"loc":{"start":{"line":85,"column":45},"end":{"line":85,"column":95}}},"5":{"name":"(anonymous_5)","line":96,"loc":{"start":{"line":96,"column":42},"end":{"line":96,"column":57}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":71}},"2":{"start":{"line":15,"column":0},"end":{"line":26,"column":2}},"3":{"start":{"line":17,"column":2},"end":{"line":17,"column":27}},"4":{"start":{"line":20,"column":2},"end":{"line":20,"column":60}},"5":{"start":{"line":23,"column":2},"end":{"line":23,"column":72}},"6":{"start":{"line":25,"column":2},"end":{"line":25,"column":14}},"7":{"start":{"line":36,"column":0},"end":{"line":38,"column":2}},"8":{"start":{"line":37,"column":2},"end":{"line":37,"column":61}},"9":{"start":{"line":48,"column":0},"end":{"line":75,"column":2}},"10":{"start":{"line":51,"column":2},"end":{"line":53,"column":3}},"11":{"start":{"line":52,"column":4},"end":{"line":52,"column":69}},"12":{"start":{"line":56,"column":2},"end":{"line":56,"column":78}},"13":{"start":{"line":59,"column":2},"end":{"line":59,"column":48}},"14":{"start":{"line":63,"column":2},"end":{"line":72,"column":3}},"15":{"start":{"line":66,"column":4},"end":{"line":68,"column":5}},"16":{"start":{"line":67,"column":6},"end":{"line":67,"column":99}},"17":{"start":{"line":71,"column":4},"end":{"line":71,"column":48}},"18":{"start":{"line":74,"column":2},"end":{"line":74,"column":20}},"19":{"start":{"line":85,"column":0},"end":{"line":108,"column":2}},"20":{"start":{"line":88,"column":2},"end":{"line":88,"column":27}},"21":{"start":{"line":91,"column":2},"end":{"line":93,"column":3}},"22":{"start":{"line":92,"column":4},"end":{"line":92,"column":72}},"23":{"start":{"line":96,"column":2},"end":{"line":105,"column":5}},"24":{"start":{"line":99,"column":4},"end":{"line":102,"column":5}},"25":{"start":{"line":100,"column":6},"end":{"line":100,"column":113}},"26":{"start":{"line":101,"column":6},"end":{"line":101,"column":27}},"27":{"start":{"line":104,"column":4},"end":{"line":104,"column":46}},"28":{"start":{"line":107,"column":2},"end":{"line":107,"column":25}}},"branchMap":{"1":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":2},"end":{"line":51,"column":2}},{"start":{"line":51,"column":2},"end":{"line":51,"column":2}}]},"2":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":6},"end":{"line":51,"column":56}},{"start":{"line":51,"column":60},"end":{"line":51,"column":109}}]},"3":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":2},"end":{"line":63,"column":2}},{"start":{"line":63,"column":2},"end":{"line":63,"column":2}}]},"4":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":4},"end":{"line":66,"column":4}},{"start":{"line":66,"column":4},"end":{"line":66,"column":4}}]},"5":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":2},"end":{"line":91,"column":2}},{"start":{"line":91,"column":2},"end":{"line":91,"column":2}}]},"6":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":4},"end":{"line":99,"column":4}},{"start":{"line":99,"column":4},"end":{"line":99,"column":4}}]}},"code":["/**"," * Module Dependencies"," */","","var hasOwnProperty = require('../utils/helpers').object.hasOwnProperty;","","/**"," * Collection Loader"," *"," * @param {Object} connections"," * @param {Object} collection"," * @api public"," */","","var CollectionLoader = module.exports = function(collection, connections, defaults) {","","  this.defaults = defaults;","","  // Normalize and validate the collection","  this.collection = this._validate(collection, connections);","","  // Find the named connections used in the collection","  this.namedConnections = this._getConnections(collection, connections);","","  return this;","};","","/**"," * Initalize the collection"," *"," * @param {Object} context"," * @param {Function} callback"," * @api public"," */","","CollectionLoader.prototype.initialize = function initialize(context) {","  return new this.collection(context, this.namedConnections);","};","","/**"," * Validate Collection structure."," *"," * @param {Object} collection"," * @param {Object} connections"," * @api private"," */","","CollectionLoader.prototype._validate = function _validate(collection, connections) {","","  // Throw Error if no Tablename/Identity is set","  if (!hasOwnProperty(collection.prototype, 'tableName') && !hasOwnProperty(collection.prototype, 'identity')) {","    throw new Error('A tableName or identity property must be set.');","  }","","  // Ensure identity is lowercased","  collection.prototype.identity = collection.prototype.identity.toLowerCase();","","  // Set the defaults","  collection.prototype.defaults = this.defaults;","","  // Find the connections used by this collection","  // If none is specified check if a default connection exist","  if (!hasOwnProperty(collection.prototype, 'connection')) {","","    // Check if a default connection was specified","    if (!hasOwnProperty(connections, 'default')) {","      throw new Error('No adapter was specified for collection: ' + collection.prototype.identity);","    }","","    // Set the connection as the default","    collection.prototype.connection = 'default';","  }","","  return collection;","};","","/**"," * Get the named connections"," *"," * @param {Object} collection"," * @param {Object} connections"," * @api private"," */","","CollectionLoader.prototype._getConnections = function _getConnections(collection, connections) {","","  // Hold the used connections","  var usedConnections = {};","","  // Normalize connection to array","  if (!Array.isArray(collection.prototype.connection)) {","    collection.prototype.connection = [collection.prototype.connection];","  }","","  // Set the connections used for the adapter","  collection.prototype.connection.forEach(function(conn) {","","    // Ensure the named connection exist","    if (!hasOwnProperty(connections, conn)) {","      var msg = 'The connection ' + conn + ' specified in ' + collection.prototype.identity + ' does not exist!';","      throw new Error(msg);","    }","","    usedConnections[conn] = connections[conn];","  });","","  return usedConnections;","};",""],"l":{"5":1,"15":1,"17":0,"20":0,"23":0,"25":0,"36":1,"37":0,"48":1,"51":0,"52":0,"56":0,"59":0,"63":0,"66":0,"67":0,"71":0,"74":0,"85":1,"88":0,"91":0,"92":0,"96":0,"99":0,"100":0,"101":0,"104":0,"107":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/collection/defaults.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/collection/defaults.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":10,"column":2}}},"branchMap":{},"code":["","/**"," * Default Collection properties"," * @type {Object}"," */","module.exports = {","","\tmigrate: 'alter'","","};",""],"l":{"6":1}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/collection/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/collection/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":1,"16":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":30,"loc":{"start":{"line":30,"column":34},"end":{"line":30,"column":71}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":40}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":40}},"4":{"start":{"line":10,"column":0},"end":{"line":10,"column":30}},"5":{"start":{"line":11,"column":0},"end":{"line":11,"column":32}},"6":{"start":{"line":30,"column":0},"end":{"line":50,"column":2}},"7":{"start":{"line":32,"column":2},"end":{"line":32,"column":18}},"8":{"start":{"line":35,"column":2},"end":{"line":35,"column":39}},"9":{"start":{"line":38,"column":2},"end":{"line":38,"column":29}},"10":{"start":{"line":41,"column":2},"end":{"line":41,"column":42}},"11":{"start":{"line":44,"column":2},"end":{"line":44,"column":18}},"12":{"start":{"line":47,"column":2},"end":{"line":47,"column":19}},"13":{"start":{"line":49,"column":2},"end":{"line":49,"column":14}},"14":{"start":{"line":52,"column":0},"end":{"line":52,"column":27}},"15":{"start":{"line":53,"column":0},"end":{"line":53,"column":28}},"16":{"start":{"line":56,"column":0},"end":{"line":56,"column":27}}},"branchMap":{"1":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":21},"end":{"line":35,"column":32}},{"start":{"line":35,"column":36},"end":{"line":35,"column":38}}]},"2":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":20},"end":{"line":41,"column":35}},{"start":{"line":41,"column":39},"end":{"line":41,"column":41}}]}},"code":["/**"," * Dependencies"," */","","var _ = require('lodash');","var extend = require('../utils/extend');","var inherits = require('util').inherits;","","// Various Pieces","var Core = require('../core');","var Query = require('../query');","","/**"," * Collection"," *"," * A prototype for managing a collection of database"," * records."," *"," * This file is the prototype for collections defined using Waterline."," * It contains the entry point for all ORM methods (e.g. User.find())"," *"," * Methods in this file defer to the adapter for their true implementation:"," * the implementation here just validates and normalizes the parameters."," *"," * @param {Object} waterline, reference to parent"," * @param {Object} options"," * @param {Function} callback"," */","","var Collection = module.exports = function(waterline, connections, cb) {","","  var self = this;","","  // Set the named connections","  this.connections = connections || {};","","  // Cache reference to the parent","  this.waterline = waterline;","","  // Default Attributes","  this.attributes = this.attributes || {};","","  // Instantiate Base Collection","  Core.call(this);","","  // Instantiate Query Language","  Query.call(this);","","  return this;","};","","inherits(Collection, Core);","inherits(Collection, Query);","","// Make Extendable","Collection.extend = extend;",""],"l":{"5":1,"6":1,"7":1,"10":1,"11":1,"30":1,"32":0,"35":0,"38":0,"41":0,"44":0,"47":0,"49":0,"52":1,"53":1,"56":1}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/extend.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/extend.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":10,"loc":{"start":{"line":10,"column":17},"end":{"line":10,"column":51}}},"2":{"name":"(anonymous_2)","line":17,"loc":{"start":{"line":17,"column":12},"end":{"line":17,"column":23}}},"3":{"name":"(anonymous_3)","line":22,"loc":{"start":{"line":22,"column":18},"end":{"line":22,"column":29}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":26}},"2":{"start":{"line":10,"column":0},"end":{"line":31,"column":2}},"3":{"start":{"line":11,"column":2},"end":{"line":11,"column":20}},"4":{"start":{"line":12,"column":2},"end":{"line":12,"column":12}},"5":{"start":{"line":14,"column":2},"end":{"line":18,"column":3}},"6":{"start":{"line":15,"column":4},"end":{"line":15,"column":35}},"7":{"start":{"line":17,"column":4},"end":{"line":17,"column":65}},"8":{"start":{"line":17,"column":25},"end":{"line":17,"column":62}},"9":{"start":{"line":20,"column":2},"end":{"line":20,"column":39}},"10":{"start":{"line":22,"column":2},"end":{"line":22,"column":59}},"11":{"start":{"line":22,"column":31},"end":{"line":22,"column":56}},"12":{"start":{"line":23,"column":2},"end":{"line":23,"column":41}},"13":{"start":{"line":24,"column":2},"end":{"line":24,"column":36}},"14":{"start":{"line":26,"column":2},"end":{"line":26,"column":56}},"15":{"start":{"line":26,"column":18},"end":{"line":26,"column":56}},"16":{"start":{"line":28,"column":2},"end":{"line":28,"column":37}},"17":{"start":{"line":30,"column":2},"end":{"line":30,"column":15}}},"branchMap":{"1":{"line":14,"type":"if","locations":[{"start":{"line":14,"column":2},"end":{"line":14,"column":2}},{"start":{"line":14,"column":2},"end":{"line":14,"column":2}}]},"2":{"line":14,"type":"binary-expr","locations":[{"start":{"line":14,"column":6},"end":{"line":14,"column":16}},{"start":{"line":14,"column":20},"end":{"line":14,"column":52}}]},"3":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":2},"end":{"line":26,"column":2}},{"start":{"line":26,"column":2},"end":{"line":26,"column":2}}]}},"code":["/**"," * Extend Method"," *"," * Taken from Backbone Source:"," * http://backbonejs.org/docs/backbone.html#section-189"," */","","var _ = require('lodash');","","module.exports = function(protoProps, staticProps) {","  var parent = this;","  var child;","","  if (protoProps && _.has(protoProps, 'constructor')) {","    child = protoProps.constructor;","  } else {","    child = function() { return parent.apply(this, arguments); };","  }","","  _.extend(child, parent, staticProps);","","  var Surrogate = function() { this.constructor = child; };","  Surrogate.prototype = parent.prototype;","  child.prototype = new Surrogate();","","  if (protoProps) _.extend(child.prototype, protoProps);","","  child.__super__ = parent.prototype;","","  return child;","};",""],"l":{"8":1,"10":1,"11":0,"12":0,"14":0,"15":0,"17":0,"20":0,"22":0,"23":0,"24":0,"26":0,"28":0,"30":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/core/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/core/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":1,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":28},"end":{"line":22,"column":46}}},"2":{"name":"(anonymous_2)","line":61,"loc":{"start":{"line":61,"column":19},"end":{"line":61,"column":37}}},"3":{"name":"(anonymous_3)","line":94,"loc":{"start":{"line":94,"column":40},"end":{"line":94,"column":54}}},"4":{"name":"(anonymous_4)","line":110,"loc":{"start":{"line":110,"column":40},"end":{"line":110,"column":55}}},"5":{"name":"(anonymous_5)","line":130,"loc":{"start":{"line":130,"column":28},"end":{"line":130,"column":39}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":60}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":32}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":33}},"6":{"start":{"line":10,"column":0},"end":{"line":10,"column":33}},"7":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}},"8":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"9":{"start":{"line":13,"column":0},"end":{"line":13,"column":47}},"10":{"start":{"line":14,"column":0},"end":{"line":14,"column":71}},"11":{"start":{"line":22,"column":0},"end":{"line":53,"column":2}},"12":{"start":{"line":24,"column":2},"end":{"line":24,"column":26}},"13":{"start":{"line":27,"column":2},"end":{"line":27,"column":36}},"14":{"start":{"line":28,"column":2},"end":{"line":28,"column":46}},"15":{"start":{"line":29,"column":2},"end":{"line":29,"column":44}},"16":{"start":{"line":31,"column":2},"end":{"line":31,"column":62}},"17":{"start":{"line":34,"column":2},"end":{"line":34,"column":26}},"18":{"start":{"line":35,"column":2},"end":{"line":35,"column":34}},"19":{"start":{"line":36,"column":2},"end":{"line":36,"column":36}},"20":{"start":{"line":40,"column":2},"end":{"line":40,"column":57}},"21":{"start":{"line":41,"column":2},"end":{"line":41,"column":71}},"22":{"start":{"line":42,"column":2},"end":{"line":42,"column":71}},"23":{"start":{"line":44,"column":2},"end":{"line":44,"column":56}},"24":{"start":{"line":46,"column":2},"end":{"line":47,"column":41}},"25":{"start":{"line":50,"column":2},"end":{"line":50,"column":39}},"26":{"start":{"line":52,"column":2},"end":{"line":52,"column":14}},"27":{"start":{"line":61,"column":0},"end":{"line":117,"column":2}},"28":{"start":{"line":62,"column":2},"end":{"line":62,"column":18}},"29":{"start":{"line":64,"column":2},"end":{"line":64,"column":26}},"30":{"start":{"line":67,"column":2},"end":{"line":67,"column":55}},"31":{"start":{"line":70,"column":2},"end":{"line":70,"column":73}},"32":{"start":{"line":73,"column":2},"end":{"line":73,"column":47}},"33":{"start":{"line":74,"column":2},"end":{"line":74,"column":42}},"34":{"start":{"line":74,"column":19},"end":{"line":74,"column":42}},"35":{"start":{"line":75,"column":2},"end":{"line":75,"column":56}},"36":{"start":{"line":75,"column":26},"end":{"line":75,"column":56}},"37":{"start":{"line":76,"column":2},"end":{"line":76,"column":56}},"38":{"start":{"line":76,"column":26},"end":{"line":76,"column":56}},"39":{"start":{"line":79,"column":2},"end":{"line":79,"column":86}},"40":{"start":{"line":81,"column":2},"end":{"line":81,"column":23}},"41":{"start":{"line":82,"column":2},"end":{"line":84,"column":3}},"42":{"start":{"line":83,"column":4},"end":{"line":83,"column":53}},"43":{"start":{"line":86,"column":2},"end":{"line":86,"column":64}},"44":{"start":{"line":89,"column":2},"end":{"line":89,"column":80}},"45":{"start":{"line":90,"column":2},"end":{"line":90,"column":45}},"46":{"start":{"line":91,"column":2},"end":{"line":91,"column":82}},"47":{"start":{"line":94,"column":2},"end":{"line":98,"column":5}},"48":{"start":{"line":95,"column":4},"end":{"line":97,"column":5}},"49":{"start":{"line":96,"column":6},"end":{"line":96,"column":28}},"50":{"start":{"line":101,"column":2},"end":{"line":101,"column":79}},"51":{"start":{"line":104,"column":2},"end":{"line":104,"column":83}},"52":{"start":{"line":107,"column":2},"end":{"line":107,"column":90}},"53":{"start":{"line":110,"column":2},"end":{"line":113,"column":5}},"54":{"start":{"line":111,"column":4},"end":{"line":111,"column":84}},"55":{"start":{"line":112,"column":4},"end":{"line":112,"column":60}},"56":{"start":{"line":116,"column":2},"end":{"line":116,"column":25}},"57":{"start":{"line":130,"column":0},"end":{"line":151,"column":2}},"58":{"start":{"line":133,"column":2},"end":{"line":135,"column":3}},"59":{"start":{"line":134,"column":4},"end":{"line":134,"column":46}},"60":{"start":{"line":138,"column":2},"end":{"line":138,"column":71}},"61":{"start":{"line":138,"column":59},"end":{"line":138,"column":71}},"62":{"start":{"line":139,"column":2},"end":{"line":139,"column":56}},"63":{"start":{"line":142,"column":2},"end":{"line":144,"column":3}},"64":{"start":{"line":143,"column":4},"end":{"line":143,"column":36}},"65":{"start":{"line":147,"column":2},"end":{"line":147,"column":59}},"66":{"start":{"line":147,"column":47},"end":{"line":147,"column":59}},"67":{"start":{"line":148,"column":2},"end":{"line":148,"column":66}},"68":{"start":{"line":148,"column":54},"end":{"line":148,"column":66}},"69":{"start":{"line":150,"column":2},"end":{"line":150,"column":36}}},"branchMap":{"1":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":12},"end":{"line":24,"column":19}},{"start":{"line":24,"column":23},"end":{"line":24,"column":25}}]},"2":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":17},"end":{"line":27,"column":29}},{"start":{"line":27,"column":33},"end":{"line":27,"column":35}}]},"3":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":21},"end":{"line":29,"column":37}},{"start":{"line":29,"column":41},"end":{"line":29,"column":43}}]},"4":{"line":46,"type":"cond-expr","locations":[{"start":{"line":47,"column":4},"end":{"line":47,"column":16}},{"start":{"line":47,"column":19},"end":{"line":47,"column":40}}]},"5":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":12},"end":{"line":64,"column":19}},{"start":{"line":64,"column":23},"end":{"line":64,"column":25}}]},"6":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":2},"end":{"line":74,"column":2}},{"start":{"line":74,"column":2},"end":{"line":74,"column":2}}]},"7":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":2},"end":{"line":75,"column":2}},{"start":{"line":75,"column":2},"end":{"line":75,"column":2}}]},"8":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":2},"end":{"line":76,"column":2}},{"start":{"line":76,"column":2},"end":{"line":76,"column":2}}]},"9":{"line":79,"type":"cond-expr","locations":[{"start":{"line":79,"column":49},"end":{"line":79,"column":67}},{"start":{"line":79,"column":70},"end":{"line":79,"column":85}}]},"10":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":2},"end":{"line":82,"column":2}},{"start":{"line":82,"column":2},"end":{"line":82,"column":2}}]},"11":{"line":82,"type":"binary-expr","locations":[{"start":{"line":82,"column":6},"end":{"line":82,"column":31}},{"start":{"line":82,"column":35},"end":{"line":82,"column":69}}]},"12":{"line":86,"type":"binary-expr","locations":[{"start":{"line":86,"column":27},"end":{"line":86,"column":57}},{"start":{"line":86,"column":61},"end":{"line":86,"column":63}}]},"13":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":4},"end":{"line":95,"column":4}},{"start":{"line":95,"column":4},"end":{"line":95,"column":4}}]},"14":{"line":95,"type":"binary-expr","locations":[{"start":{"line":95,"column":8},"end":{"line":95,"column":59}},{"start":{"line":95,"column":63},"end":{"line":95,"column":95}}]},"15":{"line":111,"type":"binary-expr","locations":[{"start":{"line":111,"column":42},"end":{"line":111,"column":77}},{"start":{"line":111,"column":81},"end":{"line":111,"column":83}}]},"16":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":2},"end":{"line":133,"column":2}},{"start":{"line":133,"column":2},"end":{"line":133,"column":2}}]},"17":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":2},"end":{"line":138,"column":2}},{"start":{"line":138,"column":2},"end":{"line":138,"column":2}}]},"18":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":6},"end":{"line":138,"column":22}},{"start":{"line":138,"column":26},"end":{"line":138,"column":57}}]},"19":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":2},"end":{"line":142,"column":2}},{"start":{"line":142,"column":2},"end":{"line":142,"column":2}}]},"20":{"line":142,"type":"binary-expr","locations":[{"start":{"line":142,"column":6},"end":{"line":142,"column":42}},{"start":{"line":142,"column":46},"end":{"line":142,"column":89}}]},"21":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":2},"end":{"line":147,"column":2}},{"start":{"line":147,"column":2},"end":{"line":147,"column":2}}]},"22":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":2},"end":{"line":148,"column":2}},{"start":{"line":148,"column":2},"end":{"line":148,"column":2}}]}},"code":["/**"," * Dependencies"," */","","var _ = require('lodash');","var schemaUtils = require('../utils/schema');","var COLLECTION_DEFAULTS = require('../collection/defaults');","var Model = require('../model');","var Cast = require('./typecast');","var Schema = require('./schema');","var Dictionary = require('./dictionary');","var Validator = require('./validations');","var Transformer = require('./transformations');","var hasOwnProperty = require('../utils/helpers').object.hasOwnProperty;","","/**"," * Core"," *"," * Setup the basic Core of a collection to extend."," */","","var Core = module.exports = function(options) {","","  options = options || {};","","  // Set Defaults","  this.adapter = this.adapter || {};","  this._attributes = _.clone(this.attributes);","  this.connections = this.connections || {};","","  this.defaults = _.merge(COLLECTION_DEFAULTS, this.defaults);","","  // Construct our internal objects","  this._cast = new Cast();","  this._schema = new Schema(this);","  this._validator = new Validator();","","  // Normalize attributes, extract instance methods, and callbacks","  // Note: this is ordered for a reason!","  this._callbacks = schemaUtils.normalizeCallbacks(this);","  this._instanceMethods = schemaUtils.instanceMethods(this.attributes);","  this._attributes = schemaUtils.normalizeAttributes(this._attributes);","","  this.hasSchema = Core._normalizeSchemaFlag.call(this);","","  this.migrate = Object.getPrototypeOf(this).hasOwnProperty('migrate') ?","    this.migrate : this.defaults.migrate;","","  // Initalize the internal values from the Collection","  Core._initialize.call(this, options);","","  return this;","};","","/**"," * Initialize"," *"," * Setups internal mappings from an extended collection."," */","","Core._initialize = function(options) {","  var self = this;","","  options = options || {};","","  // Extend a base Model with instance methods","  this._model = new Model(this, this._instanceMethods);","","  // Cache the attributes from the schema builder","  var schemaAttributes = this.waterline.schema[this.identity].attributes;","","  // Remove auto attributes for validations","  var _validations = _.clone(this._attributes);","  if (this.autoPK) delete _validations.id;","  if (this.autoCreatedAt) delete _validations.createdAt;","  if (this.autoUpdatedAt) delete _validations.updatedAt;","","  // If adapter exposes any reserved attributes, pass them to the schema","  var connIdx = Array.isArray(this.connection) ? this.connection[0] : this.connection;","","  var adapterInfo = {};","  if (this.connections[connIdx] && this.connections[connIdx]._adapter) {","    adapterInfo = this.connections[connIdx]._adapter;","  }","","  var reservedAttributes = adapterInfo.reservedAttributes || {};","","  // Initialize internal objects from attributes","  this._schema.initialize(this._attributes, this.hasSchema, reservedAttributes);","  this._cast.initialize(this._schema.schema);","  this._validator.initialize(_validations, this.types, this.defaults.validations);","","  // Set the collection's primaryKey attribute","  Object.keys(schemaAttributes).forEach(function(key) {","    if (hasOwnProperty(schemaAttributes[key], 'primaryKey') && schemaAttributes[key].primaryKey) {","      self.primaryKey = key;","    }","  });","","  // Build Data Transformer","  this._transformer = new Transformer(schemaAttributes, this.waterline.schema);","","  // Transform Schema","  this._schema.schema = this._transformer.serialize(this._schema.schema, 'schema');","","  // Build up a dictionary of which methods run on which connection","  this.adapterDictionary = new Dictionary(_.cloneDeep(this.connections), this.connection);","","  // Add this collection to the connection","  Object.keys(this.connections).forEach(function(conn) {","    self.connections[conn]._collections = self.connections[conn]._collections || [];","    self.connections[conn]._collections.push(self.identity);","  });","","  // Remove remnants of user defined attributes","  delete this.attributes;","};","","/**"," * Normalize Schema Flag"," *"," * Normalize schema setting by looking at the model first to see if it is defined, if not look at"," * the connection and see if it's defined and if not finally look into the adapter and check if"," * there is a default setting. If not found anywhere be safe and set to true."," *"," * @api private"," * @return {Boolean}"," */","","Core._normalizeSchemaFlag = function() {","","  // If schema is defined on the collection, return the value","  if (hasOwnProperty(Object.getPrototypeOf(this), 'schema')) {","    return Object.getPrototypeOf(this).schema;","  }","","  // Grab the first connection used","  if (!this.connection || !Array.isArray(this.connection)) return true;","  var connection = this.connections[this.connection[0]];","","  // Check the user defined config","  if (hasOwnProperty(connection, 'config') && hasOwnProperty(connection.config, 'schema')) {","    return connection.config.schema;","  }","","  // Check the defaults defined in the adapter","  if (!hasOwnProperty(connection, '_adapter')) return true;","  if (!hasOwnProperty(connection._adapter, 'schema')) return true;","","  return connection._adapter.schema;","};",""],"l":{"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"22":1,"24":0,"27":0,"28":0,"29":0,"31":0,"34":0,"35":0,"36":0,"40":0,"41":0,"42":0,"44":0,"46":0,"50":0,"52":0,"61":1,"62":0,"64":0,"67":0,"70":0,"73":0,"74":0,"75":0,"76":0,"79":0,"81":0,"82":0,"83":0,"86":0,"89":0,"90":0,"91":0,"94":0,"95":0,"96":0,"101":0,"104":0,"107":0,"110":0,"111":0,"112":0,"116":0,"130":1,"133":0,"134":0,"138":0,"139":0,"142":0,"143":0,"147":0,"148":0,"150":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/schema.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/schema.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":1,"30":0,"31":0,"32":1,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":1,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"(anonymous_1)","line":42,"loc":{"start":{"line":42,"column":29},"end":{"line":42,"column":45}}},"2":{"name":"(anonymous_2)","line":45,"loc":{"start":{"line":45,"column":29},"end":{"line":45,"column":43}}},"3":{"name":"(anonymous_3)","line":101,"loc":{"start":{"line":101,"column":25},"end":{"line":101,"column":41}}},"4":{"name":"(anonymous_4)","line":106,"loc":{"start":{"line":106,"column":29},"end":{"line":106,"column":43}}},"5":{"name":"(anonymous_5)","line":147,"loc":{"start":{"line":147,"column":28},"end":{"line":147,"column":46}}},"6":{"name":"defaultFn","line":151,"loc":{"start":{"line":151,"column":2},"end":{"line":151,"column":25}}},"7":{"name":"(anonymous_7)","line":152,"loc":{"start":{"line":152,"column":11},"end":{"line":152,"column":34}}},"8":{"name":"(anonymous_8)","line":208,"loc":{"start":{"line":208,"column":24},"end":{"line":208,"column":56}}},"9":{"name":"(anonymous_9)","line":214,"loc":{"start":{"line":214,"column":16},"end":{"line":214,"column":31}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":31}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":39}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":64}},"5":{"start":{"line":14,"column":0},"end":{"line":14,"column":38}},"6":{"start":{"line":42,"column":0},"end":{"line":74,"column":2}},"7":{"start":{"line":43,"column":2},"end":{"line":43,"column":22}},"8":{"start":{"line":45,"column":2},"end":{"line":71,"column":5}},"9":{"start":{"line":48,"column":4},"end":{"line":48,"column":49}},"10":{"start":{"line":48,"column":42},"end":{"line":48,"column":49}},"11":{"start":{"line":51,"column":4},"end":{"line":55,"column":5}},"12":{"start":{"line":52,"column":6},"end":{"line":52,"column":45}},"13":{"start":{"line":54,"column":6},"end":{"line":54,"column":35}},"14":{"start":{"line":58,"column":4},"end":{"line":60,"column":5}},"15":{"start":{"line":59,"column":6},"end":{"line":59,"column":64}},"16":{"start":{"line":63,"column":4},"end":{"line":65,"column":5}},"17":{"start":{"line":64,"column":6},"end":{"line":64,"column":66}},"18":{"start":{"line":68,"column":4},"end":{"line":70,"column":5}},"19":{"start":{"line":69,"column":6},"end":{"line":69,"column":56}},"20":{"start":{"line":73,"column":2},"end":{"line":73,"column":20}},"21":{"start":{"line":101,"column":0},"end":{"line":113,"column":2}},"22":{"start":{"line":102,"column":2},"end":{"line":102,"column":19}},"23":{"start":{"line":104,"column":2},"end":{"line":104,"column":29}},"24":{"start":{"line":104,"column":14},"end":{"line":104,"column":29}},"25":{"start":{"line":106,"column":2},"end":{"line":110,"column":5}},"26":{"start":{"line":107,"column":4},"end":{"line":109,"column":5}},"27":{"start":{"line":108,"column":6},"end":{"line":108,"column":32}},"28":{"start":{"line":112,"column":2},"end":{"line":112,"column":17}},"29":{"start":{"line":147,"column":0},"end":{"line":196,"column":2}},"30":{"start":{"line":148,"column":2},"end":{"line":148,"column":27}},"31":{"start":{"line":149,"column":2},"end":{"line":149,"column":15}},"32":{"start":{"line":151,"column":2},"end":{"line":153,"column":3}},"33":{"start":{"line":152,"column":4},"end":{"line":152,"column":53}},"34":{"start":{"line":152,"column":36},"end":{"line":152,"column":50}},"35":{"start":{"line":155,"column":2},"end":{"line":193,"column":3}},"36":{"start":{"line":156,"column":4},"end":{"line":156,"column":22}},"37":{"start":{"line":159,"column":4},"end":{"line":162,"column":5}},"38":{"start":{"line":160,"column":6},"end":{"line":160,"column":34}},"39":{"start":{"line":161,"column":6},"end":{"line":161,"column":15}},"40":{"start":{"line":164,"column":4},"end":{"line":192,"column":5}},"41":{"start":{"line":165,"column":6},"end":{"line":165,"column":19}},"42":{"start":{"line":168,"column":6},"end":{"line":180,"column":7}},"43":{"start":{"line":169,"column":8},"end":{"line":179,"column":9}},"44":{"start":{"line":171,"column":10},"end":{"line":176,"column":11}},"45":{"start":{"line":172,"column":12},"end":{"line":172,"column":62}},"46":{"start":{"line":173,"column":12},"end":{"line":173,"column":55}},"47":{"start":{"line":175,"column":12},"end":{"line":175,"column":83}},"48":{"start":{"line":178,"column":10},"end":{"line":178,"column":40}},"49":{"start":{"line":181,"column":11},"end":{"line":192,"column":5}},"50":{"start":{"line":183,"column":6},"end":{"line":188,"column":7}},"51":{"start":{"line":184,"column":8},"end":{"line":184,"column":54}},"52":{"start":{"line":185,"column":8},"end":{"line":185,"column":47}},"53":{"start":{"line":187,"column":8},"end":{"line":187,"column":75}},"54":{"start":{"line":191,"column":6},"end":{"line":191,"column":32}},"55":{"start":{"line":195,"column":2},"end":{"line":195,"column":13}},"56":{"start":{"line":208,"column":0},"end":{"line":226,"column":2}},"57":{"start":{"line":210,"column":2},"end":{"line":210,"column":39}},"58":{"start":{"line":210,"column":23},"end":{"line":210,"column":39}},"59":{"start":{"line":212,"column":2},"end":{"line":212,"column":42}},"60":{"start":{"line":214,"column":2},"end":{"line":222,"column":5}},"61":{"start":{"line":216,"column":4},"end":{"line":216,"column":71}},"62":{"start":{"line":216,"column":64},"end":{"line":216,"column":71}},"63":{"start":{"line":217,"column":4},"end":{"line":217,"column":70}},"64":{"start":{"line":217,"column":63},"end":{"line":217,"column":70}},"65":{"start":{"line":219,"column":4},"end":{"line":219,"column":53}},"66":{"start":{"line":220,"column":4},"end":{"line":220,"column":51}},"67":{"start":{"line":224,"column":2},"end":{"line":224,"column":25}},"68":{"start":{"line":225,"column":2},"end":{"line":225,"column":18}}},"branchMap":{"1":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":4},"end":{"line":48,"column":4}},{"start":{"line":48,"column":4},"end":{"line":48,"column":4}}]},"2":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":4},"end":{"line":51,"column":4}},{"start":{"line":51,"column":4},"end":{"line":51,"column":4}}]},"3":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":4},"end":{"line":58,"column":4}},{"start":{"line":58,"column":4},"end":{"line":58,"column":4}}]},"4":{"line":58,"type":"binary-expr","locations":[{"start":{"line":58,"column":8},"end":{"line":58,"column":28}},{"start":{"line":58,"column":32},"end":{"line":58,"column":75}}]},"5":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":4},"end":{"line":63,"column":4}},{"start":{"line":63,"column":4},"end":{"line":63,"column":4}}]},"6":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":4},"end":{"line":68,"column":4}},{"start":{"line":68,"column":4},"end":{"line":68,"column":4}}]},"7":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":2},"end":{"line":104,"column":2}},{"start":{"line":104,"column":2},"end":{"line":104,"column":2}}]},"8":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":4},"end":{"line":107,"column":4}},{"start":{"line":107,"column":4},"end":{"line":107,"column":4}}]},"9":{"line":159,"type":"if","locations":[{"start":{"line":159,"column":4},"end":{"line":159,"column":4}},{"start":{"line":159,"column":4},"end":{"line":159,"column":4}}]},"10":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":4},"end":{"line":164,"column":4}},{"start":{"line":164,"column":4},"end":{"line":164,"column":4}}]},"11":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":8},"end":{"line":169,"column":8}},{"start":{"line":169,"column":8},"end":{"line":169,"column":8}}]},"12":{"line":171,"type":"if","locations":[{"start":{"line":171,"column":10},"end":{"line":171,"column":10}},{"start":{"line":171,"column":10},"end":{"line":171,"column":10}}]},"13":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":11},"end":{"line":181,"column":11}},{"start":{"line":181,"column":11},"end":{"line":181,"column":11}}]},"14":{"line":183,"type":"if","locations":[{"start":{"line":183,"column":6},"end":{"line":183,"column":6}},{"start":{"line":183,"column":6},"end":{"line":183,"column":6}}]},"15":{"line":210,"type":"if","locations":[{"start":{"line":210,"column":2},"end":{"line":210,"column":2}},{"start":{"line":210,"column":2},"end":{"line":210,"column":2}}]},"16":{"line":216,"type":"if","locations":[{"start":{"line":216,"column":4},"end":{"line":216,"column":4}},{"start":{"line":216,"column":4},"end":{"line":216,"column":4}}]},"17":{"line":217,"type":"if","locations":[{"start":{"line":217,"column":4},"end":{"line":217,"column":4}},{"start":{"line":217,"column":4},"end":{"line":217,"column":4}}]}},"code":["/**"," * Dependencies"," */","","var _ = require('lodash');","var types = require('./types');","var callbacks = require('./callbacks');","var hasOwnProperty = require('./helpers').object.hasOwnProperty;","","/**"," * Expose schema"," */","","var schema = module.exports = exports;","","/**"," * Iterate over `attrs` normalizing string values to the proper"," * attribute object."," *"," * Example:"," * {"," *   name: 'STRING',"," *   age: {"," *     type: 'INTEGER'"," *   }"," * }"," *"," * Returns:"," * {"," *   name: {"," *     type: 'string'"," *   },"," *   age: {"," *     type: 'integer'"," *   }"," * }"," *"," * @param {Object} attrs"," * @return {Object}"," */","","schema.normalizeAttributes = function(attrs) {","  var attributes = {};","","  Object.keys(attrs).forEach(function(key) {","","    // Not concerned with functions","    if (typeof attrs[key] === 'function') return;","","    // Expand shorthand type","    if (typeof attrs[key] === 'string') {","      attributes[key] = { type: attrs[key] };","    } else {","      attributes[key] = attrs[key];","    }","","    // Ensure type is lower case","    if (attributes[key].type && typeof attributes[key].type !== 'undefined') {","      attributes[key].type = attributes[key].type.toLowerCase();","    }","","    // Ensure Collection property is lowercased","    if (hasOwnProperty(attrs[key], 'collection')) {","      attrs[key].collection = attrs[key].collection.toLowerCase();","    }","","    // Ensure Model property is lowercased","    if (hasOwnProperty(attrs[key], 'model')) {","      attrs[key].model = attrs[key].model.toLowerCase();","    }","  });","","  return attributes;","};","","","/**"," * Return all methods in `attrs` that should be provided"," * on the model."," *"," * Example:"," * {"," *   name: 'string',"," *   email: 'string',"," *   doSomething: function() {"," *     return true;"," *   }"," * }"," *"," * Returns:"," * {"," *   doSomething: function() {"," *     return true;"," *   }"," * }"," *"," * @param {Object} attrs"," * @return {Object}"," */","","schema.instanceMethods = function(attrs) {","  var methods = {};","","  if (!attrs) return methods;","","  Object.keys(attrs).forEach(function(key) {","    if (typeof attrs[key] === 'function') {","      methods[key] = attrs[key];","    }","  });","","  return methods;","};","","","/**"," * Normalize callbacks"," *"," * Return all callback functions in `context`, allows for string mapping to"," * functions located in `context.attributes`."," *"," * Example:"," * {"," *   attributes: {"," *     name: 'string',"," *     email: 'string',"," *     increment: function increment() { i++; }"," *   },"," *   afterCreate: 'increment',"," *   beforeCreate: function() { return true; }"," * }"," *"," * Returns:"," * {"," *   afterCreate: ["," *     function increment() { i++; }"," *   ],"," *   beforeCreate: ["," *     function() { return true; }"," *   ]"," * }"," *"," * @param {Object} context"," * @return {Object}"," */","","schema.normalizeCallbacks = function(context) {","  var i, _i, len, _len, fn;","  var fns = {};","","  function defaultFn(fn) {","    return function(values, next) { return next(); };","  }","","  for (i = 0, len = callbacks.length; i < len; i = i + 1) {","    fn = callbacks[i];","","    // Skip if the model hasn't defined this callback","    if (typeof context[fn] === 'undefined') {","      fns[fn] = [ defaultFn(fn) ];","      continue;","    }","","    if (Array.isArray(context[fn])) {","      fns[fn] = [];","","      // Iterate over all functions","      for (_i = 0, _len = context[fn].length; _i < _len; _i = _i + 1) {","        if (typeof context[fn][_i] === 'string') {","          // Attempt to map string to function","          if (typeof context.attributes[context[fn][_i]] === 'function') {","            fns[fn][_i] = context.attributes[context[fn][_i]];","            delete context.attributes[context[fn][_i]];","          } else {","            throw new Error('Unable to locate callback `' + context[fn][_i] + '`');","          }","        } else {","          fns[fn][_i] = context[fn][_i];","        }","      }","    } else if (typeof context[fn] === 'string') {","      // Attempt to map string to function","      if (typeof context.attributes[context[fn]] === 'function') {","        fns[fn] = [ context.attributes[context[fn]] ];","        delete context.attributes[context[fn]];","      } else {","        throw new Error('Unable to locate callback `' + context[fn] + '`');","      }","    } else {","      // Just add a single function","      fns[fn] = [ context[fn] ];","    }","  }","","  return fns;","};","","","/**"," * Replace any Join Criteria references with the defined tableName for a collection."," *"," * @param {Object} criteria"," * @param {Object} collections"," * @return {Object}"," * @api public"," */","","schema.serializeJoins = function(criteria, collections) {","","  if (!criteria.joins) return criteria;","","  var joins = _.cloneDeep(criteria.joins);","","  joins.forEach(function(join) {","","    if (!hasOwnProperty(collections[join.parent], 'tableName')) return;","    if (!hasOwnProperty(collections[join.child], 'tableName')) return;","","    join.parent = collections[join.parent].tableName;","    join.child = collections[join.child].tableName;","","  });","","  criteria.joins = joins;","  return criteria;","};",""],"l":{"5":1,"6":1,"7":1,"8":1,"14":1,"42":1,"43":0,"45":0,"48":0,"51":0,"52":0,"54":0,"58":0,"59":0,"63":0,"64":0,"68":0,"69":0,"73":0,"101":1,"102":0,"104":0,"106":0,"107":0,"108":0,"112":0,"147":1,"148":0,"149":0,"151":1,"152":0,"155":0,"156":0,"159":0,"160":0,"161":0,"164":0,"165":0,"168":0,"169":0,"171":0,"172":0,"173":0,"175":0,"178":0,"181":0,"183":0,"184":0,"185":0,"187":0,"191":0,"195":0,"208":1,"210":0,"212":0,"214":0,"216":0,"217":0,"219":0,"220":0,"224":0,"225":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/types.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/types.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":20,"column":2}}},"branchMap":{},"code":["/**"," * Types Supported By Schemas"," */","","module.exports = [","  'string',","  'text',","  'integer',","  'float',","  'date',","  'time',","  'datetime',","  'boolean',","  'binary',","  'array',","  'json',","  'mediumtext',","  'longtext',","  'objectid'","];",""],"l":{"5":1}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/callbacks.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/callbacks.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":14,"column":2}}},"branchMap":{},"code":["/**"," * Lifecycle Callbacks Allowed"," */","","module.exports = [","  'beforeValidate',","  'afterValidate',","  'beforeUpdate',","  'afterUpdate',","  'beforeCreate',","  'afterCreate',","  'beforeDestroy',","  'afterDestroy'","];",""],"l":{"5":1}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/model/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/model/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"fnMap":{"1":{"name":"(anonymous_1)","line":21,"loc":{"start":{"line":21,"column":17},"end":{"line":21,"column":43}}},"2":{"name":"(anonymous_2)","line":29,"loc":{"start":{"line":29,"column":14},"end":{"line":29,"column":25}}},"3":{"name":"(anonymous_3)","line":33,"loc":{"start":{"line":33,"column":10},"end":{"line":33,"column":32}}},"4":{"name":"(anonymous_4)","line":37,"loc":{"start":{"line":37,"column":13},"end":{"line":37,"column":26}}},"5":{"name":"(anonymous_5)","line":41,"loc":{"start":{"line":41,"column":25},"end":{"line":41,"column":36}}},"6":{"name":"(anonymous_6)","line":45,"loc":{"start":{"line":45,"column":28},"end":{"line":45,"column":39}}},"7":{"name":"(anonymous_7)","line":49,"loc":{"start":{"line":49,"column":11},"end":{"line":49,"column":28}}},"8":{"name":"(anonymous_8)","line":50,"loc":{"start":{"line":50,"column":42},"end":{"line":50,"column":56}}},"9":{"name":"(anonymous_9)","line":83,"loc":{"start":{"line":83,"column":14},"end":{"line":83,"column":27}}},"10":{"name":"(anonymous_10)","line":88,"loc":{"start":{"line":88,"column":33},"end":{"line":88,"column":47}}},"11":{"name":"(anonymous_11)","line":94,"loc":{"start":{"line":94,"column":28},"end":{"line":94,"column":54}}},"12":{"name":"(anonymous_12)","line":95,"loc":{"start":{"line":95,"column":35},"end":{"line":95,"column":49}}},"13":{"name":"(anonymous_13)","line":107,"loc":{"start":{"line":107,"column":65},"end":{"line":107,"column":85}}},"14":{"name":"(anonymous_14)","line":109,"loc":{"start":{"line":109,"column":24},"end":{"line":109,"column":35}}},"15":{"name":"(anonymous_15)","line":113,"loc":{"start":{"line":113,"column":34},"end":{"line":113,"column":48}}}},"statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":6,"column":26}},"2":{"start":{"line":7,"column":0},"end":{"line":7,"column":35}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":35}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":53}},"5":{"start":{"line":10,"column":0},"end":{"line":10,"column":55}},"6":{"start":{"line":21,"column":0},"end":{"line":134,"column":2}},"7":{"start":{"line":27,"column":2},"end":{"line":103,"column":4}},"8":{"start":{"line":30,"column":6},"end":{"line":30,"column":56}},"9":{"start":{"line":34,"column":6},"end":{"line":34,"column":65}},"10":{"start":{"line":38,"column":6},"end":{"line":38,"column":59}},"11":{"start":{"line":42,"column":6},"end":{"line":42,"column":60}},"12":{"start":{"line":46,"column":6},"end":{"line":46,"column":63}},"13":{"start":{"line":50,"column":6},"end":{"line":70,"column":9}},"14":{"start":{"line":51,"column":8},"end":{"line":51,"column":49}},"15":{"start":{"line":54,"column":8},"end":{"line":61,"column":9}},"16":{"start":{"line":55,"column":10},"end":{"line":55,"column":47}},"17":{"start":{"line":55,"column":40},"end":{"line":55,"column":47}},"18":{"start":{"line":56,"column":10},"end":{"line":60,"column":11}},"19":{"start":{"line":57,"column":12},"end":{"line":57,"column":50}},"20":{"start":{"line":59,"column":12},"end":{"line":59,"column":19}},"21":{"start":{"line":64,"column":8},"end":{"line":68,"column":9}},"22":{"start":{"line":65,"column":10},"end":{"line":65,"column":32}},"23":{"start":{"line":66,"column":10},"end":{"line":66,"column":45}},"24":{"start":{"line":66,"column":25},"end":{"line":66,"column":45}},"25":{"start":{"line":67,"column":10},"end":{"line":67,"column":44}},"26":{"start":{"line":67,"column":25},"end":{"line":67,"column":44}},"27":{"start":{"line":85,"column":6},"end":{"line":85,"column":35}},"28":{"start":{"line":87,"column":6},"end":{"line":100,"column":7}},"29":{"start":{"line":88,"column":8},"end":{"line":91,"column":11}},"30":{"start":{"line":89,"column":10},"end":{"line":89,"column":38}},"31":{"start":{"line":89,"column":21},"end":{"line":89,"column":36}},"32":{"start":{"line":90,"column":10},"end":{"line":90,"column":15}},"33":{"start":{"line":92,"column":8},"end":{"line":92,"column":15}},"34":{"start":{"line":94,"column":8},"end":{"line":99,"column":11}},"35":{"start":{"line":95,"column":10},"end":{"line":98,"column":13}},"36":{"start":{"line":96,"column":12},"end":{"line":96,"column":44}},"37":{"start":{"line":96,"column":23},"end":{"line":96,"column":42}},"38":{"start":{"line":97,"column":12},"end":{"line":97,"column":22}},"39":{"start":{"line":107,"column":2},"end":{"line":107,"column":130}},"40":{"start":{"line":107,"column":86},"end":{"line":107,"column":126}},"41":{"start":{"line":109,"column":2},"end":{"line":126,"column":4}},"42":{"start":{"line":110,"column":4},"end":{"line":110,"column":30}},"43":{"start":{"line":112,"column":4},"end":{"line":116,"column":5}},"44":{"start":{"line":113,"column":6},"end":{"line":115,"column":9}},"45":{"start":{"line":114,"column":8},"end":{"line":114,"column":24}},"46":{"start":{"line":125,"column":4},"end":{"line":125,"column":15}},"47":{"start":{"line":128,"column":2},"end":{"line":128,"column":49}},"48":{"start":{"line":130,"column":2},"end":{"line":130,"column":38}},"49":{"start":{"line":133,"column":2},"end":{"line":133,"column":15}}},"branchMap":{"1":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":8},"end":{"line":54,"column":8}},{"start":{"line":54,"column":8},"end":{"line":54,"column":8}}]},"2":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":12},"end":{"line":54,"column":28}},{"start":{"line":54,"column":32},"end":{"line":54,"column":47}}]},"3":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":10},"end":{"line":55,"column":10}},{"start":{"line":55,"column":10},"end":{"line":55,"column":10}}]},"4":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":8},"end":{"line":64,"column":8}},{"start":{"line":64,"column":8},"end":{"line":64,"column":8}}]},"5":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":10},"end":{"line":66,"column":10}},{"start":{"line":66,"column":10},"end":{"line":66,"column":10}}]},"6":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":10},"end":{"line":67,"column":10}},{"start":{"line":67,"column":10},"end":{"line":67,"column":10}}]},"7":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":6},"end":{"line":87,"column":6}},{"start":{"line":87,"column":6},"end":{"line":87,"column":6}}]},"8":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":10},"end":{"line":89,"column":10}},{"start":{"line":89,"column":10},"end":{"line":89,"column":10}}]},"9":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":12},"end":{"line":96,"column":12}},{"start":{"line":96,"column":12},"end":{"line":96,"column":12}}]},"10":{"line":107,"type":"cond-expr","locations":[{"start":{"line":107,"column":110},"end":{"line":107,"column":113}},{"start":{"line":107,"column":116},"end":{"line":107,"column":125}}]},"11":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":4},"end":{"line":112,"column":4}},{"start":{"line":112,"column":4},"end":{"line":112,"column":4}}]}},"code":["","/**"," * Module dependencies"," */","","var _ = require('lodash');","var Bluebird = require('bluebird');","var Model = require('./lib/model');","var defaultMethods = require('./lib/defaultMethods');","var internalMethods = require('./lib/internalMethods');","","/**"," * Build Extended Model Prototype"," *"," * @param {Object} context"," * @param {Object} mixins"," * @return {Object}"," * @api public"," */","","module.exports = function(context, mixins) {","","  /**","   * Extend the model prototype with default instance methods","   */","","  var prototypeFns = {","","    toObject: function() {","      return new defaultMethods.toObject(context, this);","    },","","    save: function(options, cb) {","      return new defaultMethods.save(context, this, options, cb);","    },","","    destroy: function(cb) {","      return new defaultMethods.destroy(context, this, cb);","    },","","    _defineAssociations: function() {","      new internalMethods.defineAssociations(context, this);","    },","","    _normalizeAssociations: function() {","      new internalMethods.normalizeAssociations(context, this);","    },","","    _cast: function(values) {","      _.keys(context._attributes).forEach(function(key) {","        var type = context._attributes[key].type;","","        // Attempt to parse Array or JSON type","        if (type === 'array' || type === 'json') {","          if (!_.isString(values[key])) return;","          try {","            values[key] = JSON.parse(values[key]);","          } catch(e) {","            return;","          }","        }","","        // Convert booleans back to true/false","        if (type === 'boolean') {","          var val = values[key];","          if (val === 0) values[key] = false;","          if (val === 1) values[key] = true;","        }","","      });","    },","","    /**","     * Model.validate()","     *","     * Takes the currently set attributes and validates the model","     * Shorthand for Model.validate({ attributes }, cb)","     *","     * @param {Function} callback - (err)","     * @return {Promise}","     */","","    validate: function(cb) {","      // Collect current values","      var values = this.toObject();","","      if (cb) {","        context.validate(values, function(err) {","          if (err) { return cb(err); }","          cb();","        });","        return;","      } else {","        return new Bluebird(function(resolve, reject) {","          context.validate(values, function(err) {","            if (err) { return reject(err); }","            resolve();","          });","        });","      }","    }","","  };","","  // If any of the attributes are protected, the default toJSON method should","  // remove them.","  var protectedAttributes = _.compact(_.map(context._attributes, function(attr, key) {return attr.protected ? key : undefined;}));","","  prototypeFns.toJSON = function() {","    var obj = this.toObject();","","    if (protectedAttributes.length) {","      _.each(protectedAttributes, function(key) {","        delete obj[key];","      });","    }","","    // Remove toJSON from the result, to prevent infinite recursion with","    // msgpack or other recursive object transformation tools.","    //","    // Causes issues if set to null and will error in Sails if we delete it because blueprints call it.","    //","    // obj.toJSON = null;","","    return obj;","  };","","  var prototype = _.extend(prototypeFns, mixins);","","  var model = Model.extend(prototype);","","  // Return the extended model for use in Waterline","  return model;","};",""],"l":{"6":1,"7":1,"8":1,"9":1,"10":1,"21":1,"27":0,"30":0,"34":0,"38":0,"42":0,"46":0,"50":0,"51":0,"54":0,"55":0,"56":0,"57":0,"59":0,"64":0,"65":0,"66":0,"67":0,"85":0,"87":0,"88":0,"89":0,"90":0,"92":0,"94":0,"95":0,"96":0,"97":0,"107":0,"109":0,"110":0,"112":0,"113":0,"114":0,"125":0,"128":0,"130":0,"133":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/model/lib/model.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/model/lib/model.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":25,"loc":{"start":{"line":25,"column":29},"end":{"line":25,"column":54}}},"2":{"name":"(anonymous_2)","line":67,"loc":{"start":{"line":67,"column":11},"end":{"line":67,"column":22}}}},"statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":6,"column":43}},"2":{"start":{"line":7,"column":0},"end":{"line":7,"column":26}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":27}},"4":{"start":{"line":25,"column":0},"end":{"line":78,"column":2}},"5":{"start":{"line":26,"column":2},"end":{"line":26,"column":18}},"6":{"start":{"line":28,"column":2},"end":{"line":28,"column":22}},"7":{"start":{"line":29,"column":2},"end":{"line":29,"column":26}},"8":{"start":{"line":32,"column":2},"end":{"line":36,"column":5}},"9":{"start":{"line":39,"column":2},"end":{"line":39,"column":20}},"10":{"start":{"line":42,"column":2},"end":{"line":42,"column":29}},"11":{"start":{"line":45,"column":2},"end":{"line":51,"column":3}},"12":{"start":{"line":46,"column":4},"end":{"line":46,"column":27}},"13":{"start":{"line":48,"column":4},"end":{"line":50,"column":5}},"14":{"start":{"line":49,"column":6},"end":{"line":49,"column":60}},"15":{"start":{"line":54,"column":2},"end":{"line":54,"column":32}},"16":{"start":{"line":63,"column":2},"end":{"line":75,"column":5}},"17":{"start":{"line":68,"column":6},"end":{"line":68,"column":17}},"18":{"start":{"line":69,"column":6},"end":{"line":71,"column":20}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":33}},"20":{"start":{"line":73,"column":6},"end":{"line":73,"column":50}},"21":{"start":{"line":77,"column":2},"end":{"line":77,"column":14}},"22":{"start":{"line":81,"column":0},"end":{"line":81,"column":22}}},"branchMap":{"1":{"line":28,"type":"binary-expr","locations":[{"start":{"line":28,"column":10},"end":{"line":28,"column":15}},{"start":{"line":28,"column":19},"end":{"line":28,"column":21}}]},"2":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":12},"end":{"line":29,"column":19}},{"start":{"line":29,"column":23},"end":{"line":29,"column":25}}]},"3":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":4},"end":{"line":48,"column":4}},{"start":{"line":48,"column":4},"end":{"line":48,"column":4}}]},"4":{"line":73,"type":"cond-expr","locations":[{"start":{"line":73,"column":22},"end":{"line":73,"column":42}},{"start":{"line":73,"column":45},"end":{"line":73,"column":49}}]}},"code":["","/**"," * Dependencies"," */","","var extend = require('../../utils/extend');","var _ = require('lodash');","var util = require('util');","","/**"," * A Basic Model Interface"," *"," * Initialize a new Model with given params"," *"," * @param {Object} attrs"," * @param {Object} options"," * @return {Object}"," * @api public"," *"," * var Person = Model.prototype;"," * var person = new Person({ name: 'Foo Bar' });"," * person.name # => 'Foo Bar'"," */","","var Model = module.exports = function(attrs, options) {","  var self = this;","","  attrs = attrs || {};","  options = options || {};","","  // Store options as properties","  Object.defineProperty(this, '_properties', {","    enumerable: false,","    writable: false,","    value: options","  });","","  // Cast things that need to be cast","  this._cast(attrs);","","  // Build association getters and setters","  this._defineAssociations();","","  // Attach attributes to the model instance","  for (var key in attrs) {","    this[key] = attrs[key];","","    if (this.associationsCache.hasOwnProperty(key)) {","      this.associationsCache[key] = _.cloneDeep(attrs[key]);","    }","  }","","  // Normalize associations","  this._normalizeAssociations();","","","  /**","   * Log output","   * @return {String} output when this model is util.inspect()ed","   * (usually with console.log())","   */","","  Object.defineProperty(this, 'inspect', {","    enumerable: false,","    configurable: false,","    writable: false,","    value: function() {","      var output;","      try {","        output = self.toObject();","      } catch (e) {}","","      return output ? util.inspect(output) : self;","    }","  });","","  return this;","};","","// Make Extendable","Model.extend = extend;",""],"l":{"6":1,"7":1,"8":1,"25":1,"26":0,"28":0,"29":0,"32":0,"39":0,"42":0,"45":0,"46":0,"48":0,"49":0,"54":0,"63":0,"68":0,"69":0,"70":0,"73":0,"77":0,"81":1}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/model/lib/defaultMethods/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/model/lib/defaultMethods/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":10,"column":2}}},"branchMap":{},"code":["","/**"," * Export Default Methods"," */","","module.exports = {","  toObject: require('./toObject'),","  destroy: require('./destroy'),","  save: require('./save')","};",""],"l":{"6":1}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/model/lib/defaultMethods/toObject.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/model/lib/defaultMethods/toObject.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":1,"57":0,"58":0,"59":0,"60":0,"61":0,"62":1,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":1,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":1,"112":0,"113":0,"114":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":21,"loc":{"start":{"line":21,"column":32},"end":{"line":21,"column":57}}},"2":{"name":"(anonymous_2)","line":70,"loc":{"start":{"line":70,"column":37},"end":{"line":70,"column":48}}},"3":{"name":"(anonymous_3)","line":85,"loc":{"start":{"line":85,"column":21},"end":{"line":85,"column":38}}},"4":{"name":"(anonymous_4)","line":90,"loc":{"start":{"line":90,"column":36},"end":{"line":90,"column":50}}},"5":{"name":"(anonymous_5)","line":121,"loc":{"start":{"line":121,"column":34},"end":{"line":121,"column":48}}},"6":{"name":"(anonymous_6)","line":142,"loc":{"start":{"line":142,"column":35},"end":{"line":142,"column":46}}},"7":{"name":"(anonymous_7)","line":145,"loc":{"start":{"line":145,"column":34},"end":{"line":145,"column":48}}},"8":{"name":"(anonymous_8)","line":160,"loc":{"start":{"line":160,"column":32},"end":{"line":160,"column":43}}},"9":{"name":"(anonymous_9)","line":167,"loc":{"start":{"line":167,"column":47},"end":{"line":167,"column":69}}},"10":{"name":"(anonymous_10)","line":185,"loc":{"start":{"line":185,"column":39},"end":{"line":185,"column":54}}},"11":{"name":"(anonymous_11)","line":215,"loc":{"start":{"line":215,"column":33},"end":{"line":215,"column":44}}},"12":{"name":"(anonymous_12)","line":251,"loc":{"start":{"line":251,"column":37},"end":{"line":251,"column":48}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":46}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":49}},"4":{"start":{"line":21,"column":0},"end":{"line":58,"column":2}},"5":{"start":{"line":23,"column":2},"end":{"line":23,"column":18}},"6":{"start":{"line":25,"column":2},"end":{"line":25,"column":25}},"7":{"start":{"line":26,"column":2},"end":{"line":26,"column":21}},"8":{"start":{"line":29,"column":2},"end":{"line":29,"column":22}},"9":{"start":{"line":32,"column":2},"end":{"line":32,"column":19}},"10":{"start":{"line":35,"column":2},"end":{"line":35,"column":25}},"11":{"start":{"line":36,"column":2},"end":{"line":36,"column":23}},"12":{"start":{"line":37,"column":2},"end":{"line":37,"column":20}},"13":{"start":{"line":38,"column":2},"end":{"line":38,"column":21}},"14":{"start":{"line":39,"column":2},"end":{"line":39,"column":25}},"15":{"start":{"line":44,"column":2},"end":{"line":57,"column":3}},"16":{"start":{"line":47,"column":4},"end":{"line":47,"column":55}},"17":{"start":{"line":49,"column":4},"end":{"line":49,"column":16}},"18":{"start":{"line":53,"column":4},"end":{"line":53,"column":26}},"19":{"start":{"line":54,"column":4},"end":{"line":54,"column":73}},"20":{"start":{"line":55,"column":4},"end":{"line":55,"column":27}},"21":{"start":{"line":56,"column":4},"end":{"line":56,"column":14}},"22":{"start":{"line":70,"column":0},"end":{"line":132,"column":2}},"23":{"start":{"line":71,"column":2},"end":{"line":71,"column":18}},"24":{"start":{"line":73,"column":2},"end":{"line":73,"column":38}},"25":{"start":{"line":73,"column":31},"end":{"line":73,"column":38}},"26":{"start":{"line":74,"column":2},"end":{"line":74,"column":48}},"27":{"start":{"line":74,"column":41},"end":{"line":74,"column":48}},"28":{"start":{"line":77,"column":2},"end":{"line":131,"column":3}},"29":{"start":{"line":80,"column":4},"end":{"line":98,"column":5}},"30":{"start":{"line":82,"column":6},"end":{"line":82,"column":23}},"31":{"start":{"line":83,"column":6},"end":{"line":83,"column":62}},"32":{"start":{"line":85,"column":6},"end":{"line":94,"column":9}},"33":{"start":{"line":86,"column":8},"end":{"line":86,"column":47}},"34":{"start":{"line":86,"column":40},"end":{"line":86,"column":47}},"35":{"start":{"line":88,"column":8},"end":{"line":88,"column":36}},"36":{"start":{"line":88,"column":29},"end":{"line":88,"column":36}},"37":{"start":{"line":89,"column":8},"end":{"line":89,"column":51}},"38":{"start":{"line":90,"column":8},"end":{"line":92,"column":11}},"39":{"start":{"line":91,"column":10},"end":{"line":91,"column":47}},"40":{"start":{"line":93,"column":8},"end":{"line":93,"column":27}},"41":{"start":{"line":96,"column":6},"end":{"line":96,"column":41}},"42":{"start":{"line":97,"column":6},"end":{"line":97,"column":15}},"43":{"start":{"line":101,"column":4},"end":{"line":101,"column":41}},"44":{"start":{"line":102,"column":4},"end":{"line":102,"column":13}},"45":{"start":{"line":107,"column":4},"end":{"line":130,"column":5}},"46":{"start":{"line":109,"column":6},"end":{"line":109,"column":30}},"47":{"start":{"line":110,"column":6},"end":{"line":110,"column":50}},"48":{"start":{"line":112,"column":6},"end":{"line":112,"column":38}},"49":{"start":{"line":117,"column":9},"end":{"line":130,"column":5}},"50":{"start":{"line":119,"column":6},"end":{"line":119,"column":45}},"51":{"start":{"line":121,"column":6},"end":{"line":123,"column":9}},"52":{"start":{"line":122,"column":8},"end":{"line":122,"column":32}},"53":{"start":{"line":125,"column":6},"end":{"line":125,"column":38}},"54":{"start":{"line":128,"column":9},"end":{"line":130,"column":5}},"55":{"start":{"line":129,"column":6},"end":{"line":129,"column":40}},"56":{"start":{"line":142,"column":0},"end":{"line":150,"column":2}},"57":{"start":{"line":143,"column":2},"end":{"line":143,"column":18}},"58":{"start":{"line":145,"column":2},"end":{"line":148,"column":5}},"59":{"start":{"line":146,"column":4},"end":{"line":146,"column":49}},"60":{"start":{"line":146,"column":42},"end":{"line":146,"column":49}},"61":{"start":{"line":147,"column":4},"end":{"line":147,"column":39}},"62":{"start":{"line":160,"column":0},"end":{"line":207,"column":2}},"63":{"start":{"line":161,"column":2},"end":{"line":161,"column":18}},"64":{"start":{"line":163,"column":2},"end":{"line":163,"column":38}},"65":{"start":{"line":163,"column":31},"end":{"line":163,"column":38}},"66":{"start":{"line":164,"column":2},"end":{"line":164,"column":48}},"67":{"start":{"line":164,"column":41},"end":{"line":164,"column":48}},"68":{"start":{"line":167,"column":2},"end":{"line":205,"column":5}},"69":{"start":{"line":170,"column":4},"end":{"line":170,"column":73}},"70":{"start":{"line":170,"column":66},"end":{"line":170,"column":73}},"71":{"start":{"line":173,"column":4},"end":{"line":173,"column":32}},"72":{"start":{"line":174,"column":4},"end":{"line":174,"column":123}},"73":{"start":{"line":174,"column":53},"end":{"line":174,"column":123}},"74":{"start":{"line":175,"column":4},"end":{"line":175,"column":133}},"75":{"start":{"line":175,"column":58},"end":{"line":175,"column":133}},"76":{"start":{"line":178,"column":4},"end":{"line":178,"column":125}},"77":{"start":{"line":178,"column":118},"end":{"line":178,"column":125}},"78":{"start":{"line":179,"column":4},"end":{"line":179,"column":37}},"79":{"start":{"line":182,"column":4},"end":{"line":192,"column":5}},"80":{"start":{"line":183,"column":6},"end":{"line":183,"column":23}},"81":{"start":{"line":185,"column":6},"end":{"line":188,"column":9}},"82":{"start":{"line":186,"column":8},"end":{"line":186,"column":62}},"83":{"start":{"line":186,"column":55},"end":{"line":186,"column":62}},"84":{"start":{"line":187,"column":8},"end":{"line":187,"column":36}},"85":{"start":{"line":190,"column":6},"end":{"line":190,"column":41}},"86":{"start":{"line":191,"column":6},"end":{"line":191,"column":13}},"87":{"start":{"line":194,"column":4},"end":{"line":194,"column":42}},"88":{"start":{"line":194,"column":35},"end":{"line":194,"column":42}},"89":{"start":{"line":198,"column":4},"end":{"line":201,"column":5}},"90":{"start":{"line":199,"column":6},"end":{"line":199,"column":58}},"91":{"start":{"line":200,"column":6},"end":{"line":200,"column":13}},"92":{"start":{"line":203,"column":4},"end":{"line":203,"column":78}},"93":{"start":{"line":203,"column":71},"end":{"line":203,"column":78}},"94":{"start":{"line":204,"column":4},"end":{"line":204,"column":65}},"95":{"start":{"line":215,"column":0},"end":{"line":243,"column":2}},"96":{"start":{"line":216,"column":2},"end":{"line":216,"column":44}},"97":{"start":{"line":217,"column":2},"end":{"line":217,"column":42}},"98":{"start":{"line":219,"column":2},"end":{"line":242,"column":3}},"99":{"start":{"line":220,"column":4},"end":{"line":220,"column":122}},"100":{"start":{"line":220,"column":113},"end":{"line":220,"column":122}},"101":{"start":{"line":223,"column":4},"end":{"line":226,"column":5}},"102":{"start":{"line":224,"column":6},"end":{"line":224,"column":36}},"103":{"start":{"line":225,"column":6},"end":{"line":225,"column":15}},"104":{"start":{"line":229,"column":4},"end":{"line":233,"column":5}},"105":{"start":{"line":232,"column":6},"end":{"line":232,"column":70}},"106":{"start":{"line":232,"column":40},"end":{"line":232,"column":70}},"107":{"start":{"line":235,"column":4},"end":{"line":241,"column":5}},"108":{"start":{"line":236,"column":6},"end":{"line":240,"column":7}},"109":{"start":{"line":239,"column":8},"end":{"line":239,"column":72}},"110":{"start":{"line":239,"column":42},"end":{"line":239,"column":72}},"111":{"start":{"line":251,"column":0},"end":{"line":257,"column":2}},"112":{"start":{"line":252,"column":2},"end":{"line":256,"column":3}},"113":{"start":{"line":253,"column":4},"end":{"line":255,"column":5}},"114":{"start":{"line":254,"column":6},"end":{"line":254,"column":30}}},"branchMap":{"1":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":2},"end":{"line":73,"column":2}},{"start":{"line":73,"column":2},"end":{"line":73,"column":2}}]},"2":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":2},"end":{"line":74,"column":2}},{"start":{"line":74,"column":2},"end":{"line":74,"column":2}}]},"3":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":4},"end":{"line":80,"column":4}},{"start":{"line":80,"column":4},"end":{"line":80,"column":4}}]},"4":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":8},"end":{"line":86,"column":8}},{"start":{"line":86,"column":8},"end":{"line":86,"column":8}}]},"5":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":8},"end":{"line":88,"column":8}},{"start":{"line":88,"column":8},"end":{"line":88,"column":8}}]},"6":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":4},"end":{"line":107,"column":4}},{"start":{"line":107,"column":4},"end":{"line":107,"column":4}}]},"7":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":9},"end":{"line":117,"column":9}},{"start":{"line":117,"column":9},"end":{"line":117,"column":9}}]},"8":{"line":117,"type":"binary-expr","locations":[{"start":{"line":117,"column":13},"end":{"line":117,"column":31}},{"start":{"line":117,"column":35},"end":{"line":117,"column":57}}]},"9":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":9},"end":{"line":128,"column":9}},{"start":{"line":128,"column":9},"end":{"line":128,"column":9}}]},"10":{"line":146,"type":"if","locations":[{"start":{"line":146,"column":4},"end":{"line":146,"column":4}},{"start":{"line":146,"column":4},"end":{"line":146,"column":4}}]},"11":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":2},"end":{"line":163,"column":2}},{"start":{"line":163,"column":2},"end":{"line":163,"column":2}}]},"12":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":2},"end":{"line":164,"column":2}},{"start":{"line":164,"column":2},"end":{"line":164,"column":2}}]},"13":{"line":170,"type":"if","locations":[{"start":{"line":170,"column":4},"end":{"line":170,"column":4}},{"start":{"line":170,"column":4},"end":{"line":170,"column":4}}]},"14":{"line":170,"type":"binary-expr","locations":[{"start":{"line":170,"column":8},"end":{"line":170,"column":31}},{"start":{"line":170,"column":35},"end":{"line":170,"column":64}}]},"15":{"line":174,"type":"if","locations":[{"start":{"line":174,"column":4},"end":{"line":174,"column":4}},{"start":{"line":174,"column":4},"end":{"line":174,"column":4}}]},"16":{"line":175,"type":"if","locations":[{"start":{"line":175,"column":4},"end":{"line":175,"column":4}},{"start":{"line":175,"column":4},"end":{"line":175,"column":4}}]},"17":{"line":178,"type":"if","locations":[{"start":{"line":178,"column":4},"end":{"line":178,"column":4}},{"start":{"line":178,"column":4},"end":{"line":178,"column":4}}]},"18":{"line":178,"type":"binary-expr","locations":[{"start":{"line":178,"column":8},"end":{"line":178,"column":59}},{"start":{"line":178,"column":63},"end":{"line":178,"column":116}}]},"19":{"line":182,"type":"if","locations":[{"start":{"line":182,"column":4},"end":{"line":182,"column":4}},{"start":{"line":182,"column":4},"end":{"line":182,"column":4}}]},"20":{"line":186,"type":"if","locations":[{"start":{"line":186,"column":8},"end":{"line":186,"column":8}},{"start":{"line":186,"column":8},"end":{"line":186,"column":8}}]},"21":{"line":194,"type":"if","locations":[{"start":{"line":194,"column":4},"end":{"line":194,"column":4}},{"start":{"line":194,"column":4},"end":{"line":194,"column":4}}]},"22":{"line":198,"type":"if","locations":[{"start":{"line":198,"column":4},"end":{"line":198,"column":4}},{"start":{"line":198,"column":4},"end":{"line":198,"column":4}}]},"23":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":4},"end":{"line":203,"column":4}},{"start":{"line":203,"column":4},"end":{"line":203,"column":4}}]},"24":{"line":220,"type":"if","locations":[{"start":{"line":220,"column":4},"end":{"line":220,"column":4}},{"start":{"line":220,"column":4},"end":{"line":220,"column":4}}]},"25":{"line":220,"type":"binary-expr","locations":[{"start":{"line":220,"column":8},"end":{"line":220,"column":55}},{"start":{"line":220,"column":59},"end":{"line":220,"column":111}}]},"26":{"line":223,"type":"if","locations":[{"start":{"line":223,"column":4},"end":{"line":223,"column":4}},{"start":{"line":223,"column":4},"end":{"line":223,"column":4}}]},"27":{"line":223,"type":"binary-expr","locations":[{"start":{"line":223,"column":8},"end":{"line":223,"column":19}},{"start":{"line":223,"column":23},"end":{"line":223,"column":74}}]},"28":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":4},"end":{"line":229,"column":4}},{"start":{"line":229,"column":4},"end":{"line":229,"column":4}}]},"29":{"line":229,"type":"binary-expr","locations":[{"start":{"line":229,"column":8},"end":{"line":229,"column":18}},{"start":{"line":229,"column":22},"end":{"line":229,"column":43}}]},"30":{"line":232,"type":"if","locations":[{"start":{"line":232,"column":6},"end":{"line":232,"column":6}},{"start":{"line":232,"column":6},"end":{"line":232,"column":6}}]},"31":{"line":235,"type":"if","locations":[{"start":{"line":235,"column":4},"end":{"line":235,"column":4}},{"start":{"line":235,"column":4},"end":{"line":235,"column":4}}]},"32":{"line":235,"type":"binary-expr","locations":[{"start":{"line":235,"column":8},"end":{"line":235,"column":18}},{"start":{"line":235,"column":22},"end":{"line":235,"column":38}}]},"33":{"line":236,"type":"if","locations":[{"start":{"line":236,"column":6},"end":{"line":236,"column":6}},{"start":{"line":236,"column":6},"end":{"line":236,"column":6}}]},"34":{"line":239,"type":"if","locations":[{"start":{"line":239,"column":8},"end":{"line":239,"column":8}},{"start":{"line":239,"column":8},"end":{"line":239,"column":8}}]},"35":{"line":253,"type":"if","locations":[{"start":{"line":253,"column":4},"end":{"line":253,"column":4}},{"start":{"line":253,"column":4},"end":{"line":253,"column":4}}]}},"code":["/**"," * Module dependencies"," */","","var _ = require('lodash');","var utils = require('../../../utils/helpers');","var hasOwnProperty = utils.object.hasOwnProperty;","","/**"," * Model.toObject()"," *"," * Returns an object containing just the model values. Useful for doing"," * operations on the current values minus the instance methods."," *"," * @param {Object} context, Waterline collection instance"," * @param {Object} proto, model prototype"," * @api public"," * @return {Object}"," */","","var toObject = module.exports = function(context, proto) {","","  var self = this;","","  this.context = context;","  this.proto = proto;","","  // Hold joins used in the query","  this.usedJoins = [];","","  // Create an object that can hold the values to be returned","  this.object = {};","","  // Run methods to add and modify values to the above object","  this.addAssociations();","  this.addProperties();","  this.makeObject();","  this.filterJoins();","  this.filterFunctions();","","  // Ok now we want to create a POJO that can be serialized for use in a response.","  // This is after all usually called in a toJSON method so lets make sure its all","  // good in there. This could be faster and safer I recon.","  try {","","    // Stringify/parse the object","    var _obj = JSON.parse(JSON.stringify(this.object));","","    return _obj;","","  // Return a nicer error message than just throwing the json parse message","  } catch (e) {","    var err = new Error();","    err.message = 'There was an error turning the model into an object.';","    err.data = self.object;","    throw err;","  }","};","","","/**"," * Add Association Keys"," *"," * If a showJoins flag is active, add all association keys."," *"," * @param {Object} keys"," * @api private"," */","","toObject.prototype.addAssociations = function() {","  var self = this;","","  if (!this.proto._properties) return;","  if (!this.proto._properties.showJoins) return;","","  // Copy prototype over for attributes","  for (var association in this.proto.associations) {","","    // Handle hasMany attributes","    if (hasOwnProperty(this.proto.associations[association], 'value')) {","","      var records = [];","      var values = this.proto.associations[association].value;","","      values.forEach(function(record) {","        if (typeof record !== 'object') return;","        // Since `typeof null` === `\"object\"`, we should also check for that case:","        if (record === null) return;","        var item = Object.create(record.__proto__);","        Object.keys(record).forEach(function(key) {","          item[key] = _.cloneDeep(record[key]);","        });","        records.push(item);","      });","","      this.object[association] = records;","      continue;","    }","","    // Handle belongsTo attributes","    var record = this.proto[association];","    var item;","","    // Check if the association foreign key is a date. If so set the object's","    // association and continue. Manual check here is needed because _.isObject","    // matches dates and you will end up with a loop that never exits.","    if (_.isDate(record)) {","","      item = new Date(record);","      _.extend(item.__proto__ , record.__proto__);","","      this.object[association] = item;","    }","","    // Is the record is a populated object, create a new object from it.","    // _.isObject() does not match null, so we're good here.","    else if (_.isObject(record) && !Array.isArray(record)) {","","      item = Object.create(record.__proto__);","","      Object.keys(record).forEach(function(key) {","        item[key] = record[key];","      });","","      this.object[association] = item;","    }","","    else if (!_.isUndefined(record)) {","      this.object[association] = record;","    }","  }","};","","/**"," * Add Properties"," *"," * Copies over non-association attributes to the newly created object."," *"," * @api private"," */","","toObject.prototype.addProperties = function() {","  var self = this;","","  Object.keys(this.proto).forEach(function(key) {","    if (hasOwnProperty(self.object, key)) return;","    self.object[key] = self.proto[key];","  });","","};","","/**"," * Make Object"," *"," * Runs toJSON on all associated values"," *"," * @api private"," */","","toObject.prototype.makeObject = function() {","  var self = this;","","  if (!this.proto._properties) return;","  if (!this.proto._properties.showJoins) return;","","  // Handle Joins","  Object.keys(this.proto.associations).forEach(function(association) {","","    // Don't run toJSON on records that were not populated","    if (!self.proto._properties || !self.proto._properties.joins) return;","","    // Build up a join key name based on the attribute's model/collection name","    var joinsName = association;","    if (self.context._attributes[association].model) joinsName = self.context._attributes[association].model.toLowerCase();","    if (self.context._attributes[association].collection) joinsName = self.context._attributes[association].collection.toLowerCase();","","    // Check if the join was used","    if (self.proto._properties.joins.indexOf(joinsName) < 0 && self.proto._properties.joins.indexOf(association) < 0) return;","    self.usedJoins.push(association);","","    // Call toJSON on each associated record","    if (Array.isArray(self.object[association])) {","      var records = [];","","      self.object[association].forEach(function(item) {","        if (!hasOwnProperty(item.__proto__, 'toJSON')) return;","        records.push(item.toJSON());","      });","","      self.object[association] = records;","      return;","    }","","    if (!self.object[association]) return;","","    // Association was null or not valid","    // (don't try to `hasOwnProperty` it so we don't throw)","    if (typeof self.object[association] !== 'object') {","      self.object[association] = self.object[association];","      return;","    }","","    if (!hasOwnProperty(self.object[association].__proto__, 'toJSON')) return;","    self.object[association] = self.object[association].toJSON();","  });","","};","","/**"," * Remove Non-Joined Associations"," *"," * @api private"," */","","toObject.prototype.filterJoins = function() {","  var attributes = this.context._attributes;","  var properties = this.proto._properties;","","  for (var attribute in attributes) {","    if (!hasOwnProperty(attributes[attribute], 'model') && !hasOwnProperty(attributes[attribute], 'collection')) continue;","","    // If no properties and a collection attribute, delete the association and return","    if (!properties && hasOwnProperty(attributes[attribute], 'collection')) {","      delete this.object[attribute];","      continue;","    }","","    // If showJoins is false remove the association object","    if (properties && !properties.showJoins) {","","      // Don't delete belongs to keys","      if (!attributes[attribute].model) delete this.object[attribute];","    }","","    if (properties && properties.joins) {","      if (this.usedJoins.indexOf(attribute) < 0) {","","        // Don't delete belongs to keys","        if (!attributes[attribute].model) delete this.object[attribute];","      }","    }","  }","};","","/**"," * Filter Functions"," *"," * @api private"," */","","toObject.prototype.filterFunctions = function() {","  for (var key in this.object) {","    if (typeof this.object[key] === 'function') {","      delete this.object[key];","    }","  }","};",""],"l":{"5":1,"6":1,"7":1,"21":1,"23":0,"25":0,"26":0,"29":0,"32":0,"35":0,"36":0,"37":0,"38":0,"39":0,"44":0,"47":0,"49":0,"53":0,"54":0,"55":0,"56":0,"70":1,"71":0,"73":0,"74":0,"77":0,"80":0,"82":0,"83":0,"85":0,"86":0,"88":0,"89":0,"90":0,"91":0,"93":0,"96":0,"97":0,"101":0,"102":0,"107":0,"109":0,"110":0,"112":0,"117":0,"119":0,"121":0,"122":0,"125":0,"128":0,"129":0,"142":1,"143":0,"145":0,"146":0,"147":0,"160":1,"161":0,"163":0,"164":0,"167":0,"170":0,"173":0,"174":0,"175":0,"178":0,"179":0,"182":0,"183":0,"185":0,"186":0,"187":0,"190":0,"191":0,"194":0,"198":0,"199":0,"200":0,"203":0,"204":0,"215":1,"216":0,"217":0,"219":0,"220":0,"223":0,"224":0,"225":0,"229":0,"232":0,"235":0,"236":0,"239":0,"251":1,"252":0,"253":0,"254":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/model/lib/defaultMethods/destroy.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/model/lib/defaultMethods/destroy.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":1,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":9,"loc":{"start":{"line":9,"column":11},"end":{"line":9,"column":22}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":31},"end":{"line":23,"column":60}}},"3":{"name":"(anonymous_3)","line":65,"loc":{"start":{"line":65,"column":28},"end":{"line":65,"column":50}}},"4":{"name":"(anonymous_4)","line":95,"loc":{"start":{"line":95,"column":35},"end":{"line":95,"column":64}}}},"statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":6,"column":46}},"2":{"start":{"line":7,"column":0},"end":{"line":7,"column":49}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":44}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":25}},"5":{"start":{"line":23,"column":0},"end":{"line":85,"column":2}},"6":{"start":{"line":25,"column":2},"end":{"line":25,"column":15}},"7":{"start":{"line":26,"column":2},"end":{"line":26,"column":10}},"8":{"start":{"line":28,"column":2},"end":{"line":30,"column":3}},"9":{"start":{"line":29,"column":4},"end":{"line":29,"column":23}},"10":{"start":{"line":32,"column":2},"end":{"line":32,"column":18}},"11":{"start":{"line":34,"column":2},"end":{"line":34,"column":32}},"12":{"start":{"line":35,"column":2},"end":{"line":35,"column":73}},"13":{"start":{"line":36,"column":2},"end":{"line":36,"column":59}},"14":{"start":{"line":38,"column":2},"end":{"line":47,"column":3}},"15":{"start":{"line":39,"column":4},"end":{"line":40,"column":76}},"16":{"start":{"line":42,"column":4},"end":{"line":44,"column":5}},"17":{"start":{"line":43,"column":6},"end":{"line":43,"column":27}},"18":{"start":{"line":46,"column":4},"end":{"line":46,"column":19}},"19":{"start":{"line":49,"column":2},"end":{"line":58,"column":3}},"20":{"start":{"line":50,"column":4},"end":{"line":51,"column":70}},"21":{"start":{"line":53,"column":4},"end":{"line":55,"column":5}},"22":{"start":{"line":54,"column":6},"end":{"line":54,"column":27}},"23":{"start":{"line":57,"column":4},"end":{"line":57,"column":19}},"24":{"start":{"line":61,"column":2},"end":{"line":61,"column":20}},"25":{"start":{"line":62,"column":2},"end":{"line":62,"column":44}},"26":{"start":{"line":65,"column":2},"end":{"line":80,"column":5}},"27":{"start":{"line":66,"column":4},"end":{"line":73,"column":5}},"28":{"start":{"line":68,"column":6},"end":{"line":70,"column":7}},"29":{"start":{"line":69,"column":8},"end":{"line":69,"column":29}},"30":{"start":{"line":72,"column":6},"end":{"line":72,"column":21}},"31":{"start":{"line":75,"column":4},"end":{"line":77,"column":5}},"32":{"start":{"line":76,"column":6},"end":{"line":76,"column":31}},"33":{"start":{"line":79,"column":4},"end":{"line":79,"column":30}},"34":{"start":{"line":82,"column":2},"end":{"line":84,"column":3}},"35":{"start":{"line":83,"column":4},"end":{"line":83,"column":28}},"36":{"start":{"line":95,"column":0},"end":{"line":109,"column":2}},"37":{"start":{"line":96,"column":2},"end":{"line":96,"column":24}},"38":{"start":{"line":98,"column":2},"end":{"line":103,"column":3}},"39":{"start":{"line":99,"column":4},"end":{"line":102,"column":5}},"40":{"start":{"line":100,"column":6},"end":{"line":100,"column":29}},"41":{"start":{"line":101,"column":6},"end":{"line":101,"column":12}},"42":{"start":{"line":106,"column":2},"end":{"line":106,"column":69}},"43":{"start":{"line":106,"column":51},"end":{"line":106,"column":69}},"44":{"start":{"line":108,"column":2},"end":{"line":108,"column":20}}},"branchMap":{"1":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":2},"end":{"line":28,"column":2}},{"start":{"line":28,"column":2},"end":{"line":28,"column":2}}]},"2":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":7},"end":{"line":32,"column":9}},{"start":{"line":32,"column":13},"end":{"line":32,"column":17}}]},"3":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":2},"end":{"line":38,"column":2}},{"start":{"line":38,"column":2},"end":{"line":38,"column":2}}]},"4":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":4},"end":{"line":42,"column":4}},{"start":{"line":42,"column":4},"end":{"line":42,"column":4}}]},"5":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":2},"end":{"line":49,"column":2}},{"start":{"line":49,"column":2},"end":{"line":49,"column":2}}]},"6":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":4},"end":{"line":53,"column":4}},{"start":{"line":53,"column":4},"end":{"line":53,"column":4}}]},"7":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":4},"end":{"line":66,"column":4}},{"start":{"line":66,"column":4},"end":{"line":66,"column":4}}]},"8":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":6},"end":{"line":68,"column":6}},{"start":{"line":68,"column":6},"end":{"line":68,"column":6}}]},"9":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":4},"end":{"line":75,"column":4}},{"start":{"line":75,"column":4},"end":{"line":75,"column":4}}]},"10":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":2},"end":{"line":82,"column":2}},{"start":{"line":82,"column":2},"end":{"line":82,"column":2}}]},"11":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":4},"end":{"line":99,"column":4}},{"start":{"line":99,"column":4},"end":{"line":99,"column":4}}]},"12":{"line":99,"type":"binary-expr","locations":[{"start":{"line":99,"column":8},"end":{"line":99,"column":59}},{"start":{"line":99,"column":63},"end":{"line":99,"column":95}}]},"13":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":2},"end":{"line":106,"column":2}},{"start":{"line":106,"column":2},"end":{"line":106,"column":2}}]},"14":{"line":106,"type":"binary-expr","locations":[{"start":{"line":106,"column":6},"end":{"line":106,"column":17}},{"start":{"line":106,"column":21},"end":{"line":106,"column":49}}]}},"code":["","/**"," * Module dependencies"," */","","var utils = require('../../../utils/helpers');","var hasOwnProperty = utils.object.hasOwnProperty;","var defer = require('../../../utils/defer');","var noop = function() {};","","/**"," * Model.destroy()"," *"," * Destroys an instance of a model"," *"," * @param {Object} context,"," * @param {Object} proto"," * @param {Function} callback"," * @return {Promise}"," * @api public"," */","","var Destroy = module.exports = function(context, proto, cb) {","","  var deferred;","  var err;","","  if (typeof cb !== 'function') {","    deferred = defer();","  }","","  cb = cb || noop;","","  var values = proto.toObject();","  var attributes = context.waterline.schema[context.identity].attributes;","  var primaryKey = this.findPrimaryKey(attributes, values);","","  if (!primaryKey) {","    err = new Error('No Primary Key set to update the record with! ' +","    'Try setting an attribute as a primary key or include an ID property.');","","    if (deferred) {","      deferred.reject(err);","    }","","    return cb(err);","  }","","  if (!values[primaryKey]) {","    err = new Error('No Primary Key set to update the record with! ' +","    'Primary Key must have a value, it can\\'t be an optional value.');","","    if (deferred) {","      deferred.reject(err);","    }","","    return cb(err);","  }","","  // Build Search Criteria","  var criteria = {};","  criteria[primaryKey] = values[primaryKey];","","  // Execute Query","  context.destroy(criteria, function(err, status) {","    if (err) {","","      if (deferred) {","        deferred.reject(err);","      }","","      return cb(err);","    }","","    if (deferred) {","      deferred.resolve(status);","    }","","    cb.apply(this, arguments);","  });","","  if (deferred) {","    return deferred.promise;","  }","};","","/**"," * Find Primary Key"," *"," * @param {Object} attributes"," * @param {Object} values"," * @api private"," */","","Destroy.prototype.findPrimaryKey = function(attributes, values) {","  var primaryKey = null;","","  for (var attribute in attributes) {","    if (hasOwnProperty(attributes[attribute], 'primaryKey') && attributes[attribute].primaryKey) {","      primaryKey = attribute;","      break;","    }","  }","","  // If no primary key check for an ID property","  if (!primaryKey && hasOwnProperty(values, 'id')) primaryKey = 'id';","","  return primaryKey;","};",""],"l":{"6":1,"7":1,"8":1,"9":1,"23":1,"25":0,"26":0,"28":0,"29":0,"32":0,"34":0,"35":0,"36":0,"38":0,"39":0,"42":0,"43":0,"46":0,"49":0,"50":0,"53":0,"54":0,"57":0,"61":0,"62":0,"65":0,"66":0,"68":0,"69":0,"72":0,"75":0,"76":0,"79":0,"82":0,"83":0,"95":1,"96":0,"98":0,"99":0,"100":0,"101":0,"106":0,"108":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/defer.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/defer.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"defer","line":3,"loc":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}}},"2":{"name":"(anonymous_2)","line":6,"loc":{"start":{"line":6,"column":28},"end":{"line":6,"column":39}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":34}},"2":{"start":{"line":3,"column":0},"end":{"line":16,"column":2}},"3":{"start":{"line":4,"column":2},"end":{"line":4,"column":22}},"4":{"start":{"line":6,"column":2},"end":{"line":9,"column":5}},"5":{"start":{"line":7,"column":4},"end":{"line":7,"column":27}},"6":{"start":{"line":8,"column":4},"end":{"line":8,"column":26}},"7":{"start":{"line":11,"column":2},"end":{"line":15,"column":4}}},"branchMap":{},"code":["var Promise = require('bluebird');","","module.exports = function defer() {","  var resolve, reject;","","  var promise = new Promise(function() {","    resolve = arguments[0];","    reject = arguments[1];","  });","","  return {","    resolve: resolve,","    reject: reject,","    promise: promise","  };","};",""],"l":{"1":1,"3":1,"4":0,"6":0,"7":0,"8":0,"11":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/model/lib/defaultMethods/save.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/model/lib/defaultMethods/save.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"fnMap":{"1":{"name":"(anonymous_1)","line":10,"loc":{"start":{"line":10,"column":11},"end":{"line":10,"column":22}}},"2":{"name":"(anonymous_2)","line":26,"loc":{"start":{"line":26,"column":17},"end":{"line":26,"column":55}}},"3":{"name":"(anonymous_3)","line":53,"loc":{"start":{"line":53,"column":24},"end":{"line":53,"column":39}}},"4":{"name":"(anonymous_4)","line":56,"loc":{"start":{"line":56,"column":28},"end":{"line":56,"column":51}}},"5":{"name":"(anonymous_5)","line":58,"loc":{"start":{"line":58,"column":36},"end":{"line":58,"column":47}}},"6":{"name":"(anonymous_6)","line":75,"loc":{"start":{"line":75,"column":34},"end":{"line":75,"column":45}}},"7":{"name":"(anonymous_7)","line":82,"loc":{"start":{"line":82,"column":41},"end":{"line":82,"column":56}}},"8":{"name":"(anonymous_8)","line":87,"loc":{"start":{"line":87,"column":55},"end":{"line":87,"column":75}}},"9":{"name":"(anonymous_9)","line":96,"loc":{"start":{"line":96,"column":55},"end":{"line":96,"column":70}}},"10":{"name":"(anonymous_10)","line":104,"loc":{"start":{"line":104,"column":46},"end":{"line":104,"column":60}}},"11":{"name":"(anonymous_11)","line":120,"loc":{"start":{"line":120,"column":32},"end":{"line":120,"column":43}}},"12":{"name":"(anonymous_12)","line":127,"loc":{"start":{"line":127,"column":68},"end":{"line":127,"column":92}}},"13":{"name":"(anonymous_13)","line":129,"loc":{"start":{"line":129,"column":54},"end":{"line":129,"column":88}}},"14":{"name":"(anonymous_14)","line":145,"loc":{"start":{"line":145,"column":74},"end":{"line":145,"column":98}}},"15":{"name":"(anonymous_15)","line":147,"loc":{"start":{"line":147,"column":57},"end":{"line":147,"column":91}}},"16":{"name":"(anonymous_16)","line":161,"loc":{"start":{"line":161,"column":2},"end":{"line":161,"column":25}}},"17":{"name":"(anonymous_17)","line":204,"loc":{"start":{"line":204,"column":20},"end":{"line":204,"column":39}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":26}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":29}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":32}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":61}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":58}},"6":{"start":{"line":6,"column":0},"end":{"line":6,"column":64}},"7":{"start":{"line":7,"column":0},"end":{"line":7,"column":66}},"8":{"start":{"line":8,"column":0},"end":{"line":8,"column":44}},"9":{"start":{"line":9,"column":0},"end":{"line":9,"column":48}},"10":{"start":{"line":10,"column":0},"end":{"line":10,"column":25}},"11":{"start":{"line":26,"column":0},"end":{"line":220,"column":2}},"12":{"start":{"line":28,"column":2},"end":{"line":28,"column":15}},"13":{"start":{"line":30,"column":2},"end":{"line":33,"column":3}},"14":{"start":{"line":31,"column":4},"end":{"line":31,"column":17}},"15":{"start":{"line":32,"column":4},"end":{"line":32,"column":17}},"16":{"start":{"line":35,"column":2},"end":{"line":37,"column":3}},"17":{"start":{"line":36,"column":4},"end":{"line":36,"column":23}},"18":{"start":{"line":39,"column":2},"end":{"line":39,"column":18}},"19":{"start":{"line":47,"column":2},"end":{"line":47,"column":25}},"20":{"start":{"line":49,"column":2},"end":{"line":215,"column":5}},"21":{"start":{"line":54,"column":6},"end":{"line":54,"column":59}},"22":{"start":{"line":56,"column":6},"end":{"line":78,"column":15}},"23":{"start":{"line":57,"column":8},"end":{"line":61,"column":9}},"24":{"start":{"line":58,"column":10},"end":{"line":60,"column":13}},"25":{"start":{"line":59,"column":12},"end":{"line":59,"column":22}},"26":{"start":{"line":63,"column":8},"end":{"line":63,"column":36}},"27":{"start":{"line":64,"column":8},"end":{"line":64,"column":55}},"28":{"start":{"line":67,"column":8},"end":{"line":69,"column":9}},"29":{"start":{"line":68,"column":10},"end":{"line":68,"column":39}},"30":{"start":{"line":71,"column":8},"end":{"line":73,"column":9}},"31":{"start":{"line":72,"column":10},"end":{"line":72,"column":34}},"32":{"start":{"line":75,"column":8},"end":{"line":77,"column":11}},"33":{"start":{"line":76,"column":10},"end":{"line":76,"column":20}},"34":{"start":{"line":85,"column":6},"end":{"line":85,"column":43}},"35":{"start":{"line":87,"column":6},"end":{"line":89,"column":9}},"36":{"start":{"line":88,"column":8},"end":{"line":88,"column":24}},"37":{"start":{"line":99,"column":6},"end":{"line":102,"column":8}},"38":{"start":{"line":104,"column":6},"end":{"line":118,"column":9}},"39":{"start":{"line":107,"column":8},"end":{"line":107,"column":68}},"40":{"start":{"line":107,"column":61},"end":{"line":107,"column":68}},"41":{"start":{"line":110,"column":8},"end":{"line":112,"column":9}},"42":{"start":{"line":111,"column":10},"end":{"line":111,"column":70}},"43":{"start":{"line":115,"column":8},"end":{"line":117,"column":9}},"44":{"start":{"line":116,"column":10},"end":{"line":116,"column":76}},"45":{"start":{"line":120,"column":6},"end":{"line":122,"column":9}},"46":{"start":{"line":121,"column":8},"end":{"line":121,"column":38}},"47":{"start":{"line":128,"column":6},"end":{"line":128,"column":60}},"48":{"start":{"line":129,"column":6},"end":{"line":138,"column":9}},"49":{"start":{"line":130,"column":8},"end":{"line":130,"column":34}},"50":{"start":{"line":130,"column":17},"end":{"line":130,"column":34}},"51":{"start":{"line":133,"column":8},"end":{"line":135,"column":9}},"52":{"start":{"line":134,"column":10},"end":{"line":134,"column":49}},"53":{"start":{"line":137,"column":8},"end":{"line":137,"column":39}},"54":{"start":{"line":146,"column":6},"end":{"line":146,"column":63}},"55":{"start":{"line":147,"column":6},"end":{"line":156,"column":9}},"56":{"start":{"line":148,"column":8},"end":{"line":148,"column":34}},"57":{"start":{"line":148,"column":17},"end":{"line":148,"column":34}},"58":{"start":{"line":151,"column":8},"end":{"line":153,"column":9}},"59":{"start":{"line":152,"column":10},"end":{"line":152,"column":52}},"60":{"start":{"line":155,"column":8},"end":{"line":155,"column":39}},"61":{"start":{"line":162,"column":4},"end":{"line":167,"column":5}},"62":{"start":{"line":163,"column":6},"end":{"line":165,"column":7}},"63":{"start":{"line":164,"column":8},"end":{"line":164,"column":29}},"64":{"start":{"line":166,"column":6},"end":{"line":166,"column":21}},"65":{"start":{"line":170,"column":4},"end":{"line":170,"column":32}},"66":{"start":{"line":171,"column":4},"end":{"line":171,"column":14}},"67":{"start":{"line":173,"column":4},"end":{"line":175,"column":5}},"68":{"start":{"line":174,"column":6},"end":{"line":174,"column":78}},"69":{"start":{"line":177,"column":4},"end":{"line":179,"column":5}},"70":{"start":{"line":178,"column":6},"end":{"line":178,"column":81}},"71":{"start":{"line":181,"column":4},"end":{"line":189,"column":5}},"72":{"start":{"line":182,"column":6},"end":{"line":182,"column":92}},"73":{"start":{"line":183,"column":6},"end":{"line":183,"column":52}},"74":{"start":{"line":185,"column":6},"end":{"line":187,"column":7}},"75":{"start":{"line":186,"column":8},"end":{"line":186,"column":44}},"76":{"start":{"line":188,"column":6},"end":{"line":188,"column":36}},"77":{"start":{"line":191,"column":4},"end":{"line":197,"column":5}},"78":{"start":{"line":192,"column":6},"end":{"line":192,"column":52}},"79":{"start":{"line":193,"column":6},"end":{"line":195,"column":7}},"80":{"start":{"line":194,"column":8},"end":{"line":194,"column":44}},"81":{"start":{"line":196,"column":6},"end":{"line":196,"column":36}},"82":{"start":{"line":203,"column":4},"end":{"line":203,"column":42}},"83":{"start":{"line":204,"column":4},"end":{"line":206,"column":7}},"84":{"start":{"line":205,"column":6},"end":{"line":205,"column":23}},"85":{"start":{"line":209,"column":4},"end":{"line":211,"column":5}},"86":{"start":{"line":210,"column":6},"end":{"line":210,"column":25}},"87":{"start":{"line":214,"column":4},"end":{"line":214,"column":16}},"88":{"start":{"line":217,"column":2},"end":{"line":219,"column":3}},"89":{"start":{"line":218,"column":4},"end":{"line":218,"column":28}}},"branchMap":{"1":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":2},"end":{"line":30,"column":2}},{"start":{"line":30,"column":2},"end":{"line":30,"column":2}}]},"2":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":2},"end":{"line":35,"column":2}},{"start":{"line":35,"column":2},"end":{"line":35,"column":2}}]},"3":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":7},"end":{"line":39,"column":9}},{"start":{"line":39,"column":13},"end":{"line":39,"column":17}}]},"4":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":8},"end":{"line":57,"column":8}},{"start":{"line":57,"column":8},"end":{"line":57,"column":8}}]},"5":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":12},"end":{"line":57,"column":28}},{"start":{"line":57,"column":32},"end":{"line":57,"column":56}}]},"6":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":8},"end":{"line":67,"column":8}},{"start":{"line":67,"column":8},"end":{"line":67,"column":8}}]},"7":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":8},"end":{"line":71,"column":8}},{"start":{"line":71,"column":8},"end":{"line":71,"column":8}}]},"8":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":8},"end":{"line":107,"column":8}},{"start":{"line":107,"column":8},"end":{"line":107,"column":8}}]},"9":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":8},"end":{"line":110,"column":8}},{"start":{"line":110,"column":8},"end":{"line":110,"column":8}}]},"10":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":8},"end":{"line":115,"column":8}},{"start":{"line":115,"column":8},"end":{"line":115,"column":8}}]},"11":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":8},"end":{"line":130,"column":8}},{"start":{"line":130,"column":8},"end":{"line":130,"column":8}}]},"12":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":8},"end":{"line":148,"column":8}},{"start":{"line":148,"column":8},"end":{"line":148,"column":8}}]},"13":{"line":162,"type":"if","locations":[{"start":{"line":162,"column":4},"end":{"line":162,"column":4}},{"start":{"line":162,"column":4},"end":{"line":162,"column":4}}]},"14":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":6},"end":{"line":163,"column":6}},{"start":{"line":163,"column":6},"end":{"line":163,"column":6}}]},"15":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":4},"end":{"line":173,"column":4}},{"start":{"line":173,"column":4},"end":{"line":173,"column":4}}]},"16":{"line":177,"type":"if","locations":[{"start":{"line":177,"column":4},"end":{"line":177,"column":4}},{"start":{"line":177,"column":4},"end":{"line":177,"column":4}}]},"17":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":4},"end":{"line":181,"column":4}},{"start":{"line":181,"column":4},"end":{"line":181,"column":4}}]},"18":{"line":185,"type":"if","locations":[{"start":{"line":185,"column":6},"end":{"line":185,"column":6}},{"start":{"line":185,"column":6},"end":{"line":185,"column":6}}]},"19":{"line":191,"type":"if","locations":[{"start":{"line":191,"column":4},"end":{"line":191,"column":4}},{"start":{"line":191,"column":4},"end":{"line":191,"column":4}}]},"20":{"line":193,"type":"if","locations":[{"start":{"line":193,"column":6},"end":{"line":193,"column":6}},{"start":{"line":193,"column":6},"end":{"line":193,"column":6}}]},"21":{"line":209,"type":"if","locations":[{"start":{"line":209,"column":4},"end":{"line":209,"column":4}},{"start":{"line":209,"column":4},"end":{"line":209,"column":4}}]},"22":{"line":217,"type":"if","locations":[{"start":{"line":217,"column":2},"end":{"line":217,"column":2}},{"start":{"line":217,"column":2},"end":{"line":217,"column":2}}]}},"code":["var _ = require('lodash');","var async = require('async');","var deep = require('deep-diff');","var updateInstance = require('../associationMethods/update');","var addAssociation = require('../associationMethods/add');","var removeAssociation = require('../associationMethods/remove');","var hop = require('../../../utils/helpers').object.hasOwnProperty;","var defer = require('../../../utils/defer');","var WLError = require('../../../error/WLError');","var noop = function() {};","","/**"," * Model.save()"," *"," * Takes the currently set attributes and updates the database."," * Shorthand for Model.update({ attributes }, cb)"," *"," * @param {Object} context"," * @param {Object} proto"," * @param {Function} callback"," * @param {Object} options"," * @return {Promise}"," * @api public"," */","","module.exports = function(context, proto, options, cb) {","","  var deferred;","","  if (typeof options === 'function') {","    cb = options;","    options = {};","  }","","  if (typeof cb !== 'function') {","    deferred = defer();","  }","","  cb = cb || noop;","","  /**","   * TO-DO:","   * This should all be wrapped in a transaction. That's coming next but for the meantime","   * just hope we don't get in a nasty state where the operation fails!","   */","","  var mutatedModels = [];","","  async.auto({","","    // Compare any populated model values to their current state.","    // If they have been mutated then the values will need to be synced.","    compareModelValues: function(next) {","      var modelKeys = Object.keys(proto.associationsCache);","","      async.each(modelKeys, function(key, nextKey) {","        if (!hop(proto, key) || proto[key] === undefined) {","          return async.setImmediate(function() {","            nextKey();","          });","        }","","        var currentVal = proto[key];","        var previousVal = proto.associationsCache[key];","","        // Normalize previousVal to an object","        if (Array.isArray(previousVal)) {","          previousVal = previousVal[0];","        }","","        if (deep(currentVal, previousVal)) {","          mutatedModels.push(key);","        }","","        return async.setImmediate(function() {","          nextKey();","        });","      }, next);","    },","","    // Update The Current Record","    updateRecord: ['compareModelValues', function(next) {","","      // Shallow clone proto.toObject() to remove all the functions","      var data = _.clone(proto.toObject());","","      new updateInstance(context, data, mutatedModels, function(err, data) {","        next(err, data);","      });","    }],","","","    // Build a set of associations to add and remove.","    // These are populated from using model[associationKey].add() and","    // model[associationKey].remove().","    buildAssociationOperations: ['compareModelValues', function(next) {","","      // Build a dictionary to hold operations based on association key","      var operations = {","        addKeys: {},","        removeKeys: {}","      };","","      Object.keys(proto.associations).forEach(function(key) {","","        // Ignore belongsTo associations","        if (proto.associations[key].hasOwnProperty('model')) return;","","        // Grab what records need adding","        if (proto.associations[key].addModels.length > 0) {","          operations.addKeys[key] = proto.associations[key].addModels;","        }","","        // Grab what records need removing","        if (proto.associations[key].removeModels.length > 0) {","          operations.removeKeys[key] = proto.associations[key].removeModels;","        }","      });","","      return async.setImmediate(function() {","        return next(null, operations);","      });","","    }],","","    // Create new associations for each association key","    addAssociations: ['buildAssociationOperations', 'updateRecord', function(next, results) {","      var keys = results.buildAssociationOperations.addKeys;","      return new addAssociation(context, proto, keys, function(err, failedTransactions) {","        if (err) return next(err);","","        // reset addKeys","        for (var key in results.buildAssociationOperations.addKeys) {","          proto.associations[key].addModels = [];","        }","","        next(null, failedTransactions);","      });","    }],","","    // Remove associations for each association key","    // Run after the addAssociations so that the connection pools don't get exhausted.","    // Once transactions are ready we can remove this restriction as they will be run on the same","    // connection.","    removeAssociations: ['buildAssociationOperations', 'addAssociations', function(next, results) {","      var keys = results.buildAssociationOperations.removeKeys;","      return new removeAssociation(context, proto, keys, function(err, failedTransactions) {","        if (err) return next(err);","","        // reset removeKeys","        for (var key in results.buildAssociationOperations.removeKeys) {","          proto.associations[key].removeModels = [];","        }","","        next(null, failedTransactions);","      });","    }]","","  },","","  function(err, results) {","    if (err) {","      if (deferred) {","        deferred.reject(err);","      }","      return cb(err);","    }","","    // Collect all failed transactions if any","    var failedTransactions = [];","    var error;","","    if (results.addAssociations) {","      failedTransactions = failedTransactions.concat(results.addAssociations);","    }","","    if (results.removeAssociations) {","      failedTransactions = failedTransactions.concat(results.removeAssociations);","    }","","    if (failedTransactions.length > 0) {","      error = new Error('Some associations could not be added or destroyed during save().');","      error.failedTransactions = failedTransactions;","","      if (deferred) {","        deferred.reject(new WLError(error));","      }","      return cb(new WLError(error));","    }","","    if (!results.updateRecord.length) {","      error = new Error('Error updating a record.');","      if (deferred) {","        deferred.reject(new WLError(error));","      }","      return cb(new WLError(error));","    }","","    // Reset the model attribute values with the new values.","    // This is needed because you could have a lifecycle callback that has","    // changed the data since last time you accessed it.","    // Attach attributes to the model instance","    var newData = results.updateRecord[0];","    _.each(newData, function(val, key) {","      proto[key] = val;","    });","","    // If a promise, resolve it","    if (deferred) {","      deferred.resolve();","    }","","    // Return the callback","    return cb();","  });","","  if (deferred) {","    return deferred.promise;","  }","};",""],"l":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"26":1,"28":0,"30":0,"31":0,"32":0,"35":0,"36":0,"39":0,"47":0,"49":0,"54":0,"56":0,"57":0,"58":0,"59":0,"63":0,"64":0,"67":0,"68":0,"71":0,"72":0,"75":0,"76":0,"85":0,"87":0,"88":0,"99":0,"104":0,"107":0,"110":0,"111":0,"115":0,"116":0,"120":0,"121":0,"128":0,"129":0,"130":0,"133":0,"134":0,"137":0,"146":0,"147":0,"148":0,"151":0,"152":0,"155":0,"162":0,"163":0,"164":0,"166":0,"170":0,"171":0,"173":0,"174":0,"177":0,"178":0,"181":0,"182":0,"183":0,"185":0,"186":0,"188":0,"191":0,"192":0,"193":0,"194":0,"196":0,"203":0,"204":0,"205":0,"209":0,"210":0,"214":0,"217":0,"218":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/model/lib/associationMethods/update.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/model/lib/associationMethods/update.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":1,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":30},"end":{"line":22,"column":77}}},"2":{"name":"(anonymous_2)","line":49,"loc":{"start":{"line":49,"column":15},"end":{"line":49,"column":29}}},"3":{"name":"(anonymous_3)","line":86,"loc":{"start":{"line":86,"column":34},"end":{"line":86,"column":63}}}},"statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":6,"column":26}},"2":{"start":{"line":7,"column":0},"end":{"line":7,"column":46}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":66}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":38}},"5":{"start":{"line":22,"column":0},"end":{"line":75,"column":2}},"6":{"start":{"line":24,"column":2},"end":{"line":24,"column":79}},"7":{"start":{"line":25,"column":2},"end":{"line":25,"column":79}},"8":{"start":{"line":26,"column":2},"end":{"line":26,"column":59}},"9":{"start":{"line":28,"column":2},"end":{"line":31,"column":3}},"10":{"start":{"line":29,"column":4},"end":{"line":30,"column":79}},"11":{"start":{"line":33,"column":2},"end":{"line":36,"column":3}},"12":{"start":{"line":34,"column":4},"end":{"line":35,"column":73}},"13":{"start":{"line":39,"column":2},"end":{"line":39,"column":20}},"14":{"start":{"line":40,"column":2},"end":{"line":40,"column":44}},"15":{"start":{"line":43,"column":2},"end":{"line":43,"column":36}},"16":{"start":{"line":48,"column":2},"end":{"line":48,"column":29}},"17":{"start":{"line":49,"column":2},"end":{"line":71,"column":5}},"18":{"start":{"line":54,"column":4},"end":{"line":58,"column":5}},"19":{"start":{"line":56,"column":6},"end":{"line":56,"column":26}},"20":{"start":{"line":57,"column":6},"end":{"line":57,"column":13}},"21":{"start":{"line":61,"column":4},"end":{"line":61,"column":50}},"22":{"start":{"line":61,"column":43},"end":{"line":61,"column":50}},"23":{"start":{"line":64,"column":4},"end":{"line":64,"column":18}},"24":{"start":{"line":65,"column":4},"end":{"line":65,"column":29}},"25":{"start":{"line":68,"column":4},"end":{"line":68,"column":24}},"26":{"start":{"line":69,"column":4},"end":{"line":69,"column":127}},"27":{"start":{"line":70,"column":4},"end":{"line":70,"column":40}},"28":{"start":{"line":74,"column":2},"end":{"line":74,"column":43}},"29":{"start":{"line":86,"column":0},"end":{"line":100,"column":2}},"30":{"start":{"line":87,"column":2},"end":{"line":87,"column":24}},"31":{"start":{"line":89,"column":2},"end":{"line":94,"column":3}},"32":{"start":{"line":90,"column":4},"end":{"line":93,"column":5}},"33":{"start":{"line":91,"column":6},"end":{"line":91,"column":29}},"34":{"start":{"line":92,"column":6},"end":{"line":92,"column":12}},"35":{"start":{"line":97,"column":2},"end":{"line":97,"column":58}},"36":{"start":{"line":97,"column":40},"end":{"line":97,"column":58}},"37":{"start":{"line":99,"column":2},"end":{"line":99,"column":20}}},"branchMap":{"1":{"line":24,"type":"cond-expr","locations":[{"start":{"line":24,"column":54},"end":{"line":24,"column":70}},{"start":{"line":24,"column":73},"end":{"line":24,"column":78}}]},"2":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":2},"end":{"line":28,"column":2}},{"start":{"line":28,"column":2},"end":{"line":28,"column":2}}]},"3":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":2},"end":{"line":33,"column":2}},{"start":{"line":33,"column":2},"end":{"line":33,"column":2}}]},"4":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":4},"end":{"line":54,"column":4}},{"start":{"line":54,"column":4},"end":{"line":54,"column":4}}]},"5":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":8},"end":{"line":54,"column":23}},{"start":{"line":54,"column":27},"end":{"line":54,"column":61}},{"start":{"line":54,"column":65},"end":{"line":54,"column":91}}]},"6":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":4},"end":{"line":61,"column":4}},{"start":{"line":61,"column":4},"end":{"line":61,"column":4}}]},"7":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":4},"end":{"line":90,"column":4}},{"start":{"line":90,"column":4},"end":{"line":90,"column":4}}]},"8":{"line":90,"type":"binary-expr","locations":[{"start":{"line":90,"column":8},"end":{"line":90,"column":48}},{"start":{"line":90,"column":52},"end":{"line":90,"column":84}}]},"9":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":2},"end":{"line":97,"column":2}},{"start":{"line":97,"column":2},"end":{"line":97,"column":2}}]},"10":{"line":97,"type":"binary-expr","locations":[{"start":{"line":97,"column":6},"end":{"line":97,"column":17}},{"start":{"line":97,"column":21},"end":{"line":97,"column":38}}]}},"code":["","/**"," * Module dependencies"," */","","var _ = require('lodash');","var utils = require('../../../utils/helpers');","var nestedOperations = require('../../../utils/nestedOperations');","var hop = utils.object.hasOwnProperty;","","/**"," * Update the current instance with the currently set values"," *"," * Called in the model instance context."," *"," * @param {Object} collection"," * @param {Object} proto"," * @param {Array} mutatedModels"," * @param {Function} callback"," */","","var Update = module.exports = function(collection, proto, mutatedModels, cb) {","","  var values = typeof proto.toObject === 'function' ? proto.toObject() : proto;","  var attributes = collection.waterline.schema[collection.identity].attributes;","  var primaryKey = this.findPrimaryKey(attributes, values);","","  if (!primaryKey) {","    return cb(new Error('No Primary Key set to update the record with! ' +","      'Try setting an attribute as a primary key or include an ID property.'));","  }","","  if (!values[primaryKey]) {","    return cb(new Error('No Primary Key set to update the record with! ' +","      'Primary Key must have a value, it can\\'t be an optional value.'));","  }","","  // Build Search Criteria","  var criteria = {};","  criteria[primaryKey] = values[primaryKey];","","  // Clone values so they can be mutated","  var _values = _.cloneDeep(values);","","  // For any nested model associations (objects not collection arrays) that were not changed,","  // lets set the value to just the foreign key so that an update query is not performed on the","  // associatied model.","  var keys = _.keys(_values);","  keys.forEach(function(key) {","","    // Nix any collection attributes so that they do not get sync'd during the update process.","    // One reason for this is that the result set is not guaranteed to be complete,","    // so the sync could exclude items.","    if (attributes[key] && hop(attributes[key], 'collection') && attributes[key].collection) {","","      delete _values[key];","      return;","    }","","    // If the key was changed, keep it expanded","    if (mutatedModels.indexOf(key) !== -1) return;","","    // Reduce it down to a foreign key value","    var vals = {};","    vals[key] = _values[key];","","    // Delete and replace the value with a reduced version","    delete _values[key];","    var reduced = nestedOperations.reduceAssociations.call(collection, collection.identity, collection.waterline.schema, vals);","    _values = _.merge(_values, reduced);","  });","","  // Update the collection with the new values","  collection.update(criteria, _values, cb);","};","","","/**"," * Find Primary Key"," *"," * @param {Object} attributes"," * @param {Object} values"," * @api private"," */","","Update.prototype.findPrimaryKey = function(attributes, values) {","  var primaryKey = null;","","  for (var attribute in attributes) {","    if (hop(attributes[attribute], 'primaryKey') && attributes[attribute].primaryKey) {","      primaryKey = attribute;","      break;","    }","  }","","  // If no primary key check for an ID property","  if (!primaryKey && hop(values, 'id')) primaryKey = 'id';","","  return primaryKey;","};",""],"l":{"6":1,"7":1,"8":1,"9":1,"22":1,"24":0,"25":0,"26":0,"28":0,"29":0,"33":0,"34":0,"39":0,"40":0,"43":0,"48":0,"49":0,"54":0,"56":0,"57":0,"61":0,"64":0,"65":0,"68":0,"69":0,"70":0,"74":0,"86":1,"87":0,"89":0,"90":0,"91":0,"92":0,"97":0,"99":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/nestedOperations/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/nestedOperations/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":10,"column":2}}},"branchMap":{},"code":["/**"," * Handlers for parsing nested associations within create/update values."," */","","module.exports = {","  reduceAssociations: require('./reduceAssociations'),","  valuesParser: require('./valuesParser'),","  create: require('./create'),","  update: require('./update')","};",""],"l":{"5":1}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/nestedOperations/reduceAssociations.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/nestedOperations/reduceAssociations.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0,0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":17},"end":{"line":22,"column":57}}},"2":{"name":"(anonymous_2)","line":25,"loc":{"start":{"line":25,"column":30},"end":{"line":25,"column":44}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":54}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":26}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":31}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":27}},"5":{"start":{"line":22,"column":0},"end":{"line":67,"column":2}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":18}},"7":{"start":{"line":25,"column":2},"end":{"line":64,"column":5}},"8":{"start":{"line":28,"column":4},"end":{"line":28,"column":50}},"9":{"start":{"line":31,"column":4},"end":{"line":37,"column":5}},"10":{"start":{"line":32,"column":6},"end":{"line":36,"column":7}},"11":{"start":{"line":33,"column":8},"end":{"line":33,"column":45}},"12":{"start":{"line":35,"column":8},"end":{"line":35,"column":15}},"13":{"start":{"line":39,"column":4},"end":{"line":39,"column":37}},"14":{"start":{"line":39,"column":30},"end":{"line":39,"column":37}},"15":{"start":{"line":44,"column":4},"end":{"line":44,"column":46}},"16":{"start":{"line":44,"column":39},"end":{"line":44,"column":46}},"17":{"start":{"line":46,"column":4},"end":{"line":46,"column":48}},"18":{"start":{"line":46,"column":41},"end":{"line":46,"column":48}},"19":{"start":{"line":50,"column":4},"end":{"line":50,"column":67}},"20":{"start":{"line":51,"column":4},"end":{"line":51,"column":69}},"21":{"start":{"line":56,"column":4},"end":{"line":58,"column":5}},"22":{"start":{"line":57,"column":6},"end":{"line":57,"column":13}},"23":{"start":{"line":61,"column":4},"end":{"line":61,"column":39}},"24":{"start":{"line":62,"column":4},"end":{"line":62,"column":21}},"25":{"start":{"line":66,"column":2},"end":{"line":66,"column":16}}},"branchMap":{"1":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":4},"end":{"line":31,"column":4}},{"start":{"line":31,"column":4},"end":{"line":31,"column":4}}]},"2":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":6},"end":{"line":32,"column":6}},{"start":{"line":32,"column":6},"end":{"line":32,"column":6}}]},"3":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":10},"end":{"line":32,"column":33}},{"start":{"line":32,"column":37},"end":{"line":32,"column":64}},{"start":{"line":32,"column":68},"end":{"line":32,"column":88}},{"start":{"line":32,"column":92},"end":{"line":32,"column":134}}]},"4":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":4},"end":{"line":39,"column":4}},{"start":{"line":39,"column":4},"end":{"line":39,"column":4}}]},"5":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]},"6":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":4},"end":{"line":46,"column":4}},{"start":{"line":46,"column":4},"end":{"line":46,"column":4}}]},"7":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":4},"end":{"line":56,"column":4}},{"start":{"line":56,"column":4},"end":{"line":56,"column":4}}]},"8":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":8},"end":{"line":56,"column":32}},{"start":{"line":56,"column":36},"end":{"line":56,"column":51}},{"start":{"line":56,"column":55},"end":{"line":56,"column":61}},{"start":{"line":56,"column":66},"end":{"line":56,"column":84}},{"start":{"line":56,"column":88},"end":{"line":56,"column":106}}]}},"code":["/**"," * Module Dependencies"," */","","var hop = require('../helpers').object.hasOwnProperty;","var _ = require('lodash');","var assert = require('assert');","var util = require('util');","","/**"," * Traverse an object representing values replace associated objects with their"," * foreign keys."," *"," * @param {String} model"," * @param {Object} schema"," * @param {Object} values"," * @return {Object}"," * @api private"," */","","","module.exports = function(model, schema, values, method) {","  var self = this;","","  Object.keys(values).forEach(function(key) {","","    // Check to see if this key is a foreign key","    var attribute = schema[model].attributes[key];","","    // If not a plainObject, check if this is a model instance and has a toObject method","    if (!_.isPlainObject(values[key])) {","      if (_.isObject(values[key]) && !Array.isArray(values[key]) && values[key].toObject && typeof values[key].toObject === 'function') {","        values[key] = values[key].toObject();","      } else {","        return;","      }","    }","    // Check that this user-specified value is not NULL","    if (values[key] === null) return;","","    // Check that this user-specified value actually exists","    // as an attribute in `model`'s schema.","    // If it doesn't- just ignore it","    if (typeof attribute !== 'object') return;","","    if (!hop(values[key], attribute.on)) return;","","    // Look and see if the related model has a custom primary key AND that","    // the intended method is \"create\"","    var related = self.waterline.collections[attribute.references];","    var relatedPK = _.find(related.attributes, { primaryKey: true });","","    // If a custom PK was used and it's not autoIncrementing and the record","    // is being created then go ahead and don't reduce it. This allows nested","    // creates to work when custom PK's are used.","    if (!relatedPK.autoIncrement && !related.autoPK && method && (method == 'create' || method == 'update')) {","      return;","    }","","    // Otherwise reduce the association like normal","    var fk = values[key][attribute.on];","    values[key] = fk;","","  });","","  return values;","};",""],"l":{"5":1,"6":1,"7":1,"8":1,"22":1,"23":0,"25":0,"28":0,"31":0,"32":0,"33":0,"35":0,"39":0,"44":0,"46":0,"50":0,"51":0,"56":0,"57":0,"61":0,"62":0,"66":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/nestedOperations/valuesParser.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/nestedOperations/valuesParser.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":17},"end":{"line":18,"column":49}}},"2":{"name":"(anonymous_2)","line":27,"loc":{"start":{"line":27,"column":30},"end":{"line":27,"column":44}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":65}},"2":{"start":{"line":18,"column":0},"end":{"line":45,"column":2}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":18}},"4":{"start":{"line":22,"column":2},"end":{"line":25,"column":4}},"5":{"start":{"line":27,"column":2},"end":{"line":42,"column":5}},"6":{"start":{"line":30,"column":4},"end":{"line":30,"column":37}},"7":{"start":{"line":30,"column":30},"end":{"line":30,"column":37}},"8":{"start":{"line":33,"column":4},"end":{"line":33,"column":63}},"9":{"start":{"line":33,"column":56},"end":{"line":33,"column":63}},"10":{"start":{"line":34,"column":4},"end":{"line":34,"column":63}},"11":{"start":{"line":34,"column":56},"end":{"line":34,"column":63}},"12":{"start":{"line":36,"column":4},"end":{"line":36,"column":50}},"13":{"start":{"line":37,"column":4},"end":{"line":37,"column":101}},"14":{"start":{"line":37,"column":94},"end":{"line":37,"column":101}},"15":{"start":{"line":39,"column":4},"end":{"line":39,"column":84}},"16":{"start":{"line":39,"column":49},"end":{"line":39,"column":84}},"17":{"start":{"line":40,"column":4},"end":{"line":40,"column":79}},"18":{"start":{"line":40,"column":49},"end":{"line":40,"column":79}},"19":{"start":{"line":44,"column":2},"end":{"line":44,"column":22}}},"branchMap":{"1":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":30,"column":4}},{"start":{"line":30,"column":4},"end":{"line":30,"column":4}}]},"2":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":4},"end":{"line":33,"column":4}},{"start":{"line":33,"column":4},"end":{"line":33,"column":4}}]},"3":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":4},"end":{"line":34,"column":4}},{"start":{"line":34,"column":4},"end":{"line":34,"column":4}}]},"4":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":4},"end":{"line":37,"column":4}},{"start":{"line":37,"column":4},"end":{"line":37,"column":4}}]},"5":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":8},"end":{"line":37,"column":48}},{"start":{"line":37,"column":52},"end":{"line":37,"column":92}}]},"6":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":4},"end":{"line":39,"column":4}},{"start":{"line":39,"column":4},"end":{"line":39,"column":4}}]},"7":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":4},"end":{"line":40,"column":4}},{"start":{"line":40,"column":4},"end":{"line":40,"column":4}}]}},"code":["/**"," * Module Dependencies"," */","","var hasOwnProperty = require('../helpers').object.hasOwnProperty;","","/**"," * Traverse an object representing values and map out any associations."," *"," * @param {String} model"," * @param {Object} schema"," * @param {Object} values"," * @return {Object}"," * @api private"," */","","","module.exports = function(model, schema, values) {","  var self = this;","","  // Pick out the top level associations","  var associations = {","    collections: [],","    models: []","  };","","  Object.keys(values).forEach(function(key) {","","    // Ignore values equal to null","    if (values[key] === null) return;","","    // Ignore joinTables","    if (hasOwnProperty(schema[model], 'junctionTable')) return;","    if (!hasOwnProperty(schema[model].attributes, key)) return;","","    var attribute = schema[model].attributes[key];","    if (!hasOwnProperty(attribute, 'collection') && !hasOwnProperty(attribute, 'foreignKey')) return;","","    if (hasOwnProperty(attribute, 'collection')) associations.collections.push(key);","    if (hasOwnProperty(attribute, 'foreignKey')) associations.models.push(key);","","  });","","  return associations;","};",""],"l":{"5":1,"18":1,"19":0,"22":0,"27":0,"30":0,"33":0,"34":0,"36":0,"37":0,"39":0,"40":0,"44":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/nestedOperations/create.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/nestedOperations/create.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":19,"loc":{"start":{"line":19,"column":17},"end":{"line":19,"column":65}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":23},"end":{"line":23,"column":45}}},"3":{"name":"(anonymous_3)","line":43,"loc":{"start":{"line":43,"column":22},"end":{"line":43,"column":36}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":65}},"3":{"start":{"line":19,"column":0},"end":{"line":62,"column":2}},"4":{"start":{"line":20,"column":2},"end":{"line":20,"column":18}},"5":{"start":{"line":23,"column":2},"end":{"line":58,"column":5}},"6":{"start":{"line":24,"column":4},"end":{"line":24,"column":81}},"7":{"start":{"line":25,"column":4},"end":{"line":25,"column":18}},"8":{"start":{"line":27,"column":4},"end":{"line":27,"column":82}},"9":{"start":{"line":27,"column":49},"end":{"line":27,"column":82}},"10":{"start":{"line":29,"column":4},"end":{"line":29,"column":27}},"11":{"start":{"line":29,"column":20},"end":{"line":29,"column":27}},"12":{"start":{"line":32,"column":4},"end":{"line":32,"column":56}},"13":{"start":{"line":33,"column":4},"end":{"line":33,"column":69}},"14":{"start":{"line":36,"column":4},"end":{"line":36,"column":62}},"15":{"start":{"line":38,"column":4},"end":{"line":38,"column":40}},"16":{"start":{"line":39,"column":4},"end":{"line":39,"column":27}},"17":{"start":{"line":39,"column":20},"end":{"line":39,"column":27}},"18":{"start":{"line":40,"column":4},"end":{"line":42,"column":5}},"19":{"start":{"line":41,"column":6},"end":{"line":41,"column":77}},"20":{"start":{"line":43,"column":4},"end":{"line":57,"column":7}},"21":{"start":{"line":46,"column":6},"end":{"line":46,"column":74}},"22":{"start":{"line":46,"column":33},"end":{"line":46,"column":74}},"23":{"start":{"line":52,"column":6},"end":{"line":56,"column":7}},"24":{"start":{"line":53,"column":8},"end":{"line":53,"column":53}},"25":{"start":{"line":55,"column":8},"end":{"line":55,"column":42}},"26":{"start":{"line":61,"column":2},"end":{"line":61,"column":23}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]},"2":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]},"3":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":4},"end":{"line":39,"column":4}},{"start":{"line":39,"column":4},"end":{"line":39,"column":4}}]},"4":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":4},"end":{"line":40,"column":4}},{"start":{"line":40,"column":4},"end":{"line":40,"column":4}}]},"5":{"line":41,"type":"cond-expr","locations":[{"start":{"line":41,"column":42},"end":{"line":41,"column":62}},{"start":{"line":41,"column":65},"end":{"line":41,"column":76}}]},"6":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":6},"end":{"line":46,"column":6}},{"start":{"line":46,"column":6},"end":{"line":46,"column":6}}]},"7":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":6},"end":{"line":52,"column":6}},{"start":{"line":52,"column":6},"end":{"line":52,"column":6}}]},"8":{"line":52,"type":"binary-expr","locations":[{"start":{"line":52,"column":10},"end":{"line":52,"column":33}},{"start":{"line":52,"column":37},"end":{"line":52,"column":51}},{"start":{"line":52,"column":55},"end":{"line":52,"column":78}}]}},"code":["/**"," * Module Dependencies"," */","","var _ = require('lodash');","var hasOwnProperty = require('../helpers').object.hasOwnProperty;","","/**"," * Queue up .add() operations on a model instance for any nested association"," * values in a .create() query."," *"," * @param {Object} parentModel"," * @param {Object} values"," * @param {Object} associations"," * @param {Function} cb"," * @api private"," */","","module.exports = function(parentModel, values, associations, cb) {","  var self = this;","","  // For each association, grab the primary key value and normalize into model.add methods","  associations.forEach(function(association) {","    var attribute = self.waterline.schema[self.identity].attributes[association];","    var modelName;","","    if (hasOwnProperty(attribute, 'collection')) modelName = attribute.collection;","","    if (!modelName) return;","","    // Grab the relation's PK","    var related = self.waterline.collections[modelName];","    var relatedPK = _.find(related.attributes, { primaryKey: true });","","    // Get the attribute's name","    var pk = self.waterline.collections[modelName].primaryKey;","","    var optValues = values[association];","    if (!optValues) return;","    if (!_.isArray(optValues)) {","      optValues = _.isString(optValues) ? optValues.split(',') : [optValues];","    }","    optValues.forEach(function(val) {","","      // If value is not an object, queue up an add","      if (!_.isPlainObject(val)) return parentModel[association].add(val);","","      // If value is an object, check if a primary key is defined","      // If a custom PK was used and it's not autoIncrementing and the record","      // is being created then go ahead and don't reduce it. This allows nested","      // creates to work when custom PK's are used.","      if (relatedPK.autoIncrement && related.autoPK && hasOwnProperty(val, pk)) {","        return parentModel[association].add(val[pk]);","      } else {","        parentModel[association].add(val);","      }","    });","  });","","  // Save the parent model","  parentModel.save(cb);","};",""],"l":{"5":1,"6":1,"19":1,"20":0,"23":0,"24":0,"25":0,"27":0,"29":0,"32":0,"33":0,"36":0,"38":0,"39":0,"40":0,"41":0,"43":0,"46":0,"52":0,"53":0,"55":0,"61":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/nestedOperations/update.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/nestedOperations/update.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":1,"59":0,"60":0,"61":0,"62":0,"63":0,"64":1,"65":0,"66":1,"67":0,"68":1,"69":0,"70":0,"71":0,"72":1,"73":0,"74":1,"75":0,"76":0,"77":0,"78":1,"79":0,"80":1,"81":0,"82":0,"83":0,"84":0,"85":0,"86":1,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":1,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":1,"117":0,"118":1,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":1,"127":0,"128":1,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":1,"139":0,"140":1,"141":0,"142":0,"143":0,"144":0,"145":1,"146":0,"147":0,"148":0,"149":1,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0},"fnMap":{"1":{"name":"(anonymous_1)","line":21,"loc":{"start":{"line":21,"column":17},"end":{"line":21,"column":61}}},"2":{"name":"buildOperations","line":47,"loc":{"start":{"line":47,"column":0},"end":{"line":47,"column":56}}},"3":{"name":"(anonymous_3)","line":53,"loc":{"start":{"line":53,"column":23},"end":{"line":53,"column":45}}},"4":{"name":"queueOperations","line":87,"loc":{"start":{"line":87,"column":0},"end":{"line":87,"column":66}}},"5":{"name":"(anonymous_5)","line":108,"loc":{"start":{"line":108,"column":20},"end":{"line":108,"column":37}}},"6":{"name":"(anonymous_6)","line":109,"loc":{"start":{"line":109,"column":21},"end":{"line":109,"column":35}}},"7":{"name":"(anonymous_7)","line":119,"loc":{"start":{"line":119,"column":17},"end":{"line":119,"column":31}}},"8":{"name":"(anonymous_8)","line":153,"loc":{"start":{"line":153,"column":20},"end":{"line":153,"column":37}}},"9":{"name":"sync","line":173,"loc":{"start":{"line":173,"column":0},"end":{"line":173,"column":39}}},"10":{"name":"(anonymous_10)","line":179,"loc":{"start":{"line":179,"column":12},"end":{"line":179,"column":27}}},"11":{"name":"(anonymous_11)","line":184,"loc":{"start":{"line":184,"column":23},"end":{"line":184,"column":38}}},"12":{"name":"(anonymous_12)","line":190,"loc":{"start":{"line":190,"column":21},"end":{"line":190,"column":36}}},"13":{"name":"updateRunner","line":213,"loc":{"start":{"line":213,"column":0},"end":{"line":213,"column":47}}},"14":{"name":"associationLoop","line":219,"loc":{"start":{"line":219,"column":2},"end":{"line":219,"column":46}}},"15":{"name":"update","line":223,"loc":{"start":{"line":223,"column":2},"end":{"line":223,"column":35}}},"16":{"name":"unlinkRunner","line":247,"loc":{"start":{"line":247,"column":0},"end":{"line":247,"column":47}}},"17":{"name":"unlinkParentAssociations","line":252,"loc":{"start":{"line":252,"column":2},"end":{"line":252,"column":50}}},"18":{"name":"linkRunner","line":272,"loc":{"start":{"line":272,"column":0},"end":{"line":272,"column":45}}},"19":{"name":"linkChildRecords","line":276,"loc":{"start":{"line":276,"column":2},"end":{"line":276,"column":42}}},"20":{"name":"(anonymous_20)","line":287,"loc":{"start":{"line":287,"column":57},"end":{"line":287,"column":71}}},"21":{"name":"updateParentRecord","line":317,"loc":{"start":{"line":317,"column":2},"end":{"line":317,"column":44}}},"22":{"name":"(anonymous_22)","line":325,"loc":{"start":{"line":325,"column":41},"end":{"line":325,"column":55}}},"23":{"name":"buildParentRemoveOperations","line":353,"loc":{"start":{"line":353,"column":0},"end":{"line":353,"column":57}}},"24":{"name":"(anonymous_24)","line":362,"loc":{"start":{"line":362,"column":34},"end":{"line":362,"column":56}}},"25":{"name":"removeOperationRunner","line":437,"loc":{"start":{"line":437,"column":0},"end":{"line":437,"column":47}}},"26":{"name":"runner","line":441,"loc":{"start":{"line":441,"column":2},"end":{"line":441,"column":35}}},"27":{"name":"buildParentLinkOperations","line":477,"loc":{"start":{"line":477,"column":0},"end":{"line":477,"column":55}}},"28":{"name":"determineOperation","line":483,"loc":{"start":{"line":483,"column":2},"end":{"line":483,"column":48}}},"29":{"name":"(anonymous_29)","line":497,"loc":{"start":{"line":497,"column":34},"end":{"line":497,"column":56}}},"30":{"name":"(anonymous_30)","line":498,"loc":{"start":{"line":498,"column":40},"end":{"line":498,"column":54}}},"31":{"name":"createNewRecords","line":519,"loc":{"start":{"line":519,"column":0},"end":{"line":519,"column":55}}},"32":{"name":"mapAssociations","line":525,"loc":{"start":{"line":525,"column":2},"end":{"line":525,"column":46}}},"33":{"name":"createRunner","line":534,"loc":{"start":{"line":534,"column":4},"end":{"line":534,"column":46}}},"34":{"name":"createRecord","line":544,"loc":{"start":{"line":544,"column":2},"end":{"line":544,"column":59}}},"35":{"name":"(anonymous_35)","line":547,"loc":{"start":{"line":547,"column":29},"end":{"line":547,"column":48}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":29}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":54}},"4":{"start":{"line":21,"column":0},"end":{"line":36,"column":2}},"5":{"start":{"line":23,"column":2},"end":{"line":23,"column":18}},"6":{"start":{"line":26,"column":2},"end":{"line":26,"column":70}},"7":{"start":{"line":29,"column":2},"end":{"line":29,"column":77}},"8":{"start":{"line":34,"column":2},"end":{"line":34,"column":43}},"9":{"start":{"line":47,"column":0},"end":{"line":74,"column":1}},"10":{"start":{"line":49,"column":2},"end":{"line":49,"column":18}},"11":{"start":{"line":50,"column":2},"end":{"line":50,"column":22}},"12":{"start":{"line":53,"column":2},"end":{"line":71,"column":5}},"13":{"start":{"line":55,"column":4},"end":{"line":55,"column":40}},"14":{"start":{"line":59,"column":4},"end":{"line":59,"column":35}},"15":{"start":{"line":59,"column":28},"end":{"line":59,"column":35}},"16":{"start":{"line":63,"column":4},"end":{"line":66,"column":6}},"17":{"start":{"line":69,"column":4},"end":{"line":69,"column":59}},"18":{"start":{"line":69,"column":35},"end":{"line":69,"column":59}},"19":{"start":{"line":70,"column":4},"end":{"line":70,"column":89}},"20":{"start":{"line":73,"column":2},"end":{"line":73,"column":20}},"21":{"start":{"line":87,"column":0},"end":{"line":158,"column":1}},"22":{"start":{"line":89,"column":2},"end":{"line":89,"column":18}},"23":{"start":{"line":90,"column":2},"end":{"line":90,"column":79}},"24":{"start":{"line":91,"column":2},"end":{"line":91,"column":16}},"25":{"start":{"line":93,"column":2},"end":{"line":93,"column":69}},"26":{"start":{"line":93,"column":36},"end":{"line":93,"column":69}},"27":{"start":{"line":94,"column":2},"end":{"line":94,"column":69}},"28":{"start":{"line":94,"column":36},"end":{"line":94,"column":69}},"29":{"start":{"line":95,"column":2},"end":{"line":95,"column":25}},"30":{"start":{"line":95,"column":18},"end":{"line":95,"column":25}},"31":{"start":{"line":97,"column":2},"end":{"line":97,"column":57}},"32":{"start":{"line":100,"column":2},"end":{"line":100,"column":70}},"33":{"start":{"line":101,"column":2},"end":{"line":101,"column":44}},"34":{"start":{"line":105,"column":2},"end":{"line":117,"column":3}},"35":{"start":{"line":108,"column":4},"end":{"line":114,"column":7}},"36":{"start":{"line":109,"column":6},"end":{"line":113,"column":9}},"37":{"start":{"line":110,"column":8},"end":{"line":110,"column":46}},"38":{"start":{"line":110,"column":39},"end":{"line":110,"column":46}},"39":{"start":{"line":111,"column":8},"end":{"line":111,"column":66}},"40":{"start":{"line":111,"column":59},"end":{"line":111,"column":66}},"41":{"start":{"line":112,"column":8},"end":{"line":112,"column":37}},"42":{"start":{"line":116,"column":4},"end":{"line":116,"column":11}},"43":{"start":{"line":119,"column":2},"end":{"line":157,"column":5}},"44":{"start":{"line":128,"column":4},"end":{"line":131,"column":5}},"45":{"start":{"line":129,"column":6},"end":{"line":129,"column":30}},"46":{"start":{"line":130,"column":6},"end":{"line":130,"column":13}},"47":{"start":{"line":134,"column":4},"end":{"line":137,"column":5}},"48":{"start":{"line":135,"column":6},"end":{"line":135,"column":30}},"49":{"start":{"line":136,"column":6},"end":{"line":136,"column":13}},"50":{"start":{"line":140,"column":4},"end":{"line":140,"column":22}},"51":{"start":{"line":141,"column":4},"end":{"line":141,"column":49}},"52":{"start":{"line":144,"column":4},"end":{"line":144,"column":81}},"53":{"start":{"line":147,"column":4},"end":{"line":150,"column":5}},"54":{"start":{"line":148,"column":6},"end":{"line":148,"column":45}},"55":{"start":{"line":149,"column":6},"end":{"line":149,"column":13}},"56":{"start":{"line":153,"column":4},"end":{"line":155,"column":7}},"57":{"start":{"line":154,"column":6},"end":{"line":154,"column":47}},"58":{"start":{"line":173,"column":0},"end":{"line":195,"column":1}},"59":{"start":{"line":174,"column":2},"end":{"line":174,"column":18}},"60":{"start":{"line":176,"column":2},"end":{"line":194,"column":9}},"61":{"start":{"line":180,"column":6},"end":{"line":180,"column":57}},"62":{"start":{"line":185,"column":6},"end":{"line":185,"column":57}},"63":{"start":{"line":191,"column":6},"end":{"line":191,"column":55}},"64":{"start":{"line":213,"column":0},"end":{"line":233,"column":1}},"65":{"start":{"line":215,"column":2},"end":{"line":215,"column":18}},"66":{"start":{"line":219,"column":2},"end":{"line":221,"column":3}},"67":{"start":{"line":220,"column":4},"end":{"line":220,"column":61}},"68":{"start":{"line":223,"column":2},"end":{"line":226,"column":3}},"69":{"start":{"line":224,"column":4},"end":{"line":224,"column":60}},"70":{"start":{"line":225,"column":4},"end":{"line":225,"column":66}},"71":{"start":{"line":231,"column":2},"end":{"line":231,"column":59}},"72":{"start":{"line":247,"column":0},"end":{"line":258,"column":1}},"73":{"start":{"line":249,"column":2},"end":{"line":249,"column":18}},"74":{"start":{"line":252,"column":2},"end":{"line":255,"column":3}},"75":{"start":{"line":253,"column":4},"end":{"line":253,"column":74}},"76":{"start":{"line":254,"column":4},"end":{"line":254,"column":49}},"77":{"start":{"line":257,"column":2},"end":{"line":257,"column":52}},"78":{"start":{"line":272,"column":0},"end":{"line":334,"column":1}},"79":{"start":{"line":274,"column":2},"end":{"line":274,"column":18}},"80":{"start":{"line":276,"column":2},"end":{"line":291,"column":3}},"81":{"start":{"line":283,"column":4},"end":{"line":283,"column":83}},"82":{"start":{"line":287,"column":4},"end":{"line":290,"column":7}},"83":{"start":{"line":288,"column":6},"end":{"line":288,"column":32}},"84":{"start":{"line":288,"column":15},"end":{"line":288,"column":32}},"85":{"start":{"line":289,"column":6},"end":{"line":289,"column":37}},"86":{"start":{"line":317,"column":2},"end":{"line":331,"column":3}},"87":{"start":{"line":319,"column":4},"end":{"line":319,"column":22}},"88":{"start":{"line":320,"column":4},"end":{"line":320,"column":58}},"89":{"start":{"line":322,"column":4},"end":{"line":322,"column":56}},"90":{"start":{"line":323,"column":4},"end":{"line":323,"column":36}},"91":{"start":{"line":325,"column":4},"end":{"line":330,"column":7}},"92":{"start":{"line":326,"column":6},"end":{"line":326,"column":32}},"93":{"start":{"line":326,"column":15},"end":{"line":326,"column":32}},"94":{"start":{"line":329,"column":6},"end":{"line":329,"column":24}},"95":{"start":{"line":333,"column":2},"end":{"line":333,"column":44}},"96":{"start":{"line":353,"column":0},"end":{"line":424,"column":1}},"97":{"start":{"line":355,"column":2},"end":{"line":355,"column":18}},"98":{"start":{"line":356,"column":2},"end":{"line":356,"column":16}},"99":{"start":{"line":362,"column":2},"end":{"line":421,"column":5}},"100":{"start":{"line":364,"column":4},"end":{"line":364,"column":22}},"101":{"start":{"line":365,"column":4},"end":{"line":365,"column":28}},"102":{"start":{"line":366,"column":4},"end":{"line":366,"column":81}},"103":{"start":{"line":373,"column":4},"end":{"line":389,"column":5}},"104":{"start":{"line":376,"column":6},"end":{"line":376,"column":64}},"105":{"start":{"line":380,"column":6},"end":{"line":385,"column":8}},"106":{"start":{"line":387,"column":6},"end":{"line":387,"column":26}},"107":{"start":{"line":388,"column":6},"end":{"line":388,"column":13}},"108":{"start":{"line":397,"column":4},"end":{"line":397,"column":60}},"109":{"start":{"line":398,"column":4},"end":{"line":398,"column":59}},"110":{"start":{"line":401,"column":4},"end":{"line":401,"column":59}},"111":{"start":{"line":406,"column":4},"end":{"line":420,"column":5}},"112":{"start":{"line":410,"column":6},"end":{"line":415,"column":8}},"113":{"start":{"line":418,"column":6},"end":{"line":418,"column":26}},"114":{"start":{"line":419,"column":6},"end":{"line":419,"column":13}},"115":{"start":{"line":423,"column":2},"end":{"line":423,"column":14}},"116":{"start":{"line":437,"column":0},"end":{"line":461,"column":1}},"117":{"start":{"line":439,"column":2},"end":{"line":439,"column":18}},"118":{"start":{"line":441,"column":2},"end":{"line":456,"column":3}},"119":{"start":{"line":442,"column":4},"end":{"line":442,"column":20}},"120":{"start":{"line":446,"column":4},"end":{"line":449,"column":5}},"121":{"start":{"line":447,"column":6},"end":{"line":447,"column":89}},"122":{"start":{"line":448,"column":6},"end":{"line":448,"column":13}},"123":{"start":{"line":453,"column":4},"end":{"line":453,"column":37}},"124":{"start":{"line":455,"column":4},"end":{"line":455,"column":94}},"125":{"start":{"line":460,"column":2},"end":{"line":460,"column":37}},"126":{"start":{"line":477,"column":0},"end":{"line":504,"column":1}},"127":{"start":{"line":479,"column":2},"end":{"line":479,"column":27}},"128":{"start":{"line":483,"column":2},"end":{"line":493,"column":3}},"129":{"start":{"line":486,"column":4},"end":{"line":489,"column":5}},"130":{"start":{"line":487,"column":6},"end":{"line":487,"column":35}},"131":{"start":{"line":488,"column":6},"end":{"line":488,"column":13}},"132":{"start":{"line":491,"column":4},"end":{"line":491,"column":70}},"133":{"start":{"line":492,"column":4},"end":{"line":492,"column":43}},"134":{"start":{"line":497,"column":2},"end":{"line":501,"column":5}},"135":{"start":{"line":498,"column":4},"end":{"line":500,"column":7}},"136":{"start":{"line":499,"column":6},"end":{"line":499,"column":43}},"137":{"start":{"line":503,"column":2},"end":{"line":503,"column":25}},"138":{"start":{"line":519,"column":0},"end":{"line":556,"column":1}},"139":{"start":{"line":521,"column":2},"end":{"line":521,"column":18}},"140":{"start":{"line":525,"column":2},"end":{"line":540,"column":3}},"141":{"start":{"line":528,"column":4},"end":{"line":528,"column":81}},"142":{"start":{"line":529,"column":4},"end":{"line":529,"column":52}},"143":{"start":{"line":531,"column":4},"end":{"line":531,"column":65}},"144":{"start":{"line":532,"column":4},"end":{"line":532,"column":47}},"145":{"start":{"line":534,"column":4},"end":{"line":537,"column":5}},"146":{"start":{"line":535,"column":6},"end":{"line":535,"column":59}},"147":{"start":{"line":536,"column":6},"end":{"line":536,"column":38}},"148":{"start":{"line":539,"column":4},"end":{"line":539,"column":44}},"149":{"start":{"line":544,"column":2},"end":{"line":552,"column":3}},"150":{"start":{"line":545,"column":4},"end":{"line":545,"column":20}},"151":{"start":{"line":547,"column":4},"end":{"line":551,"column":7}},"152":{"start":{"line":548,"column":6},"end":{"line":548,"column":32}},"153":{"start":{"line":548,"column":15},"end":{"line":548,"column":32}},"154":{"start":{"line":549,"column":6},"end":{"line":549,"column":49}},"155":{"start":{"line":550,"column":6},"end":{"line":550,"column":13}},"156":{"start":{"line":555,"column":2},"end":{"line":555,"column":64}}},"branchMap":{"1":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":4},"end":{"line":59,"column":4}},{"start":{"line":59,"column":4},"end":{"line":59,"column":4}}]},"2":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":4},"end":{"line":69,"column":4}},{"start":{"line":69,"column":4},"end":{"line":69,"column":4}}]},"3":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":2},"end":{"line":93,"column":2}},{"start":{"line":93,"column":2},"end":{"line":93,"column":2}}]},"4":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":2},"end":{"line":94,"column":2}},{"start":{"line":94,"column":2},"end":{"line":94,"column":2}}]},"5":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":2},"end":{"line":95,"column":2}},{"start":{"line":95,"column":2},"end":{"line":95,"column":2}}]},"6":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":2},"end":{"line":105,"column":2}},{"start":{"line":105,"column":2},"end":{"line":105,"column":2}}]},"7":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":8},"end":{"line":110,"column":8}},{"start":{"line":110,"column":8},"end":{"line":110,"column":8}}]},"8":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":8},"end":{"line":111,"column":8}},{"start":{"line":111,"column":8},"end":{"line":111,"column":8}}]},"9":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":4},"end":{"line":128,"column":4}},{"start":{"line":128,"column":4},"end":{"line":128,"column":4}}]},"10":{"line":128,"type":"binary-expr","locations":[{"start":{"line":128,"column":8},"end":{"line":128,"column":32}},{"start":{"line":128,"column":36},"end":{"line":128,"column":54}}]},"11":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":4},"end":{"line":134,"column":4}},{"start":{"line":134,"column":4},"end":{"line":134,"column":4}}]},"12":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":4},"end":{"line":147,"column":4}},{"start":{"line":147,"column":4},"end":{"line":147,"column":4}}]},"13":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":6},"end":{"line":288,"column":6}},{"start":{"line":288,"column":6},"end":{"line":288,"column":6}}]},"14":{"line":326,"type":"if","locations":[{"start":{"line":326,"column":6},"end":{"line":326,"column":6}},{"start":{"line":326,"column":6},"end":{"line":326,"column":6}}]},"15":{"line":373,"type":"if","locations":[{"start":{"line":373,"column":4},"end":{"line":373,"column":4}},{"start":{"line":373,"column":4},"end":{"line":373,"column":4}}]},"16":{"line":406,"type":"if","locations":[{"start":{"line":406,"column":4},"end":{"line":406,"column":4}},{"start":{"line":406,"column":4},"end":{"line":406,"column":4}}]},"17":{"line":446,"type":"if","locations":[{"start":{"line":446,"column":4},"end":{"line":446,"column":4}},{"start":{"line":446,"column":4},"end":{"line":446,"column":4}}]},"18":{"line":486,"type":"if","locations":[{"start":{"line":486,"column":4},"end":{"line":486,"column":4}},{"start":{"line":486,"column":4},"end":{"line":486,"column":4}}]},"19":{"line":491,"type":"binary-expr","locations":[{"start":{"line":491,"column":35},"end":{"line":491,"column":63}},{"start":{"line":491,"column":67},"end":{"line":491,"column":69}}]},"20":{"line":548,"type":"if","locations":[{"start":{"line":548,"column":6},"end":{"line":548,"column":6}},{"start":{"line":548,"column":6},"end":{"line":548,"column":6}}]}},"code":["/**"," * Module Dependencies"," */","","var _ = require('lodash');","var async = require('async');","var hop = require('../helpers').object.hasOwnProperty;","","","/**"," * Update nested associations. Will take a values object and perform updating and"," * creating of all the nested associations. It's the same as syncing so it will first"," * remove any associations related to the parent and then \"sync\" the new associations."," *"," * @param {Array} parents"," * @param {Object} values"," * @param {Object} associations"," * @param {Function} cb"," */","","module.exports = function(parents, values, associations, cb) {","","  var self = this;","","  // Combine model and collection associations","  associations = associations.collections.concat(associations.models);","","  // Build up .add and .update operations for each association","  var operations = buildOperations.call(self, parents, associations, values);","","  // Now that our operations are built, lets go through and run any updates.","  // Then for each parent, find all the current associations and remove them then add","  // all the new associations in using .add()","  sync.call(self, parents, operations, cb);","","};","","","/**"," * Build Up Operations (add and update)"," *"," * @param {Array} associations"," * @param {Object} values"," * @return {Object}"," */","","function buildOperations(parents, associations, values) {","","  var self = this;","  var operations = {};","","  // For each association, grab the primary key value and normalize into model.add methods","  associations.forEach(function(association) {","","    var optValues = values[association];","","    // If values are being nulled out just return. This is used when removing foreign","    // keys on the parent model.","    if (optValues === null) return;","","    // Pull out any association values that have primary keys, these will need to be updated. All","    // values can be added for each parent however.","    operations[association] = {","      add: [],","      update: []","    };","","    // Normalize optValues to an array","    if (!Array.isArray(optValues)) optValues = [optValues];","    queueOperations.call(self, parents, association, operations[association], optValues);","  });","","  return operations;","}","","/**"," * Queue Up Operations."," *"," * Takes the array normalized association values and queues up"," * operations for the specific association."," *"," * @param {String} association"," * @param {Object} operation"," * @param {Array} values"," */","","function queueOperations(parents, association, operation, values) {","","  var self = this;","  var attribute = self.waterline.schema[self.identity].attributes[association];","  var modelName;","","  if (hop(attribute, 'collection')) modelName = attribute.collection;","  if (hop(attribute, 'foreignKey')) modelName = attribute.references;","  if (!modelName) return;","","  var collection = self.waterline.collections[modelName];","","  // Grab the relation's PK","  var relatedPK = _.find(collection.attributes, { primaryKey: true });","  var relatedPkName = collection.primaryKey;","","  // If this is a join table, we can just queue up operations on the parent","  // for this association.","  if (collection.junctionTable) {","","    // For each parent, queue up any .add() operations","    parents.forEach(function(parent) {","      values.forEach(function(val) {","        if (!hop(parent, association)) return;","        if (typeof parent[association].add !== 'function') return;","        parent[association].add(val);","      });","    });","","    return;","  }","","  values.forEach(function(val) {","","    // Check the values and see if the model's primary key is given. If so look into","    // the schema attribute and check if this is a collection or model attribute. If it's","    // a collection attribute lets update the child record and if it's a model attribute,","    // update the child and set the parent's foreign key value to the new primary key.","    //","    // If a custom PK was used and it's not autoIncrementing add the record. This","    // allows nested creates to work when custom PK's are used.","    if (!relatedPK.autoIncrement && !collection.autoPK) {","      operation.add.push(val);","      return;","    }","","    // If it's missing a PK queue up an add","    if (!hop(val, relatedPkName)) {","      operation.add.push(val);","      return;","    }","","    // Build up the criteria that will be used to update the child record","    var criteria = {};","    criteria[relatedPkName] = val[relatedPkName];","","    // Queue up the update operation","    operation.update.push({ model: modelName, criteria: criteria, values: val });","","    // Check if the parents foreign key needs to be updated","    if (!hop(attribute, 'foreignKey')) {","      operation.add.push(val[relatedPkName]);","      return;","    }","","    // Set the new foreign key value for each parent","    parents.forEach(function(parent) {","      parent[association] = val[relatedPkName];","    });","","  });","}","","/**"," * Sync Associated Data"," *"," * Using the operations, lets go through and run any updates on any nested object with"," * primary keys. This ensures that all the data passed up is persisted. Then for each parent,"," * find all the current associations and unlink them and then add all the new associations"," * in using .add(). This ensures that whatever is passed in to an update is what the value will"," * be when queried again."," *"," * @param {Object} operations"," * @param {Function} cb"," */","","function sync(parents, operations, cb) {","  var self = this;","","  async.auto({","","    // Update any nested associations","    update: function(next) {","      updateRunner.call(self, parents, operations, next);","    },","","    // For each parent, unlink all the associations currently set","    unlink: ['update', function(next) {","      unlinkRunner.call(self, parents, operations, next);","    }],","","    // For each parent found, link any associations passed in by either creating","    // the new record or linking an existing record","    link: ['unlink', function(next) {","      linkRunner.call(self, parents, operations, next);","    }]","","  }, cb);","}","","","////////////////////////////////////////////////////////////////////////////////////////","// .sync() - Async Auto Runners","////////////////////////////////////////////////////////////////////////////////////////","","","/**"," * Run Update Operations."," *"," * Uses the information stored in an operation to perform a .update() on the"," * associated model using the new values."," *"," * @param {Object} operation"," * @param {Function} cb"," */","","function updateRunner(parents, operations, cb) {","","  var self = this;","","  // There will be an array of update operations inside of a namespace. Use this to run","  // an update on the model instance of the association.","  function associationLoop(association, next) {","    async.each(operations[association].update, update, next);","  }","","  function update(operation, next) {","    var model = self.waterline.collections[operation.model];","    model.update(operation.criteria, operation.values).exec(next);","  }","","  // Operations are namespaced under an association key. So run each association's updates","  // in parallel for now. May need to be limited in the future but all adapters should","  // support connection pooling.","  async.each(Object.keys(operations), associationLoop, cb);","","}","","","/**"," * Unlink Associated Records."," *"," * For each association passed in to the update we are essentially replacing the"," * association's value. In order to do this we first need to clear out any associations"," * that currently exist."," *"," * @param {Object} operations"," * @param {Function} cb"," */","","function unlinkRunner(parents, operations, cb) {","","  var self = this;","","  // Given a parent, build up remove operations and run them.","  function unlinkParentAssociations(parent, next) {","    var opts = buildParentRemoveOperations.call(self, parent, operations);","    removeOperationRunner.call(self, opts, next);","  }","","  async.each(parents, unlinkParentAssociations, cb);","}","","","/**"," * Link Associated Records"," *"," * Given a set of operations, associate the records with the parent records. This"," * can be done by either creating join table records or by setting foreign keys."," * It defaults to a parent.add() method for most situations."," *"," * @param {Object} operations"," * @param {Function} cb"," */","","function linkRunner(parents, operations, cb) {","","  var self = this;","","  function linkChildRecords(parent, next) {","","    // Queue up `.add()` operations on the parent model and figure out","    // which records need to be created.","    //","    // If an .add() method is available always use it. If this is a nested model an .add()","    // method won't be available so queue up a create operation.","    var recordsToCreate = buildParentLinkOperations.call(self, parent, operations);","","    // Create the new records and update the parent with the new foreign key","    // values that may have been set when creating child records.","    createNewRecords.call(self, parent, recordsToCreate, function(err) {","      if (err) return next(err);","      updateParentRecord(parent, cb);","    });","  }","","  // Update the parent record one last time. This ensures a model attribute (single object)","  // on the parent can create a new record and then set the parent's foreign key value to","  // the newly created child record's primary key.","  //","  // Example:","  // Parent.update({","  //   name: 'foo',","  //   nestedModel: {","  //     name: 'bar'","  //   }","  // })","  //","  // The above query would create the new nested model and then set the parent's nestedModel","  // value to the newly created model's primary key.","  //","  // We then run a .save() to persist any .add() records that may have been used. The update and","  // .save() are used instead of a find and then save because it's the same amount of queries","  // and it's easier to take advantage of all that the .add() method gives us.","  //","  //","  // TO-DO:","  // Make this much smarter to reduce the amount of queries that need to be run. We should probably","  // be able to at least cut this in half!","  //","  function updateParentRecord(parent, next) {","","    var criteria = {};","    var model = self.waterline.collections[self.identity];","","    criteria[self.primaryKey] = parent[self.primaryKey];","    var pValues = parent.toObject();","","    model.update(criteria, pValues).exec(function(err) {","      if (err) return next(err);","","      // Call .save() to persist any .add() functions that may have been used.","      parent.save(next);","    });","  }","","  async.each(parents, linkChildRecords, cb);","}","","","////////////////////////////////////////////////////////////////////////////////////////","// .sync() - Helper Functions","////////////////////////////////////////////////////////////////////////////////////////","","","/**"," * Build up operations for performing unlinks."," *"," * Given a parent and a set of operations, queue up operations to either"," * remove join table records or null out any foreign keys on an child model."," *"," * @param {Object} parent"," * @param {Object} operations"," * @return {Array}"," */","","function buildParentRemoveOperations(parent, operations) {","","  var self = this;","  var opts = [];","","  // Inspect the association and see if this relationship has a joinTable.","  // If so create an operation criteria that clears all matching records from the","  // table. If it doesn't have a join table, build an operation criteria that","  // nulls out the foreign key on matching records.","  Object.keys(operations).forEach(function(association) {","","    var criteria = {};","    var searchCriteria = {};","    var attribute = self.waterline.schema[self.identity].attributes[association];","","    /////////////////////////////////////////////////////////////////////////","    // Parent Record:","    // If the foreign key is stored on the parent side, null it out","    /////////////////////////////////////////////////////////////////////////","","    if (hop(attribute, 'foreignKey')) {","","      // Set search criteria where primary key is equal to the parents primary key","      searchCriteria[self.primaryKey] = parent[self.primaryKey];","","      // Store any information we may need to build up an operation.","      // Use the `nullify` key to show we want to perform an update and not a destroy.","      criteria = {","        model: self.identity,","        criteria: searchCriteria,","        keyName: association,","        nullify: true","      };","","      opts.push(criteria);","      return;","    }","","    /////////////////////////////////////////////////////////////////////////","    // Child Record:","    // Lookup the attribute on the other side of the association on in the","    // case of a m:m association the child table will be the join table.","    /////////////////////////////////////////////////////////////////////////","","    var child = self.waterline.schema[attribute.collection];","    var childAttribute = child.attributes[attribute.onKey];","","    // Set the search criteria to use the collection's `via` key and the parent's primary key.","    searchCriteria[attribute.on] = parent[self.primaryKey];","","    // If the childAttribute stores the foreign key, find all children with the","    // foreignKey equal to the parent's primary key and null them out or in the case of","    // a `junctionTable` flag destroy them.","    if (hop(childAttribute, 'foreignKey')) {","","      // Store any information needed to perform the query. Set nullify to false if","      // a `junctionTable` property is found.","      criteria = {","        model: child.identity,","        criteria: searchCriteria,","        keyName: attribute.on,","        nullify: !hop(child, 'throughTable')","      };","","","      opts.push(criteria);","      return;","    }","  });","","  return opts;","}","","","/**"," * Remove Operation Runner"," *"," * Given a criteria object matching a remove operation, perform the"," * operation using waterline collection instances."," *"," * @param {Array} operations"," * @param {Function} callback"," */","","function removeOperationRunner(operations, cb) {","","  var self = this;","","  function runner(operation, next) {","    var values = {};","","    // If nullify is false, run a destroy method using the criteria to destroy","    // the join table records.","    if (!operation.nullify) {","      self.waterline.collections[operation.model].destroy(operation.criteria).exec(next);","      return;","    }","","    // Run an update operation to set the foreign key to null on all the","    // associated child records.","    values[operation.keyName] = null;","","    self.waterline.collections[operation.model].update(operation.criteria, values).exec(next);","  }","","","  // Run the operations","  async.each(operations, runner, cb);","}","","","/**"," * Build up operations for performing links."," *"," * Given a parent and a set of operations, queue up operations to associate two"," * records together. This could be using the parent's `.add()` method which handles"," * the logic for us or building up a `create` operation that we can run to create the"," * associated record with the correct foreign key set."," *"," * @param {Object} parent"," * @param {Object} operations"," * @return {Object}"," */","","function buildParentLinkOperations(parent, operations) {","","  var recordsToCreate = {};","","  // Determine whether to use the parent association's `.add()` function","  // or whether to queue up a create operation.","  function determineOperation(association, opt) {","","    // Check if the association has an `add` method, if so use it.","    if (hop(parent[association], 'add')) {","      parent[association].add(opt);","      return;","    }","","    recordsToCreate[association] = recordsToCreate[association] || [];","    recordsToCreate[association].push(opt);","  }","","  // For each operation look at all the .add operations and determine","  // what to do with them.","  Object.keys(operations).forEach(function(association) {","    operations[association].add.forEach(function(opt) {","      determineOperation(association, opt);","    });","  });","","  return recordsToCreate;","}","","","/**"," * Create New Records."," *"," * Given an object of association records to create, perform a create"," * on the child model and set the parent's foreign key to the newly"," * created record's primary key."," *"," * @param {Object} parent"," * @param {Object} recordsToCreate"," * @param {Function} cb"," */","","function createNewRecords(parent, recordsToCreate, cb) {","","  var self = this;","","  // For each association, run the createRecords function","  // in the model context.","  function mapAssociations(association, next) {","","    // First, pull the model attribute's referenced (foreign) collection","    var attribute = self.waterline.schema[self.identity].attributes[association];","    var referencedCollection = attribute.references;","","    var model = self.waterline.collections[referencedCollection];","    var records = recordsToCreate[association];","","    function createRunner(record, nextRecord) {","      var args = [parent, association, record, nextRecord];","      createRecord.apply(model, args);","    }","","    async.each(records, createRunner, next);","  }","","  // Create a record and set the parent's foreign key to the","  // newly created record's primary key.","  function createRecord(parent, association, record, next) {","    var self = this;","","    this.create(record).exec(function(err, val) {","      if (err) return next(err);","      parent[association] = val[self.primaryKey];","      next();","    });","  }","","","  async.each(Object.keys(recordsToCreate), mapAssociations, cb);","}",""],"l":{"5":1,"6":1,"7":1,"21":1,"23":0,"26":0,"29":0,"34":0,"47":1,"49":0,"50":0,"53":0,"55":0,"59":0,"63":0,"69":0,"70":0,"73":0,"87":1,"89":0,"90":0,"91":0,"93":0,"94":0,"95":0,"97":0,"100":0,"101":0,"105":0,"108":0,"109":0,"110":0,"111":0,"112":0,"116":0,"119":0,"128":0,"129":0,"130":0,"134":0,"135":0,"136":0,"140":0,"141":0,"144":0,"147":0,"148":0,"149":0,"153":0,"154":0,"173":1,"174":0,"176":0,"180":0,"185":0,"191":0,"213":1,"215":0,"219":1,"220":0,"223":1,"224":0,"225":0,"231":0,"247":1,"249":0,"252":1,"253":0,"254":0,"257":0,"272":1,"274":0,"276":1,"283":0,"287":0,"288":0,"289":0,"317":1,"319":0,"320":0,"322":0,"323":0,"325":0,"326":0,"329":0,"333":0,"353":1,"355":0,"356":0,"362":0,"364":0,"365":0,"366":0,"373":0,"376":0,"380":0,"387":0,"388":0,"397":0,"398":0,"401":0,"406":0,"410":0,"418":0,"419":0,"423":0,"437":1,"439":0,"441":1,"442":0,"446":0,"447":0,"448":0,"453":0,"455":0,"460":0,"477":1,"479":0,"483":1,"486":0,"487":0,"488":0,"491":0,"492":0,"497":0,"498":0,"499":0,"503":0,"519":1,"521":0,"525":1,"528":0,"529":0,"531":0,"532":0,"534":1,"535":0,"536":0,"539":0,"544":1,"545":0,"547":0,"548":0,"549":0,"550":0,"555":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/model/lib/associationMethods/add.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/model/lib/associationMethods/add.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":1,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":1,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":1,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},"fnMap":{"1":{"name":"(anonymous_1)","line":24,"loc":{"start":{"line":24,"column":27},"end":{"line":24,"column":68}}},"2":{"name":"(anonymous_2)","line":64,"loc":{"start":{"line":64,"column":31},"end":{"line":64,"column":60}}},"3":{"name":"(anonymous_3)","line":88,"loc":{"start":{"line":88,"column":45},"end":{"line":88,"column":67}}},"4":{"name":"(anonymous_4)","line":91,"loc":{"start":{"line":91,"column":41},"end":{"line":91,"column":72}}},"5":{"name":"(anonymous_5)","line":95,"loc":{"start":{"line":95,"column":2},"end":{"line":95,"column":16}}},"6":{"name":"(anonymous_6)","line":113,"loc":{"start":{"line":113,"column":35},"end":{"line":113,"column":62}}},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":31},"end":{"line":125,"column":59}}},"8":{"name":"(anonymous_8)","line":165,"loc":{"start":{"line":165,"column":32},"end":{"line":165,"column":81}}},"9":{"name":"(anonymous_9)","line":177,"loc":{"start":{"line":177,"column":28},"end":{"line":177,"column":50}}},"10":{"name":"(anonymous_10)","line":232,"loc":{"start":{"line":232,"column":29},"end":{"line":232,"column":74}}},"11":{"name":"(anonymous_11)","line":262,"loc":{"start":{"line":262,"column":39},"end":{"line":262,"column":53}}},"12":{"name":"(anonymous_12)","line":288,"loc":{"start":{"line":288,"column":33},"end":{"line":288,"column":78}}},"13":{"name":"(anonymous_13)","line":322,"loc":{"start":{"line":322,"column":25},"end":{"line":322,"column":40}}},"14":{"name":"(anonymous_14)","line":329,"loc":{"start":{"line":329,"column":46},"end":{"line":329,"column":68}}},"15":{"name":"(anonymous_15)","line":340,"loc":{"start":{"line":340,"column":20},"end":{"line":340,"column":35}}},"16":{"name":"(anonymous_16)","line":343,"loc":{"start":{"line":343,"column":35},"end":{"line":343,"column":54}}},"17":{"name":"(anonymous_17)","line":352,"loc":{"start":{"line":352,"column":60},"end":{"line":352,"column":84}}},"18":{"name":"(anonymous_18)","line":357,"loc":{"start":{"line":357,"column":34},"end":{"line":357,"column":45}}},"19":{"name":"(anonymous_19)","line":365,"loc":{"start":{"line":365,"column":5},"end":{"line":365,"column":19}}},"20":{"name":"(anonymous_20)","line":389,"loc":{"start":{"line":389,"column":35},"end":{"line":389,"column":56}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":29}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":46}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":49}},"5":{"start":{"line":24,"column":0},"end":{"line":54,"column":2}},"6":{"start":{"line":26,"column":2},"end":{"line":26,"column":31}},"7":{"start":{"line":27,"column":2},"end":{"line":27,"column":21}},"8":{"start":{"line":28,"column":2},"end":{"line":28,"column":31}},"9":{"start":{"line":29,"column":2},"end":{"line":29,"column":25}},"10":{"start":{"line":31,"column":2},"end":{"line":31,"column":32}},"11":{"start":{"line":32,"column":2},"end":{"line":32,"column":79}},"12":{"start":{"line":34,"column":2},"end":{"line":34,"column":60}},"13":{"start":{"line":36,"column":2},"end":{"line":39,"column":3}},"14":{"start":{"line":37,"column":4},"end":{"line":38,"column":79}},"15":{"start":{"line":41,"column":2},"end":{"line":44,"column":3}},"16":{"start":{"line":42,"column":4},"end":{"line":43,"column":73}},"17":{"start":{"line":53,"column":2},"end":{"line":53,"column":49}},"18":{"start":{"line":64,"column":0},"end":{"line":78,"column":2}},"19":{"start":{"line":65,"column":2},"end":{"line":65,"column":24}},"20":{"start":{"line":67,"column":2},"end":{"line":72,"column":3}},"21":{"start":{"line":68,"column":4},"end":{"line":71,"column":5}},"22":{"start":{"line":69,"column":6},"end":{"line":69,"column":29}},"23":{"start":{"line":70,"column":6},"end":{"line":70,"column":12}},"24":{"start":{"line":75,"column":2},"end":{"line":75,"column":69}},"25":{"start":{"line":75,"column":51},"end":{"line":75,"column":69}},"26":{"start":{"line":77,"column":2},"end":{"line":77,"column":20}},"27":{"start":{"line":88,"column":0},"end":{"line":102,"column":2}},"28":{"start":{"line":89,"column":2},"end":{"line":89,"column":18}},"29":{"start":{"line":91,"column":2},"end":{"line":101,"column":5}},"30":{"start":{"line":92,"column":4},"end":{"line":92,"column":75}},"31":{"start":{"line":96,"column":4},"end":{"line":98,"column":5}},"32":{"start":{"line":97,"column":6},"end":{"line":97,"column":47}},"33":{"start":{"line":100,"column":4},"end":{"line":100,"column":9}},"34":{"start":{"line":113,"column":0},"end":{"line":153,"column":2}},"35":{"start":{"line":114,"column":2},"end":{"line":114,"column":18}},"36":{"start":{"line":118,"column":2},"end":{"line":118,"column":51}},"37":{"start":{"line":119,"column":2},"end":{"line":119,"column":58}},"38":{"start":{"line":120,"column":2},"end":{"line":120,"column":83}},"39":{"start":{"line":121,"column":2},"end":{"line":121,"column":80}},"40":{"start":{"line":122,"column":2},"end":{"line":122,"column":90}},"41":{"start":{"line":125,"column":2},"end":{"line":152,"column":9}},"42":{"start":{"line":129,"column":4},"end":{"line":145,"column":5}},"43":{"start":{"line":134,"column":6},"end":{"line":136,"column":7}},"44":{"start":{"line":135,"column":8},"end":{"line":135,"column":90}},"45":{"start":{"line":139,"column":6},"end":{"line":142,"column":7}},"46":{"start":{"line":140,"column":8},"end":{"line":140,"column":49}},"47":{"start":{"line":141,"column":8},"end":{"line":141,"column":91}},"48":{"start":{"line":144,"column":6},"end":{"line":144,"column":88}},"49":{"start":{"line":150,"column":4},"end":{"line":150,"column":76}},"50":{"start":{"line":165,"column":0},"end":{"line":220,"column":2}},"51":{"start":{"line":166,"column":2},"end":{"line":166,"column":18}},"52":{"start":{"line":169,"column":2},"end":{"line":169,"column":84}},"53":{"start":{"line":170,"column":2},"end":{"line":170,"column":66}},"54":{"start":{"line":173,"column":2},"end":{"line":175,"column":3}},"55":{"start":{"line":174,"column":4},"end":{"line":174,"column":58}},"56":{"start":{"line":177,"column":2},"end":{"line":219,"column":5}},"57":{"start":{"line":178,"column":4},"end":{"line":193,"column":5}},"58":{"start":{"line":182,"column":6},"end":{"line":185,"column":7}},"59":{"start":{"line":183,"column":8},"end":{"line":184,"column":78}},"60":{"start":{"line":187,"column":6},"end":{"line":192,"column":9}},"61":{"start":{"line":196,"column":4},"end":{"line":196,"column":36}},"62":{"start":{"line":196,"column":24},"end":{"line":196,"column":36}},"63":{"start":{"line":199,"column":4},"end":{"line":199,"column":25}},"64":{"start":{"line":199,"column":13},"end":{"line":199,"column":25}},"65":{"start":{"line":202,"column":4},"end":{"line":202,"column":84}},"66":{"start":{"line":204,"column":4},"end":{"line":211,"column":5}},"67":{"start":{"line":205,"column":6},"end":{"line":210,"column":9}},"68":{"start":{"line":214,"column":4},"end":{"line":214,"column":99}},"69":{"start":{"line":218,"column":4},"end":{"line":218,"column":82}},"70":{"start":{"line":232,"column":0},"end":{"line":276,"column":2}},"71":{"start":{"line":233,"column":2},"end":{"line":233,"column":18}},"72":{"start":{"line":236,"column":2},"end":{"line":236,"column":84}},"73":{"start":{"line":237,"column":2},"end":{"line":237,"column":66}},"74":{"start":{"line":240,"column":2},"end":{"line":243,"column":3}},"75":{"start":{"line":241,"column":4},"end":{"line":241,"column":99}},"76":{"start":{"line":242,"column":4},"end":{"line":242,"column":73}},"77":{"start":{"line":246,"column":2},"end":{"line":246,"column":84}},"78":{"start":{"line":247,"column":2},"end":{"line":247,"column":67}},"79":{"start":{"line":249,"column":2},"end":{"line":253,"column":3}},"80":{"start":{"line":250,"column":4},"end":{"line":252,"column":34}},"81":{"start":{"line":256,"column":2},"end":{"line":256,"column":20}},"82":{"start":{"line":257,"column":2},"end":{"line":257,"column":19}},"83":{"start":{"line":259,"column":2},"end":{"line":259,"column":32}},"84":{"start":{"line":260,"column":2},"end":{"line":260,"column":57}},"85":{"start":{"line":262,"column":2},"end":{"line":275,"column":5}},"86":{"start":{"line":264,"column":4},"end":{"line":272,"column":5}},"87":{"start":{"line":265,"column":6},"end":{"line":271,"column":9}},"88":{"start":{"line":274,"column":4},"end":{"line":274,"column":9}},"89":{"start":{"line":288,"column":0},"end":{"line":379,"column":2}},"90":{"start":{"line":289,"column":2},"end":{"line":289,"column":18}},"91":{"start":{"line":292,"column":2},"end":{"line":292,"column":98}},"92":{"start":{"line":293,"column":2},"end":{"line":293,"column":123}},"93":{"start":{"line":294,"column":2},"end":{"line":294,"column":46}},"94":{"start":{"line":297,"column":2},"end":{"line":304,"column":3}},"95":{"start":{"line":298,"column":4},"end":{"line":298,"column":163}},"96":{"start":{"line":299,"column":4},"end":{"line":301,"column":5}},"97":{"start":{"line":300,"column":6},"end":{"line":300,"column":98}},"98":{"start":{"line":303,"column":4},"end":{"line":303,"column":30}},"99":{"start":{"line":306,"column":2},"end":{"line":310,"column":3}},"100":{"start":{"line":307,"column":4},"end":{"line":309,"column":34}},"101":{"start":{"line":313,"column":2},"end":{"line":313,"column":20}},"102":{"start":{"line":314,"column":2},"end":{"line":314,"column":19}},"103":{"start":{"line":316,"column":2},"end":{"line":316,"column":32}},"104":{"start":{"line":317,"column":2},"end":{"line":317,"column":58}},"105":{"start":{"line":318,"column":2},"end":{"line":318,"column":30}},"106":{"start":{"line":320,"column":2},"end":{"line":378,"column":5}},"107":{"start":{"line":323,"column":6},"end":{"line":323,"column":96}},"108":{"start":{"line":324,"column":6},"end":{"line":324,"column":97}},"109":{"start":{"line":325,"column":6},"end":{"line":325,"column":80}},"110":{"start":{"line":326,"column":6},"end":{"line":326,"column":25}},"111":{"start":{"line":327,"column":6},"end":{"line":327,"column":33}},"112":{"start":{"line":329,"column":6},"end":{"line":337,"column":9}},"113":{"start":{"line":330,"column":8},"end":{"line":330,"column":34}},"114":{"start":{"line":330,"column":17},"end":{"line":330,"column":34}},"115":{"start":{"line":331,"column":8},"end":{"line":334,"column":9}},"116":{"start":{"line":332,"column":10},"end":{"line":333,"column":71}},"117":{"start":{"line":336,"column":8},"end":{"line":336,"column":15}},"118":{"start":{"line":343,"column":6},"end":{"line":349,"column":9}},"119":{"start":{"line":344,"column":8},"end":{"line":346,"column":9}},"120":{"start":{"line":345,"column":10},"end":{"line":345,"column":27}},"121":{"start":{"line":348,"column":8},"end":{"line":348,"column":24}},"122":{"start":{"line":355,"column":6},"end":{"line":355,"column":50}},"123":{"start":{"line":356,"column":6},"end":{"line":360,"column":7}},"124":{"start":{"line":357,"column":8},"end":{"line":359,"column":11}},"125":{"start":{"line":358,"column":10},"end":{"line":358,"column":17}},"126":{"start":{"line":362,"column":6},"end":{"line":362,"column":39}},"127":{"start":{"line":366,"column":4},"end":{"line":374,"column":5}},"128":{"start":{"line":367,"column":6},"end":{"line":373,"column":9}},"129":{"start":{"line":376,"column":4},"end":{"line":376,"column":16}},"130":{"start":{"line":389,"column":0},"end":{"line":405,"column":2}},"131":{"start":{"line":390,"column":2},"end":{"line":390,"column":28}},"132":{"start":{"line":392,"column":2},"end":{"line":402,"column":3}},"133":{"start":{"line":393,"column":4},"end":{"line":393,"column":48}},"134":{"start":{"line":394,"column":4},"end":{"line":394,"column":44}},"135":{"start":{"line":396,"column":4},"end":{"line":396,"column":54}},"136":{"start":{"line":396,"column":45},"end":{"line":396,"column":54}},"137":{"start":{"line":397,"column":4},"end":{"line":397,"column":41}},"138":{"start":{"line":399,"column":4},"end":{"line":401,"column":5}},"139":{"start":{"line":400,"column":6},"end":{"line":400,"column":39}},"140":{"start":{"line":404,"column":2},"end":{"line":404,"column":24}}},"branchMap":{"1":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":2},"end":{"line":36,"column":2}},{"start":{"line":36,"column":2},"end":{"line":36,"column":2}}]},"2":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":2},"end":{"line":41,"column":2}},{"start":{"line":41,"column":2},"end":{"line":41,"column":2}}]},"3":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":4},"end":{"line":68,"column":4}},{"start":{"line":68,"column":4},"end":{"line":68,"column":4}}]},"4":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":8},"end":{"line":68,"column":59}},{"start":{"line":68,"column":63},"end":{"line":68,"column":95}}]},"5":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":2},"end":{"line":75,"column":2}},{"start":{"line":75,"column":2},"end":{"line":75,"column":2}}]},"6":{"line":75,"type":"binary-expr","locations":[{"start":{"line":75,"column":6},"end":{"line":75,"column":17}},{"start":{"line":75,"column":21},"end":{"line":75,"column":49}}]},"7":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":4},"end":{"line":96,"column":4}},{"start":{"line":96,"column":4},"end":{"line":96,"column":4}}]},"8":{"line":96,"type":"binary-expr","locations":[{"start":{"line":96,"column":8},"end":{"line":96,"column":11}},{"start":{"line":96,"column":15},"end":{"line":96,"column":49}}]},"9":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":4},"end":{"line":129,"column":4}},{"start":{"line":129,"column":4},"end":{"line":129,"column":4}}]},"10":{"line":129,"type":"binary-expr","locations":[{"start":{"line":129,"column":8},"end":{"line":129,"column":28}},{"start":{"line":129,"column":32},"end":{"line":129,"column":63}},{"start":{"line":129,"column":67},"end":{"line":129,"column":102}}]},"11":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":6},"end":{"line":134,"column":6}},{"start":{"line":134,"column":6},"end":{"line":134,"column":6}}]},"12":{"line":134,"type":"binary-expr","locations":[{"start":{"line":134,"column":10},"end":{"line":134,"column":20}},{"start":{"line":134,"column":24},"end":{"line":134,"column":48}},{"start":{"line":134,"column":52},"end":{"line":134,"column":80}}]},"13":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":6},"end":{"line":139,"column":6}},{"start":{"line":139,"column":6},"end":{"line":139,"column":6}}]},"14":{"line":170,"type":"binary-expr","locations":[{"start":{"line":170,"column":22},"end":{"line":170,"column":42}},{"start":{"line":170,"column":46},"end":{"line":170,"column":65}}]},"15":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":2},"end":{"line":173,"column":2}},{"start":{"line":173,"column":2},"end":{"line":173,"column":2}}]},"16":{"line":178,"type":"if","locations":[{"start":{"line":178,"column":4},"end":{"line":178,"column":4}},{"start":{"line":178,"column":4},"end":{"line":178,"column":4}}]},"17":{"line":182,"type":"if","locations":[{"start":{"line":182,"column":6},"end":{"line":182,"column":6}},{"start":{"line":182,"column":6},"end":{"line":182,"column":6}}]},"18":{"line":182,"type":"binary-expr","locations":[{"start":{"line":182,"column":10},"end":{"line":182,"column":24}},{"start":{"line":182,"column":28},"end":{"line":182,"column":61}}]},"19":{"line":196,"type":"if","locations":[{"start":{"line":196,"column":4},"end":{"line":196,"column":4}},{"start":{"line":196,"column":4},"end":{"line":196,"column":4}}]},"20":{"line":199,"type":"if","locations":[{"start":{"line":199,"column":4},"end":{"line":199,"column":4}},{"start":{"line":199,"column":4},"end":{"line":199,"column":4}}]},"21":{"line":204,"type":"if","locations":[{"start":{"line":204,"column":4},"end":{"line":204,"column":4}},{"start":{"line":204,"column":4},"end":{"line":204,"column":4}}]},"22":{"line":237,"type":"binary-expr","locations":[{"start":{"line":237,"column":22},"end":{"line":237,"column":42}},{"start":{"line":237,"column":46},"end":{"line":237,"column":65}}]},"23":{"line":240,"type":"if","locations":[{"start":{"line":240,"column":2},"end":{"line":240,"column":2}},{"start":{"line":240,"column":2},"end":{"line":240,"column":2}}]},"24":{"line":249,"type":"if","locations":[{"start":{"line":249,"column":2},"end":{"line":249,"column":2}},{"start":{"line":249,"column":2},"end":{"line":249,"column":2}}]},"25":{"line":264,"type":"if","locations":[{"start":{"line":264,"column":4},"end":{"line":264,"column":4}},{"start":{"line":264,"column":4},"end":{"line":264,"column":4}}]},"26":{"line":293,"type":"binary-expr","locations":[{"start":{"line":293,"column":27},"end":{"line":293,"column":72}},{"start":{"line":293,"column":76},"end":{"line":293,"column":122}}]},"27":{"line":297,"type":"if","locations":[{"start":{"line":297,"column":2},"end":{"line":297,"column":2}},{"start":{"line":297,"column":2},"end":{"line":297,"column":2}}]},"28":{"line":298,"type":"binary-expr","locations":[{"start":{"line":298,"column":19},"end":{"line":298,"column":98}},{"start":{"line":298,"column":102},"end":{"line":298,"column":162}}]},"29":{"line":299,"type":"if","locations":[{"start":{"line":299,"column":4},"end":{"line":299,"column":4}},{"start":{"line":299,"column":4},"end":{"line":299,"column":4}}]},"30":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":2},"end":{"line":306,"column":2}},{"start":{"line":306,"column":2},"end":{"line":306,"column":2}}]},"31":{"line":330,"type":"if","locations":[{"start":{"line":330,"column":8},"end":{"line":330,"column":8}},{"start":{"line":330,"column":8},"end":{"line":330,"column":8}}]},"32":{"line":331,"type":"if","locations":[{"start":{"line":331,"column":8},"end":{"line":331,"column":8}},{"start":{"line":331,"column":8},"end":{"line":331,"column":8}}]},"33":{"line":344,"type":"if","locations":[{"start":{"line":344,"column":8},"end":{"line":344,"column":8}},{"start":{"line":344,"column":8},"end":{"line":344,"column":8}}]},"34":{"line":356,"type":"if","locations":[{"start":{"line":356,"column":6},"end":{"line":356,"column":6}},{"start":{"line":356,"column":6},"end":{"line":356,"column":6}}]},"35":{"line":366,"type":"if","locations":[{"start":{"line":366,"column":4},"end":{"line":366,"column":4}},{"start":{"line":366,"column":4},"end":{"line":366,"column":4}}]},"36":{"line":396,"type":"if","locations":[{"start":{"line":396,"column":4},"end":{"line":396,"column":4}},{"start":{"line":396,"column":4},"end":{"line":396,"column":4}}]},"37":{"line":399,"type":"if","locations":[{"start":{"line":399,"column":4},"end":{"line":399,"column":4}},{"start":{"line":399,"column":4},"end":{"line":399,"column":4}}]}},"code":["/**"," * Module dependencies"," */","","var _ = require('lodash');","var async = require('async');","var utils = require('../../../utils/helpers');","var hasOwnProperty = utils.object.hasOwnProperty;","","/**"," * Add associations for a model."," *"," * If an object was used a new record should be created and linked to the parent."," * If only a primary key was used then the record should only be linked to the parent."," *"," * Called in the model instance context."," *"," * @param {Object} collection"," * @param {Object} proto"," * @param {Object} records"," * @param {Function} callback"," */","","var Add = module.exports = function(collection, proto, records, cb) {","","  this.collection = collection;","  this.proto = proto;","  this.failedTransactions = [];","  this.primaryKey = null;","","  var values = proto.toObject();","  var attributes = collection.waterline.schema[collection.identity].attributes;","","  this.primaryKey = this.findPrimaryKey(attributes, values);","","  if (!this.primaryKey) {","    return cb(new Error('No Primary Key set to associate the record with! ' +","      'Try setting an attribute as a primary key or include an ID property.'));","  }","","  if (!proto.toObject()[this.primaryKey]) {","    return cb(new Error('No Primary Key set to associate the record with! ' +","      'Primary Key must have a value, it can\\'t be an optional value.'));","  }","","  // Loop through each of the associations on this model and add any associations","  // that have been specified. Do this in series and limit the actual saves to 10","  // at a time so that connection pools are not exhausted.","  //","  // In the future when transactions are available this will all be done on a single","  // connection and can be re-written.","","  this.createCollectionAssociations(records, cb);","};","","/**"," * Find Primary Key"," *"," * @param {Object} attributes"," * @param {Object} values"," * @api private"," */","","Add.prototype.findPrimaryKey = function(attributes, values) {","  var primaryKey = null;","","  for (var attribute in attributes) {","    if (hasOwnProperty(attributes[attribute], 'primaryKey') && attributes[attribute].primaryKey) {","      primaryKey = attribute;","      break;","    }","  }","","  // If no primary key check for an ID property","  if (!primaryKey && hasOwnProperty(values, 'id')) primaryKey = 'id';","","  return primaryKey;","};","","/**"," * Create Collection Associations"," *"," * @param {Object} records"," * @param {Function} callback"," * @api private"," */","","Add.prototype.createCollectionAssociations = function(records, cb) {","  var self = this;","","  async.eachSeries(Object.keys(records), function(associationKey, next) {","    self.createAssociations(associationKey, records[associationKey], next);","  },","","  function(err) {","    if (err || self.failedTransactions.length > 0) {","      return cb(null, self.failedTransactions);","    }","","    cb();","  });","};","","/**"," * Create Records for an Association property on a collection"," *"," * @param {String} key"," * @param {Array} records"," * @param {Function} callback"," * @api private"," */","","Add.prototype.createAssociations = function(key, records, cb) {","  var self = this;","","  // Grab the collection the attribute references","  // this allows us to make a query on it","  var attribute = this.collection._attributes[key];","  var collectionName = attribute.collection.toLowerCase();","  var associatedCollection = this.collection.waterline.collections[collectionName];","  var relatedPK = _.find(associatedCollection.attributes, { primaryKey: true });","  var schema = this.collection.waterline.schema[this.collection.identity].attributes[key];","","  // Limit Adds to 10 at a time to prevent the connection pool from being exhausted","  async.eachLimit(records, 10, function(association, next) {","","    // If an object was passed in it should be created.","    // This allows new records to be created through the association interface","    if (association !== null && typeof association === 'object' && Object.keys(association).length > 0) {","","      // If a custom PK was used on the associated collection and it's not","      // autoIncrementing, create the record. This allows nested","      // creates to work when custom PK's are used.","      if (!relatedPK || !relatedPK.autoIncrement && !associatedCollection.autoPK) {","        return self.createNewRecord(associatedCollection, schema, association, key, next);","      }","","      // Check if the record contains a primary key, if so just link the values","      if (hasOwnProperty(association, associatedCollection.primaryKey)) {","        var pk = associatedCollection.primaryKey;","        return self.updateRecord(associatedCollection, schema, association[pk], key, next);","      }","","      return self.createNewRecord(associatedCollection, schema, association, key, next);","    }","","    // If the value is a primary key just update the association's foreign key","    // This will either create the new association through a foreign key or re-associatiate","    // with another collection.","    self.updateRecord(associatedCollection, schema, association, key, next);","","  }, cb);","};","","/**"," * Create A New Record"," *"," * @param {Object} collection"," * @param {Object} attribute"," * @param {Object} values"," * @param {Function} callback"," * @api private"," */","","Add.prototype.createNewRecord = function(collection, attribute, values, key, cb) {","  var self = this;","","  // Check if this is a many-to-many by looking at the junctionTable flag","  var schema = this.collection.waterline.schema[attribute.collection.toLowerCase()];","  var junctionTable = schema.junctionTable || schema.throughTable;","","  // If this isn't a many-to-many then add the foreign key in to the values","  if (!junctionTable) {","    values[attribute.onKey] = this.proto[this.primaryKey];","  }","","  collection.create(values, function(err, record) {","    if (err) {","","      // If no via was specified and the insert failed on a one-to-many build up an error message that","      // properly reflects the error.","      if (!junctionTable && !hasOwnProperty(attribute, 'via')) {","        err = new Error('You attempted to create a has many relationship but didn\\'t link the two ' +","          'atttributes together. Please setup a link using the via keyword.');","      }","","      self.failedTransactions.push({","        type: 'insert',","        collection: collection.identity,","        values: values,","        err: err","      });","    }","","    // if no junction table then return","    if (!junctionTable) return cb();","","    // if junction table but there was an error don't try and link the records","    if (err) return cb();","","    // Find the collection's Primary Key value","    var primaryKey = self.findPrimaryKey(collection._attributes, record.toObject());","","    if (!primaryKey) {","      self.failedTransactions.push({","        type: 'insert',","        collection: collection.identity,","        values: {},","        err: new Error('No Primary Key value was found on the joined collection')","      });","    }","","    // Find the Many To Many Collection","    var joinCollection = self.collection.waterline.collections[attribute.collection.toLowerCase()];","","    // The related record was created now the record in the junction table","    // needs to be created to link the two records","    self.createManyToMany(joinCollection, attribute, record[primaryKey], key, cb);","  });","};","","/**"," * Update A Record"," *"," * @param {Object} collection"," * @param {Object} attribute"," * @param {Object} values"," * @param {Function} callback"," * @api private"," */","","Add.prototype.updateRecord = function(collection, attribute, pk, key, cb) {","  var self = this;","","  // Check if this is a many-to-many by looking at the junctionTable flag","  var schema = this.collection.waterline.schema[attribute.collection.toLowerCase()];","  var junctionTable = schema.junctionTable || schema.throughTable;","","  // If so build out the criteria and create a new record in the junction table","  if (junctionTable) {","    var joinCollection = this.collection.waterline.collections[attribute.collection.toLowerCase()];","    return this.createManyToMany(joinCollection, attribute, pk, key, cb);","  }","","  // Grab the associated collection's primaryKey","  var attributes = this.collection.waterline.schema[collection.identity].attributes;","  var associationKey = this.findPrimaryKey(attributes, attributes);","","  if (!associationKey) {","    return cb(new Error('No Primary Key defined on the child record you ' +","      'are trying to associate the record with! Try setting an attribute as a primary key or ' +","      'include an ID property.'));","  }","","  // Build up criteria and updated values used to update the record","  var criteria = {};","  var _values = {};","","  criteria[associationKey] = pk;","  _values[attribute.onKey] = this.proto[this.primaryKey];","","  collection.update(criteria, _values, function(err) {","","    if (err) {","      self.failedTransactions.push({","        type: 'update',","        collection: collection.identity,","        criteria: criteria,","        values: _values,","        err: err","      });","    }","","    cb();","  });","};","","/**"," * Create A Many To Many Join Table Record"," *"," * @param {Object} collection"," * @param {Object} attribute"," * @param {Object} values"," * @param {Function} callback"," * @api private"," */","","Add.prototype.createManyToMany = function(collection, attribute, pk, key, cb) {","  var self = this;","","  // Grab the associated collection's primaryKey","  var collectionAttributes = this.collection.waterline.schema[attribute.collection.toLowerCase()];","  var associationKeyAttr = collectionAttributes.attributes[attribute.on] || collectionAttributes.attributes[attribute.via];","  var associationKey = associationKeyAttr.via;","","  // If this is a throughTable, look into the meta data cache for what key to use","  if (collectionAttributes.throughTable) {","    var cacheKey = collectionAttributes.throughTable[self.collection.adapter.identity + '.' + key] || collectionAttributes.throughTable[attribute.via + '.' + key];","    if (!cacheKey) {","      return cb(new Error('Unable to find the proper cache key in the through table definition'));","    }","","    associationKey = cacheKey;","  }","","  if (!associationKey) {","    return cb(new Error('No Primary Key set on the child record you ' +","      'are trying to associate the record with! Try setting an attribute as a primary key or ' +","      'include an ID property.'));","  }","","  // Build up criteria and updated values used to create the record","  var criteria = {};","  var _values = {};","","  criteria[associationKey] = pk;","  criteria[attribute.onKey] = this.proto[this.primaryKey];","  _values = _.clone(criteria);","","  async.auto({","","    validateAssociation: function(next) {","      var associatedCollectionName = collectionAttributes.attributes[associationKey].references;","      var associatedCollection = self.collection.waterline.collections[associatedCollectionName];","      var primaryKey = self.findPrimaryKey(associatedCollection.attributes, {});","      var _criteria = {};","      _criteria[primaryKey] = pk;","","      associatedCollection.findOne(_criteria, function(err, record) {","        if (err) return next(err);","        if (!record) {","          return next(new Error('Associated Record For ' + associatedCollectionName +","            ' with ' + primaryKey + ' = ' + pk + ' No Longer Exists'));","        }","","        next();","      });","    },","","    validateRecord: function(next) {","","      // First look up the record to ensure it doesn't exist","      collection.findOne(criteria, function(err, val) {","        if (err) {","          return next(err);","        }","","        next(null, val);","      });","    },","","    createRecord: ['validateAssociation', 'validateRecord', function(next, results) {","      // If the record already exists, don't try and create it again to prevent","      // duplicates.","      var validateRecord = results.validateRecord;","      if (validateRecord) {","        return async.setImmediate(function() {","          next();","        });","      }","","      collection.create(_values, next);","    }]","","  }, function(err) {","    if (err) {","      self.failedTransactions.push({","        type: 'insert',","        collection: collection.identity,","        criteria: criteria,","        values: _values,","        err: err","      });","    }","","    return cb();","","  });","};","","/**"," * Find Association Key"," *"," * @param {Object} collection"," * @return {String}"," * @api private"," */","","Add.prototype.findAssociationKey = function(collection) {","  var associationKey = null;","","  for (var attribute in collection.attributes) {","    var attr = collection.attributes[attribute];","    var identity = this.collection.identity;","","    if (!hasOwnProperty(attr, 'references')) continue;","    var attrCollection = attr.references;","","    if (attrCollection !== identity) {","      associationKey = attr.columnName;","    }","  }","","  return associationKey;","};",""],"l":{"5":1,"6":1,"7":1,"8":1,"24":1,"26":0,"27":0,"28":0,"29":0,"31":0,"32":0,"34":0,"36":0,"37":0,"41":0,"42":0,"53":0,"64":1,"65":0,"67":0,"68":0,"69":0,"70":0,"75":0,"77":0,"88":1,"89":0,"91":0,"92":0,"96":0,"97":0,"100":0,"113":1,"114":0,"118":0,"119":0,"120":0,"121":0,"122":0,"125":0,"129":0,"134":0,"135":0,"139":0,"140":0,"141":0,"144":0,"150":0,"165":1,"166":0,"169":0,"170":0,"173":0,"174":0,"177":0,"178":0,"182":0,"183":0,"187":0,"196":0,"199":0,"202":0,"204":0,"205":0,"214":0,"218":0,"232":1,"233":0,"236":0,"237":0,"240":0,"241":0,"242":0,"246":0,"247":0,"249":0,"250":0,"256":0,"257":0,"259":0,"260":0,"262":0,"264":0,"265":0,"274":0,"288":1,"289":0,"292":0,"293":0,"294":0,"297":0,"298":0,"299":0,"300":0,"303":0,"306":0,"307":0,"313":0,"314":0,"316":0,"317":0,"318":0,"320":0,"323":0,"324":0,"325":0,"326":0,"327":0,"329":0,"330":0,"331":0,"332":0,"336":0,"343":0,"344":0,"345":0,"348":0,"355":0,"356":0,"357":0,"358":0,"362":0,"366":0,"367":0,"376":0,"389":1,"390":0,"392":0,"393":0,"394":0,"396":0,"397":0,"399":0,"400":0,"404":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/model/lib/associationMethods/remove.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/model/lib/associationMethods/remove.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":1,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":1,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":1,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":30},"end":{"line":18,"column":71}}},"2":{"name":"(anonymous_2)","line":57,"loc":{"start":{"line":57,"column":34},"end":{"line":57,"column":63}}},"3":{"name":"(anonymous_3)","line":81,"loc":{"start":{"line":81,"column":48},"end":{"line":81,"column":77}}},"4":{"name":"(anonymous_4)","line":84,"loc":{"start":{"line":84,"column":36},"end":{"line":84,"column":67}}},"5":{"name":"(anonymous_5)","line":88,"loc":{"start":{"line":88,"column":2},"end":{"line":88,"column":16}}},"6":{"name":"(anonymous_6)","line":106,"loc":{"start":{"line":106,"column":38},"end":{"line":106,"column":72}}},"7":{"name":"(anonymous_7)","line":117,"loc":{"start":{"line":117,"column":31},"end":{"line":117,"column":61}}},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":32},"end":{"line":133,"column":95}}},"9":{"name":"(anonymous_9)","line":178,"loc":{"start":{"line":178,"column":39},"end":{"line":178,"column":53}}},"10":{"name":"(anonymous_10)","line":205,"loc":{"start":{"line":205,"column":38},"end":{"line":205,"column":52}}},"11":{"name":"(anonymous_11)","line":227,"loc":{"start":{"line":227,"column":36},"end":{"line":227,"column":81}}},"12":{"name":"(anonymous_12)","line":257,"loc":{"start":{"line":257,"column":31},"end":{"line":257,"column":45}}},"13":{"name":"(anonymous_13)","line":280,"loc":{"start":{"line":280,"column":38},"end":{"line":280,"column":59}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":26}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":29}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":46}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":49}},"5":{"start":{"line":18,"column":0},"end":{"line":47,"column":2}},"6":{"start":{"line":20,"column":2},"end":{"line":20,"column":31}},"7":{"start":{"line":21,"column":2},"end":{"line":21,"column":21}},"8":{"start":{"line":22,"column":2},"end":{"line":22,"column":31}},"9":{"start":{"line":23,"column":2},"end":{"line":23,"column":25}},"10":{"start":{"line":25,"column":2},"end":{"line":25,"column":32}},"11":{"start":{"line":26,"column":2},"end":{"line":26,"column":79}},"12":{"start":{"line":28,"column":2},"end":{"line":28,"column":60}},"13":{"start":{"line":30,"column":2},"end":{"line":33,"column":3}},"14":{"start":{"line":31,"column":4},"end":{"line":32,"column":79}},"15":{"start":{"line":35,"column":2},"end":{"line":38,"column":3}},"16":{"start":{"line":36,"column":4},"end":{"line":37,"column":90}},"17":{"start":{"line":46,"column":2},"end":{"line":46,"column":56}},"18":{"start":{"line":57,"column":0},"end":{"line":71,"column":2}},"19":{"start":{"line":58,"column":2},"end":{"line":58,"column":24}},"20":{"start":{"line":60,"column":2},"end":{"line":65,"column":3}},"21":{"start":{"line":61,"column":4},"end":{"line":64,"column":5}},"22":{"start":{"line":62,"column":6},"end":{"line":62,"column":29}},"23":{"start":{"line":63,"column":6},"end":{"line":63,"column":12}},"24":{"start":{"line":68,"column":2},"end":{"line":68,"column":69}},"25":{"start":{"line":68,"column":51},"end":{"line":68,"column":69}},"26":{"start":{"line":70,"column":2},"end":{"line":70,"column":20}},"27":{"start":{"line":81,"column":0},"end":{"line":95,"column":2}},"28":{"start":{"line":82,"column":2},"end":{"line":82,"column":18}},"29":{"start":{"line":84,"column":2},"end":{"line":94,"column":5}},"30":{"start":{"line":85,"column":4},"end":{"line":85,"column":82}},"31":{"start":{"line":89,"column":4},"end":{"line":91,"column":5}},"32":{"start":{"line":90,"column":6},"end":{"line":90,"column":47}},"33":{"start":{"line":93,"column":4},"end":{"line":93,"column":9}},"34":{"start":{"line":106,"column":0},"end":{"line":121,"column":2}},"35":{"start":{"line":107,"column":2},"end":{"line":107,"column":18}},"36":{"start":{"line":111,"column":2},"end":{"line":111,"column":51}},"37":{"start":{"line":112,"column":2},"end":{"line":112,"column":58}},"38":{"start":{"line":113,"column":2},"end":{"line":113,"column":83}},"39":{"start":{"line":114,"column":2},"end":{"line":114,"column":90}},"40":{"start":{"line":117,"column":2},"end":{"line":119,"column":9}},"41":{"start":{"line":118,"column":4},"end":{"line":118,"column":85}},"42":{"start":{"line":133,"column":0},"end":{"line":192,"column":2}},"43":{"start":{"line":134,"column":2},"end":{"line":134,"column":18}},"44":{"start":{"line":137,"column":2},"end":{"line":137,"column":67}},"45":{"start":{"line":139,"column":2},"end":{"line":148,"column":3}},"46":{"start":{"line":140,"column":4},"end":{"line":145,"column":7}},"47":{"start":{"line":147,"column":4},"end":{"line":147,"column":16}},"48":{"start":{"line":151,"column":2},"end":{"line":151,"column":84}},"49":{"start":{"line":152,"column":2},"end":{"line":152,"column":66}},"50":{"start":{"line":155,"column":2},"end":{"line":158,"column":3}},"51":{"start":{"line":156,"column":4},"end":{"line":156,"column":99}},"52":{"start":{"line":157,"column":4},"end":{"line":157,"column":84}},"53":{"start":{"line":161,"column":2},"end":{"line":161,"column":84}},"54":{"start":{"line":162,"column":2},"end":{"line":162,"column":67}},"55":{"start":{"line":164,"column":2},"end":{"line":168,"column":3}},"56":{"start":{"line":165,"column":4},"end":{"line":167,"column":34}},"57":{"start":{"line":171,"column":2},"end":{"line":171,"column":20}},"58":{"start":{"line":172,"column":2},"end":{"line":172,"column":19}},"59":{"start":{"line":174,"column":2},"end":{"line":174,"column":43}},"60":{"start":{"line":175,"column":2},"end":{"line":175,"column":36}},"61":{"start":{"line":176,"column":2},"end":{"line":176,"column":31}},"62":{"start":{"line":178,"column":2},"end":{"line":191,"column":5}},"63":{"start":{"line":180,"column":4},"end":{"line":188,"column":5}},"64":{"start":{"line":181,"column":6},"end":{"line":187,"column":9}},"65":{"start":{"line":190,"column":4},"end":{"line":190,"column":9}},"66":{"start":{"line":205,"column":0},"end":{"line":215,"column":2}},"67":{"start":{"line":206,"column":2},"end":{"line":206,"column":31}},"68":{"start":{"line":209,"column":2},"end":{"line":209,"column":74}},"69":{"start":{"line":209,"column":50},"end":{"line":209,"column":74}},"70":{"start":{"line":212,"column":2},"end":{"line":212,"column":75}},"71":{"start":{"line":212,"column":51},"end":{"line":212,"column":75}},"72":{"start":{"line":214,"column":2},"end":{"line":214,"column":26}},"73":{"start":{"line":227,"column":0},"end":{"line":270,"column":2}},"74":{"start":{"line":228,"column":2},"end":{"line":228,"column":18}},"75":{"start":{"line":231,"column":2},"end":{"line":231,"column":98}},"76":{"start":{"line":232,"column":2},"end":{"line":232,"column":123}},"77":{"start":{"line":233,"column":2},"end":{"line":233,"column":46}},"78":{"start":{"line":236,"column":2},"end":{"line":243,"column":3}},"79":{"start":{"line":237,"column":4},"end":{"line":237,"column":163}},"80":{"start":{"line":238,"column":4},"end":{"line":240,"column":5}},"81":{"start":{"line":239,"column":6},"end":{"line":239,"column":98}},"82":{"start":{"line":242,"column":4},"end":{"line":242,"column":30}},"83":{"start":{"line":245,"column":2},"end":{"line":249,"column":3}},"84":{"start":{"line":246,"column":4},"end":{"line":248,"column":34}},"85":{"start":{"line":252,"column":2},"end":{"line":252,"column":20}},"86":{"start":{"line":253,"column":2},"end":{"line":253,"column":32}},"87":{"start":{"line":254,"column":2},"end":{"line":254,"column":55}},"88":{"start":{"line":257,"column":2},"end":{"line":269,"column":5}},"89":{"start":{"line":259,"column":4},"end":{"line":266,"column":5}},"90":{"start":{"line":260,"column":6},"end":{"line":265,"column":9}},"91":{"start":{"line":268,"column":4},"end":{"line":268,"column":9}},"92":{"start":{"line":280,"column":0},"end":{"line":296,"column":2}},"93":{"start":{"line":281,"column":2},"end":{"line":281,"column":28}},"94":{"start":{"line":283,"column":2},"end":{"line":293,"column":3}},"95":{"start":{"line":284,"column":4},"end":{"line":284,"column":48}},"96":{"start":{"line":285,"column":4},"end":{"line":285,"column":44}},"97":{"start":{"line":287,"column":4},"end":{"line":287,"column":54}},"98":{"start":{"line":287,"column":45},"end":{"line":287,"column":54}},"99":{"start":{"line":288,"column":4},"end":{"line":288,"column":55}},"100":{"start":{"line":290,"column":4},"end":{"line":292,"column":5}},"101":{"start":{"line":291,"column":6},"end":{"line":291,"column":39}},"102":{"start":{"line":295,"column":2},"end":{"line":295,"column":24}}},"branchMap":{"1":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":2},"end":{"line":30,"column":2}},{"start":{"line":30,"column":2},"end":{"line":30,"column":2}}]},"2":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":2},"end":{"line":35,"column":2}},{"start":{"line":35,"column":2},"end":{"line":35,"column":2}}]},"3":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":4},"end":{"line":61,"column":4}},{"start":{"line":61,"column":4},"end":{"line":61,"column":4}}]},"4":{"line":61,"type":"binary-expr","locations":[{"start":{"line":61,"column":8},"end":{"line":61,"column":59}},{"start":{"line":61,"column":63},"end":{"line":61,"column":95}}]},"5":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":2},"end":{"line":68,"column":2}},{"start":{"line":68,"column":2},"end":{"line":68,"column":2}}]},"6":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":6},"end":{"line":68,"column":17}},{"start":{"line":68,"column":21},"end":{"line":68,"column":49}}]},"7":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":4},"end":{"line":89,"column":4}},{"start":{"line":89,"column":4},"end":{"line":89,"column":4}}]},"8":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":8},"end":{"line":89,"column":11}},{"start":{"line":89,"column":15},"end":{"line":89,"column":49}}]},"9":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":2},"end":{"line":139,"column":2}},{"start":{"line":139,"column":2},"end":{"line":139,"column":2}}]},"10":{"line":152,"type":"binary-expr","locations":[{"start":{"line":152,"column":22},"end":{"line":152,"column":42}},{"start":{"line":152,"column":46},"end":{"line":152,"column":65}}]},"11":{"line":155,"type":"if","locations":[{"start":{"line":155,"column":2},"end":{"line":155,"column":2}},{"start":{"line":155,"column":2},"end":{"line":155,"column":2}}]},"12":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":2},"end":{"line":164,"column":2}},{"start":{"line":164,"column":2},"end":{"line":164,"column":2}}]},"13":{"line":180,"type":"if","locations":[{"start":{"line":180,"column":4},"end":{"line":180,"column":4}},{"start":{"line":180,"column":4},"end":{"line":180,"column":4}}]},"14":{"line":209,"type":"if","locations":[{"start":{"line":209,"column":2},"end":{"line":209,"column":2}},{"start":{"line":209,"column":2},"end":{"line":209,"column":2}}]},"15":{"line":209,"type":"binary-expr","locations":[{"start":{"line":209,"column":6},"end":{"line":209,"column":21}},{"start":{"line":209,"column":25},"end":{"line":209,"column":48}}]},"16":{"line":212,"type":"if","locations":[{"start":{"line":212,"column":2},"end":{"line":212,"column":2}},{"start":{"line":212,"column":2},"end":{"line":212,"column":2}}]},"17":{"line":212,"type":"binary-expr","locations":[{"start":{"line":212,"column":6},"end":{"line":212,"column":9}},{"start":{"line":212,"column":13},"end":{"line":212,"column":49}}]},"18":{"line":232,"type":"binary-expr","locations":[{"start":{"line":232,"column":27},"end":{"line":232,"column":72}},{"start":{"line":232,"column":76},"end":{"line":232,"column":122}}]},"19":{"line":236,"type":"if","locations":[{"start":{"line":236,"column":2},"end":{"line":236,"column":2}},{"start":{"line":236,"column":2},"end":{"line":236,"column":2}}]},"20":{"line":237,"type":"binary-expr","locations":[{"start":{"line":237,"column":19},"end":{"line":237,"column":98}},{"start":{"line":237,"column":102},"end":{"line":237,"column":162}}]},"21":{"line":238,"type":"if","locations":[{"start":{"line":238,"column":4},"end":{"line":238,"column":4}},{"start":{"line":238,"column":4},"end":{"line":238,"column":4}}]},"22":{"line":245,"type":"if","locations":[{"start":{"line":245,"column":2},"end":{"line":245,"column":2}},{"start":{"line":245,"column":2},"end":{"line":245,"column":2}}]},"23":{"line":259,"type":"if","locations":[{"start":{"line":259,"column":4},"end":{"line":259,"column":4}},{"start":{"line":259,"column":4},"end":{"line":259,"column":4}}]},"24":{"line":287,"type":"if","locations":[{"start":{"line":287,"column":4},"end":{"line":287,"column":4}},{"start":{"line":287,"column":4},"end":{"line":287,"column":4}}]},"25":{"line":290,"type":"if","locations":[{"start":{"line":290,"column":4},"end":{"line":290,"column":4}},{"start":{"line":290,"column":4},"end":{"line":290,"column":4}}]}},"code":["var _ = require('lodash');","var async = require('async');","var utils = require('../../../utils/helpers');","var hasOwnProperty = utils.object.hasOwnProperty;","","/**"," * Remove associations from a model."," *"," * Accepts a primary key value of an associated record that already exists in the database."," *"," *"," * @param {Object} collection"," * @param {Object} proto"," * @param {Object} records"," * @param {Function} callback"," */","","var Remove = module.exports = function(collection, proto, records, cb) {","","  this.collection = collection;","  this.proto = proto;","  this.failedTransactions = [];","  this.primaryKey = null;","","  var values = proto.toObject();","  var attributes = collection.waterline.schema[collection.identity].attributes;","","  this.primaryKey = this.findPrimaryKey(attributes, values);","","  if (!this.primaryKey) {","    return cb(new Error('No Primary Key set to associate the record with! ' +","      'Try setting an attribute as a primary key or include an ID property.'));","  }","","  if (!proto.toObject()[this.primaryKey]) {","    return cb(new Error('No Primary Key set to associate ' +","      'the record with! Primary Key must have a value, it can\\'t be an optional value.'));","  }","","  // Loop through each of the associations on this model and remove any associations","  // that have been specified. Do this in series and limit the actual saves to 10","  // at a time so that connection pools are not exhausted.","  //","  // In the future when transactions are available this will all be done on a single","  // connection and can be re-written.","  this.removeCollectionAssociations(records, proto, cb);","};","","/**"," * Find Primary Key"," *"," * @param {Object} attributes"," * @param {Object} values"," * @api private"," */","","Remove.prototype.findPrimaryKey = function(attributes, values) {","  var primaryKey = null;","","  for (var attribute in attributes) {","    if (hasOwnProperty(attributes[attribute], 'primaryKey') && attributes[attribute].primaryKey) {","      primaryKey = attribute;","      break;","    }","  }","","  // If no primary key check for an ID property","  if (!primaryKey && hasOwnProperty(values, 'id')) primaryKey = 'id';","","  return primaryKey;","};","","/**"," * Remove Collection Associations"," *"," * @param {Object} records"," * @param {Function} callback"," * @api private"," */","","Remove.prototype.removeCollectionAssociations = function(records, proto, cb) {","  var self = this;","","  async.eachSeries(_.keys(records), function(associationKey, next) {","    self.removeAssociations(associationKey, records[associationKey], proto, next);","  },","","  function(err) {","    if (err || self.failedTransactions.length > 0) {","      return cb(null, self.failedTransactions);","    }","","    cb();","  });","};","","/**"," * Remove Associations"," *"," * @param {String} key"," * @param {Array} records"," * @param {Function} callback"," * @api private"," */","","Remove.prototype.removeAssociations = function(key, records, proto, cb) {","  var self = this;","","  // Grab the collection the attribute references","  // this allows us to make a query on it","  var attribute = this.collection._attributes[key];","  var collectionName = attribute.collection.toLowerCase();","  var associatedCollection = this.collection.waterline.collections[collectionName];","  var schema = this.collection.waterline.schema[this.collection.identity].attributes[key];","","  // Limit Removes to 10 at a time to prevent the connection pool from being exhausted","  async.eachLimit(records, 10, function(associationId, next) {","    self.removeRecord(associatedCollection, schema, associationId, key, proto, next);","  }, cb);","","};","","/**"," * Remove A Single Record"," *"," * @param {Object} collection"," * @param {Object} attribute"," * @param {Object} values"," * @param {Function} callback"," * @api private"," */","","Remove.prototype.removeRecord = function(collection, attribute, associationId, key, proto, cb) {","  var self = this;","","  // Validate `values` is a correct primary key format","  var validAssociationKey = this.validatePrimaryKey(associationId);","","  if (!validAssociationKey) {","    this.failedTransactions.push({","      type: 'remove',","      collection: collection.identity,","      values: associationId,","      err: new Error('Remove association only accepts a single primary key value')","    });","","    return cb();","  }","","  // Check if this is a many-to-many by looking at the junctionTable flag","  var schema = this.collection.waterline.schema[attribute.collection.toLowerCase()];","  var junctionTable = schema.junctionTable || schema.throughTable;","","  // If so build out the criteria and remove a record from the junction table","  if (junctionTable) {","    var joinCollection = this.collection.waterline.collections[attribute.collection.toLowerCase()];","    return this.removeManyToMany(joinCollection, attribute, associationId, key, cb);","  }","","  // Grab the associated collection's primaryKey","  var attributes = this.collection.waterline.schema[collection.identity].attributes;","  var associationKey = this.findPrimaryKey(attributes, attributes);","","  if (!associationKey) {","    return cb(new Error('No Primary Key defined on the child record you ' +","      'are trying to un-associate the record with! Try setting an attribute as a primary key or ' +","      'include an ID property.'));","  }","","  // Build up criteria and updated values used to update the record","  var criteria = {};","  var _values = {};","","  criteria[associationKey] = associationId;","  criteria[attribute.on] = proto.id;","  _values[attribute.on] = null;","","  collection.update(criteria, _values, function(err) {","","    if (err) {","      self.failedTransactions.push({","        type: 'update',","        collection: collection.identity,","        criteria: criteria,","        values: _values,","        err: err","      });","    }","","    cb();","  });","};","","/**"," * Validate A Primary Key"," *"," * Only support primary keys being passed in to the remove function. Check if it's a mongo"," * id or anything that has a toString method."," *"," * @param {Integer|String} key"," * @return {Boolean}"," * @api private"," */","","Remove.prototype.validatePrimaryKey = function(key) {","  var validAssociation = false;","","  // Attempt to see if the value is an ID and resembles a MongoID","  if (_.isString(key) && utils.matchMongoId(key)) validAssociation = true;","","  // Check it can be turned into a string","  if (key && key.toString() !== '[object Object]') validAssociation = true;","","  return validAssociation;","};","","/**"," * Remove A Many To Many Join Table Record"," *"," * @param {Object} collection"," * @param {Object} attribute"," * @param {Object} values"," * @param {Function} callback"," * @api private"," */","","Remove.prototype.removeManyToMany = function(collection, attribute, pk, key, cb) {","  var self = this;","","  // Grab the associated collection's primaryKey","  var collectionAttributes = this.collection.waterline.schema[attribute.collection.toLowerCase()];","  var associationKeyAttr = collectionAttributes.attributes[attribute.on] || collectionAttributes.attributes[attribute.via];","  var associationKey = associationKeyAttr.via;","","  // If this is a throughTable, look into the meta data cache for what key to use","  if (collectionAttributes.throughTable) {","    var cacheKey = collectionAttributes.throughTable[self.collection.adapter.identity + '.' + key] || collectionAttributes.throughTable[attribute.via + '.' + key];","    if (!cacheKey) {","      return cb(new Error('Unable to find the proper cache key in the through table definition'));","    }","","    associationKey = cacheKey;","  }","","  if (!associationKey) {","    return cb(new Error('No Primary Key set on the child record you ' +","      'are trying to associate the record with! Try setting an attribute as a primary key or ' +","      'include an ID property.'));","  }","","  // Build up criteria and updated values used to create the record","  var criteria = {};","  criteria[associationKey] = pk;","  criteria[attribute.on] = this.proto[this.primaryKey];","","  // Run a destroy on the join table record","  collection.destroy(criteria, function(err) {","","    if (err) {","      self.failedTransactions.push({","        type: 'destroy',","        collection: collection.identity,","        criteria: criteria,","        err: err","      });","    }","","    cb();","  });","};","","/**"," * Find Association Key"," *"," * @param {Object} collection"," * @return {String}"," * @api private"," */","","Remove.prototype.findAssociationKey = function(collection) {","  var associationKey = null;","","  for (var attribute in collection.attributes) {","    var attr = collection.attributes[attribute];","    var identity = this.collection.identity;","","    if (!hasOwnProperty(attr, 'references')) continue;","    var attrCollection = attr.references.toLowerCase();","","    if (attrCollection !== identity) {","      associationKey = attr.columnName;","    }","  }","","  return associationKey;","};",""],"l":{"1":1,"2":1,"3":1,"4":1,"18":1,"20":0,"21":0,"22":0,"23":0,"25":0,"26":0,"28":0,"30":0,"31":0,"35":0,"36":0,"46":0,"57":1,"58":0,"60":0,"61":0,"62":0,"63":0,"68":0,"70":0,"81":1,"82":0,"84":0,"85":0,"89":0,"90":0,"93":0,"106":1,"107":0,"111":0,"112":0,"113":0,"114":0,"117":0,"118":0,"133":1,"134":0,"137":0,"139":0,"140":0,"147":0,"151":0,"152":0,"155":0,"156":0,"157":0,"161":0,"162":0,"164":0,"165":0,"171":0,"172":0,"174":0,"175":0,"176":0,"178":0,"180":0,"181":0,"190":0,"205":1,"206":0,"209":0,"212":0,"214":0,"227":1,"228":0,"231":0,"232":0,"233":0,"236":0,"237":0,"238":0,"239":0,"242":0,"245":0,"246":0,"252":0,"253":0,"254":0,"257":0,"259":0,"260":0,"268":0,"280":1,"281":0,"283":0,"284":0,"285":0,"287":0,"288":0,"290":0,"291":0,"295":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/error/WLError.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/error/WLError.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":0,"26":0,"27":0,"28":0,"29":1,"30":0,"31":1,"32":0,"33":1,"34":0,"35":1,"36":0,"37":0,"38":0,"39":0,"40":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"WLError","line":13,"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":29}}},"2":{"name":"(anonymous_2)","line":76,"loc":{"start":{"line":76,"column":0},"end":{"line":76,"column":11}}},"3":{"name":"(anonymous_3)","line":101,"loc":{"start":{"line":101,"column":26},"end":{"line":101,"column":37}}},"4":{"name":"(anonymous_4)","line":111,"loc":{"start":{"line":111,"column":28},"end":{"line":111,"column":39}}},"5":{"name":"(anonymous_5)","line":118,"loc":{"start":{"line":118,"column":29},"end":{"line":118,"column":40}}},"6":{"name":"(anonymous_6)","line":125,"loc":{"start":{"line":125,"column":9},"end":{"line":125,"column":20}}},"7":{"name":"(anonymous_7)","line":128,"loc":{"start":{"line":128,"column":9},"end":{"line":128,"column":25}}},"8":{"name":"(anonymous_8)","line":134,"loc":{"start":{"line":134,"column":9},"end":{"line":134,"column":20}}},"9":{"name":"(anonymous_9)","line":137,"loc":{"start":{"line":137,"column":9},"end":{"line":137,"column":25}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":27}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":26}},"3":{"start":{"line":13,"column":0},"end":{"line":50,"column":1}},"4":{"start":{"line":14,"column":2},"end":{"line":14,"column":28}},"5":{"start":{"line":17,"column":2},"end":{"line":17,"column":35}},"6":{"start":{"line":18,"column":2},"end":{"line":18,"column":29}},"7":{"start":{"line":22,"column":2},"end":{"line":26,"column":3}},"8":{"start":{"line":23,"column":4},"end":{"line":23,"column":33}},"9":{"start":{"line":25,"column":4},"end":{"line":25,"column":26}},"10":{"start":{"line":29,"column":2},"end":{"line":29,"column":72}},"11":{"start":{"line":34,"column":2},"end":{"line":44,"column":3}},"12":{"start":{"line":35,"column":4},"end":{"line":35,"column":38}},"13":{"start":{"line":38,"column":9},"end":{"line":44,"column":3}},"14":{"start":{"line":39,"column":4},"end":{"line":39,"column":49}},"15":{"start":{"line":42,"column":9},"end":{"line":44,"column":3}},"16":{"start":{"line":43,"column":4},"end":{"line":43,"column":52}},"17":{"start":{"line":47,"column":2},"end":{"line":49,"column":3}},"18":{"start":{"line":48,"column":4},"end":{"line":48,"column":54}},"19":{"start":{"line":52,"column":0},"end":{"line":52,"column":30}},"20":{"start":{"line":55,"column":0},"end":{"line":55,"column":31}},"21":{"start":{"line":56,"column":0},"end":{"line":56,"column":37}},"22":{"start":{"line":57,"column":0},"end":{"line":57,"column":61}},"23":{"start":{"line":58,"column":0},"end":{"line":58,"column":31}},"24":{"start":{"line":74,"column":0},"end":{"line":88,"column":2}},"25":{"start":{"line":77,"column":2},"end":{"line":82,"column":4}},"26":{"start":{"line":85,"column":2},"end":{"line":85,"column":31}},"27":{"start":{"line":85,"column":16},"end":{"line":85,"column":31}},"28":{"start":{"line":87,"column":2},"end":{"line":87,"column":13}},"29":{"start":{"line":101,"column":0},"end":{"line":103,"column":2}},"30":{"start":{"line":102,"column":2},"end":{"line":102,"column":24}},"31":{"start":{"line":111,"column":0},"end":{"line":113,"column":2}},"32":{"start":{"line":112,"column":2},"end":{"line":112,"column":104}},"33":{"start":{"line":118,"column":0},"end":{"line":120,"column":2}},"34":{"start":{"line":119,"column":2},"end":{"line":119,"column":78}},"35":{"start":{"line":122,"column":0},"end":{"line":141,"column":3}},"36":{"start":{"line":126,"column":6},"end":{"line":126,"column":88}},"37":{"start":{"line":129,"column":6},"end":{"line":129,"column":28}},"38":{"start":{"line":135,"column":6},"end":{"line":135,"column":48}},"39":{"start":{"line":138,"column":6},"end":{"line":138,"column":30}},"40":{"start":{"line":143,"column":0},"end":{"line":143,"column":25}}},"branchMap":{"1":{"line":17,"type":"binary-expr","locations":[{"start":{"line":17,"column":2},"end":{"line":17,"column":12}},{"start":{"line":17,"column":17},"end":{"line":17,"column":33}}]},"2":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":2},"end":{"line":22,"column":2}},{"start":{"line":22,"column":2},"end":{"line":22,"column":2}}]},"3":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":6},"end":{"line":22,"column":36}},{"start":{"line":22,"column":40},"end":{"line":22,"column":75}}]},"4":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":2},"end":{"line":34,"column":2}},{"start":{"line":34,"column":2},"end":{"line":34,"column":2}}]},"5":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":9},"end":{"line":38,"column":9}},{"start":{"line":38,"column":9},"end":{"line":38,"column":9}}]},"6":{"line":38,"type":"binary-expr","locations":[{"start":{"line":38,"column":13},"end":{"line":38,"column":31}},{"start":{"line":38,"column":35},"end":{"line":38,"column":67}}]},"7":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":9},"end":{"line":42,"column":9}},{"start":{"line":42,"column":9},"end":{"line":42,"column":9}}]},"8":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":2},"end":{"line":47,"column":2}},{"start":{"line":47,"column":2},"end":{"line":47,"column":2}}]},"9":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":2},"end":{"line":85,"column":2}},{"start":{"line":85,"column":2},"end":{"line":85,"column":2}}]},"10":{"line":135,"type":"binary-expr","locations":[{"start":{"line":135,"column":13},"end":{"line":135,"column":28}},{"start":{"line":135,"column":32},"end":{"line":135,"column":47}}]}},"code":["var util = require('util');","var _ = require('lodash');","","/**"," * WLError"," *"," * All errors passed to a query callback in Waterline extend"," * from this base error class."," *"," * @param  {Object} properties"," * @constructor {WLError}"," */","function WLError(properties) {","  WLError.super_.call(this);","","  // Fold defined properties into the new WLError instance.","  properties || (properties = { });","  _.extend(this, properties);","","  // Generate stack trace","  // (or use `originalError` if it is a true error instance)","  if (_.isObject(this.originalError) && this.originalError instanceof Error) {","    this._e = this.originalError;","  } else {","    this._e = new Error();","  }","","  // Doctor up a modified version of the stack trace called `rawStack`:","  this.rawStack = (this._e.stack.replace(/^Error(\\r|\\n)*(\\r|\\n)*/, ''));","","  // Customize `details`:","  // Try to dress up the wrapped \"original\" error as much as possible.","  // @type {String} a detailed explanation of this error","  if (_.isString(this.originalError)) {","    this.details = this.originalError;","","  // Run toString() on Errors:","  } else if (this.originalError && util.isError(this.originalError)) {","    this.details = this.originalError.toString();","","  // But for other objects, use util.inspect()","  } else if (this.originalError) {","    this.details = util.inspect(this.originalError);","  }","","  // If `details` is set, prepend it with \"Details:\"","  if (this.details) {","    this.details = 'Details:  ' + this.details + '\\n';","  }","}","","util.inherits(WLError, Error);","","// Default properties","WLError.prototype.status = 500;","WLError.prototype.code = 'E_UNKNOWN';","WLError.prototype.reason = 'Encountered an unexpected error';","WLError.prototype.details = '';","","/**"," * Override JSON serialization."," * (i.e. when this error is passed to `res.json()` or `JSON.stringify`)"," *"," * For example:"," * ```json"," * {"," *   status: 500,"," *   code: 'E_UNKNOWN'"," * }"," * ```"," *"," * @return {Object}"," */","WLError.prototype.toJSON =","WLError.prototype.toPOJO =","function() {","  var obj = {","    error: this.code,","    status: this.status,","    summary: this.reason,","    raw: this.originalError","  };","","  // Only include `raw` if its truthy.","  if (!obj.raw) delete obj.raw;","","  return obj;","};","","/**"," * Override output for `sails.log[.*]`"," *"," * @return {String}"," *"," * For example:"," * ```sh"," * Waterline: ORM encountered an unexpected error:"," * { ValidationError: { name: [ [Object], [Object] ] } }"," * ```"," */","WLError.prototype.toLog = function() {","  return this.inspect();","};","","/**"," * Override output for `util.inspect`"," * (also when this error is logged using `console.log`)"," *"," * @return {String}"," */","WLError.prototype.inspect = function() {","  return util.format('Error (%s) :: %s\\n%s\\n\\n%s', this.code, this.reason, this.rawStack, this.details);","};","","/**"," * @return {String}"," */","WLError.prototype.toString = function() {","  return util.format('[Error (%s) %s]', this.code, this.reason, this.details);","};","","Object.defineProperties(WLError.prototype, {","  stack: {","    enumerable: true,","    get: function() {","      return util.format('Error (%s) :: %s\\n%s', this.code, this.reason, this.rawStack);","    },","    set: function(value) {","      this.rawStack = value;","    }","  },","  message: {","    enumerable: true,","    get: function() {","      return this.rawMessage || this.toString();","    },","    set: function(value) {","      this.rawMessage = value;","    }","  }","});","","module.exports = WLError;",""],"l":{"1":1,"2":1,"13":1,"14":0,"17":0,"18":0,"22":0,"23":0,"25":0,"29":0,"34":0,"35":0,"38":0,"39":0,"42":0,"43":0,"47":0,"48":0,"52":1,"55":1,"56":1,"57":1,"58":1,"74":1,"77":0,"85":0,"87":0,"101":1,"102":0,"111":1,"112":0,"118":1,"119":0,"122":1,"126":0,"129":0,"135":0,"138":0,"143":1}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/model/lib/internalMethods/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/model/lib/internalMethods/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":9,"column":2}}},"branchMap":{},"code":["","/**"," * Export Internal Methods"," */","","module.exports = {","  normalizeAssociations: require('./normalizeAssociations'),","  defineAssociations: require('./defineAssociations')","};",""],"l":{"6":1}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/model/lib/internalMethods/normalizeAssociations.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/model/lib/internalMethods/normalizeAssociations.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":13,"loc":{"start":{"line":13,"column":33},"end":{"line":13,"column":58}}},"2":{"name":"(anonymous_2)","line":30,"loc":{"start":{"line":30,"column":34},"end":{"line":30,"column":55}}},"3":{"name":"(anonymous_3)","line":50,"loc":{"start":{"line":50,"column":29},"end":{"line":50,"column":50}}}},"statementMap":{"1":{"start":{"line":13,"column":0},"end":{"line":21,"column":2}},"2":{"start":{"line":15,"column":2},"end":{"line":15,"column":21}},"3":{"start":{"line":17,"column":2},"end":{"line":17,"column":84}},"4":{"start":{"line":19,"column":2},"end":{"line":19,"column":31}},"5":{"start":{"line":20,"column":2},"end":{"line":20,"column":26}},"6":{"start":{"line":30,"column":0},"end":{"line":41,"column":2}},"7":{"start":{"line":31,"column":2},"end":{"line":40,"column":3}},"8":{"start":{"line":34,"column":4},"end":{"line":34,"column":52}},"9":{"start":{"line":34,"column":43},"end":{"line":34,"column":52}},"10":{"start":{"line":37,"column":4},"end":{"line":39,"column":5}},"11":{"start":{"line":38,"column":6},"end":{"line":38,"column":54}},"12":{"start":{"line":50,"column":0},"end":{"line":61,"column":2}},"13":{"start":{"line":51,"column":2},"end":{"line":60,"column":3}},"14":{"start":{"line":54,"column":4},"end":{"line":54,"column":47}},"15":{"start":{"line":54,"column":38},"end":{"line":54,"column":47}},"16":{"start":{"line":57,"column":4},"end":{"line":59,"column":5}},"17":{"start":{"line":58,"column":6},"end":{"line":58,"column":55}}},"branchMap":{"1":{"line":17,"type":"binary-expr","locations":[{"start":{"line":17,"column":19},"end":{"line":17,"column":77}},{"start":{"line":17,"column":81},"end":{"line":17,"column":83}}]},"2":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":4},"end":{"line":34,"column":4}},{"start":{"line":34,"column":4},"end":{"line":34,"column":4}}]},"3":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":4},"end":{"line":37,"column":4}},{"start":{"line":37,"column":4},"end":{"line":37,"column":4}}]},"4":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":8},"end":{"line":37,"column":29}},{"start":{"line":37,"column":33},"end":{"line":37,"column":70}}]},"5":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":4},"end":{"line":54,"column":4}},{"start":{"line":54,"column":4},"end":{"line":54,"column":4}}]},"6":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":4},"end":{"line":57,"column":4}},{"start":{"line":57,"column":4},"end":{"line":57,"column":4}}]},"7":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":8},"end":{"line":57,"column":29}},{"start":{"line":57,"column":33},"end":{"line":57,"column":69}}]}},"code":["","/**"," * Check and normalize belongs_to and has_many association keys"," *"," * Ensures that a belongs_to association is an object and that a has_many association"," * is an array."," *"," * @param {Object} context,"," * @param {Object} proto"," * @api private"," */","","var Normalize = module.exports = function(context, proto) {","","  this.proto = proto;","","  var attributes = context.waterline.collections[context.identity].attributes || {};","","  this.collections(attributes);","  this.models(attributes);","};","","/**"," * Normalize Collection Attribute to Array"," *"," * @param {Object} attributes"," * @api private"," */","","Normalize.prototype.collections = function(attributes) {","  for (var attribute in attributes) {","","    // If attribute is not a collection, it doesn't need normalizing","    if (!attributes[attribute].collection) continue;","","    // Sets the attribute as an array if it's not already","    if (this.proto[attribute] && !Array.isArray(this.proto[attribute])) {","      this.proto[attribute] = [this.proto[attribute]];","    }","  }","};","","/**"," * Normalize Model Attribute to Object"," *"," * @param {Object} attributes"," * @api private"," */","","Normalize.prototype.models = function(attributes) {","  for (var attribute in attributes) {","","    // If attribute is not a model, it doesn't need normalizing","    if (!attributes[attribute].model) continue;","","    // Sets the attribute to the first item in the array if it's an array","    if (this.proto[attribute] && Array.isArray(this.proto[attribute])) {","      this.proto[attribute] = this.proto[attribute][0];","    }","  }","};",""],"l":{"13":1,"15":0,"17":0,"19":0,"20":0,"30":1,"31":0,"34":0,"37":0,"38":0,"50":1,"51":0,"54":0,"57":0,"58":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/model/lib/internalMethods/defineAssociations.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/model/lib/internalMethods/defineAssociations.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":1,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"(anonymous_1)","line":20,"loc":{"start":{"line":20,"column":30},"end":{"line":20,"column":55}}},"2":{"name":"(anonymous_2)","line":48,"loc":{"start":{"line":48,"column":22},"end":{"line":48,"column":43}}},"3":{"name":"(anonymous_3)","line":53,"loc":{"start":{"line":53,"column":17},"end":{"line":53,"column":33}}},"4":{"name":"(anonymous_4)","line":66,"loc":{"start":{"line":66,"column":34},"end":{"line":66,"column":55}}},"5":{"name":"(anonymous_5)","line":86,"loc":{"start":{"line":86,"column":29},"end":{"line":86,"column":50}}},"6":{"name":"(anonymous_6)","line":105,"loc":{"start":{"line":105,"column":40},"end":{"line":105,"column":61}}},"7":{"name":"(anonymous_7)","line":113,"loc":{"start":{"line":113,"column":9},"end":{"line":113,"column":23}}},"8":{"name":"(anonymous_8)","line":114,"loc":{"start":{"line":114,"column":9},"end":{"line":114,"column":20}}},"9":{"name":"(anonymous_9)","line":127,"loc":{"start":{"line":127,"column":42},"end":{"line":127,"column":58}}}},"statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":6,"column":26}},"2":{"start":{"line":7,"column":0},"end":{"line":7,"column":44}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":46}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":49}},"5":{"start":{"line":20,"column":0},"end":{"line":56,"column":2}},"6":{"start":{"line":21,"column":2},"end":{"line":21,"column":18}},"7":{"start":{"line":23,"column":2},"end":{"line":23,"column":21}},"8":{"start":{"line":26,"column":2},"end":{"line":30,"column":5}},"9":{"start":{"line":35,"column":2},"end":{"line":39,"column":5}},"10":{"start":{"line":41,"column":2},"end":{"line":41,"column":45}},"11":{"start":{"line":42,"column":2},"end":{"line":42,"column":52}},"12":{"start":{"line":43,"column":2},"end":{"line":43,"column":42}},"13":{"start":{"line":45,"column":2},"end":{"line":45,"column":62}},"14":{"start":{"line":45,"column":55},"end":{"line":45,"column":62}},"15":{"start":{"line":48,"column":2},"end":{"line":50,"column":5}},"16":{"start":{"line":49,"column":4},"end":{"line":49,"column":42}},"17":{"start":{"line":53,"column":2},"end":{"line":55,"column":5}},"18":{"start":{"line":54,"column":4},"end":{"line":54,"column":39}},"19":{"start":{"line":66,"column":0},"end":{"line":76,"column":2}},"20":{"start":{"line":67,"column":2},"end":{"line":67,"column":23}},"21":{"start":{"line":70,"column":2},"end":{"line":73,"column":3}},"22":{"start":{"line":71,"column":4},"end":{"line":71,"column":71}},"23":{"start":{"line":71,"column":62},"end":{"line":71,"column":71}},"24":{"start":{"line":72,"column":4},"end":{"line":72,"column":45}},"25":{"start":{"line":75,"column":2},"end":{"line":75,"column":21}},"26":{"start":{"line":86,"column":0},"end":{"line":96,"column":2}},"27":{"start":{"line":87,"column":2},"end":{"line":87,"column":18}},"28":{"start":{"line":90,"column":2},"end":{"line":93,"column":3}},"29":{"start":{"line":91,"column":4},"end":{"line":91,"column":66}},"30":{"start":{"line":91,"column":57},"end":{"line":91,"column":66}},"31":{"start":{"line":92,"column":4},"end":{"line":92,"column":90}},"32":{"start":{"line":95,"column":2},"end":{"line":95,"column":16}},"33":{"start":{"line":105,"column":0},"end":{"line":118,"column":2}},"34":{"start":{"line":106,"column":2},"end":{"line":106,"column":18}},"35":{"start":{"line":109,"column":2},"end":{"line":109,"column":58}},"36":{"start":{"line":112,"column":2},"end":{"line":117,"column":5}},"37":{"start":{"line":113,"column":25},"end":{"line":113,"column":76}},"38":{"start":{"line":114,"column":22},"end":{"line":114,"column":77}},"39":{"start":{"line":127,"column":0},"end":{"line":134,"column":2}},"40":{"start":{"line":130,"column":2},"end":{"line":130,"column":49}},"41":{"start":{"line":133,"column":2},"end":{"line":133,"column":47}}},"branchMap":{"1":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":19},"end":{"line":41,"column":38}},{"start":{"line":41,"column":42},"end":{"line":41,"column":44}}]},"2":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":2},"end":{"line":45,"column":2}},{"start":{"line":45,"column":2},"end":{"line":45,"column":2}}]},"3":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":6},"end":{"line":45,"column":30}},{"start":{"line":45,"column":34},"end":{"line":45,"column":53}}]},"4":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":4},"end":{"line":71,"column":4}},{"start":{"line":71,"column":4},"end":{"line":71,"column":4}}]},"5":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":4},"end":{"line":91,"column":4}},{"start":{"line":91,"column":4},"end":{"line":91,"column":4}}]}},"code":["","/**"," * Module dependencies"," */","","var _ = require('lodash');","var Association = require('../association');","var utils = require('../../../utils/helpers');","var hasOwnProperty = utils.object.hasOwnProperty;","","/**"," * Add association getters and setters for any has_many"," * attributes."," *"," * @param {Object} context"," * @param {Object} proto"," * @api private"," */","","var Define = module.exports = function(context, proto) {","  var self = this;","","  this.proto = proto;","","  // Build Associations Listing","  Object.defineProperty(proto, 'associations', {","    enumerable: false,","    writable: true,","    value: {}","  });","","  // Build associations cache to hold original values.","  // Used to check if values have been mutated and need to be synced when","  // a model.save call is made.","  Object.defineProperty(proto, 'associationsCache', {","    enumerable: false,","    writable: true,","    value: {}","  });","","  var attributes = context._attributes || {};","  var collections = this.collectionKeys(attributes);","  var models = this.modelKeys(attributes);","","  if (collections.length === 0 && models.length === 0) return;","","  // Create an Association getter and setter for each collection","  collections.forEach(function(collection) {","    self.buildHasManyProperty(collection);","  });","","  // Attach Models to the prototype and set in the associations object","  models.forEach(function(model) {","    self.buildBelongsToProperty(model);","  });","};","","/**"," * Find Collection Keys"," *"," * @param {Object} attributes"," * @api private"," * @return {Array}"," */","","Define.prototype.collectionKeys = function(attributes) {","  var collections = [];","","  // Find any collection keys","  for (var attribute in attributes) {","    if (!hasOwnProperty(attributes[attribute], 'collection')) continue;","    collections.push(_.cloneDeep(attribute));","  }","","  return collections;","};","","/**"," * Find Model Keys"," *"," * @param {Object} attributes"," * @api private"," * @return {Array}"," */","","Define.prototype.modelKeys = function(attributes) {","  var models = [];","","  // Find any collection keys","  for (var attribute in attributes) {","    if (!hasOwnProperty(attributes[attribute], 'model')) continue;","    models.push({ key: _.cloneDeep(attribute), val: _.cloneDeep(attributes[attribute]) });","  }","","  return models;","};","","/**"," * Create Getter/Setter for hasMany associations"," *"," * @param {String} collection"," * @api private"," */","","Define.prototype.buildHasManyProperty = function(collection) {","  var self = this;","","  // Attach to a non-enumerable property","  this.proto.associations[collection] = new Association();","","  // Attach getter and setter to the model","  Object.defineProperty(this.proto, collection, {","    set: function(val) { self.proto.associations[collection]._setValue(val); },","    get: function() { return self.proto.associations[collection]._getValue(); },","    enumerable: true,","    configurable: true","  });","};","","/**"," * Add belongsTo attributes to associations object"," *"," * @param {String} collection"," * @api private"," */","","Define.prototype.buildBelongsToProperty = function(model) {","","  // Attach to a non-enumerable property","  this.proto.associations[model.key] = model.val;","","  // Build a cache for this model","  this.proto.associationsCache[model.key] = {};","};",""],"l":{"6":1,"7":1,"8":1,"9":1,"20":1,"21":0,"23":0,"26":0,"35":0,"41":0,"42":0,"43":0,"45":0,"48":0,"49":0,"53":0,"54":0,"66":1,"67":0,"70":0,"71":0,"72":0,"75":0,"86":1,"87":0,"90":0,"91":0,"92":0,"95":0,"105":1,"106":0,"109":0,"112":0,"113":0,"114":0,"127":1,"130":0,"133":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/model/lib/association.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/model/lib/association.js","s":{"1":1,"2":0,"3":0,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"(anonymous_1)","line":6,"loc":{"start":{"line":6,"column":35},"end":{"line":6,"column":46}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":34},"end":{"line":19,"column":50}}},"3":{"name":"(anonymous_3)","line":34,"loc":{"start":{"line":34,"column":34},"end":{"line":34,"column":45}}},"4":{"name":"add","line":42,"loc":{"start":{"line":42,"column":14},"end":{"line":42,"column":32}}},"5":{"name":"(anonymous_5)","line":44,"loc":{"start":{"line":44,"column":18},"end":{"line":44,"column":31}}},"6":{"name":"remove","line":52,"loc":{"start":{"line":52,"column":17},"end":{"line":52,"column":38}}},"7":{"name":"(anonymous_7)","line":54,"loc":{"start":{"line":54,"column":18},"end":{"line":54,"column":31}}}},"statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":10,"column":2}},"2":{"start":{"line":7,"column":2},"end":{"line":7,"column":22}},"3":{"start":{"line":8,"column":2},"end":{"line":8,"column":25}},"4":{"start":{"line":9,"column":2},"end":{"line":9,"column":18}},"5":{"start":{"line":19,"column":0},"end":{"line":26,"column":2}},"6":{"start":{"line":20,"column":2},"end":{"line":23,"column":3}},"7":{"start":{"line":21,"column":4},"end":{"line":21,"column":23}},"8":{"start":{"line":22,"column":4},"end":{"line":22,"column":11}},"9":{"start":{"line":25,"column":2},"end":{"line":25,"column":36}},"10":{"start":{"line":34,"column":0},"end":{"line":63,"column":2}},"11":{"start":{"line":35,"column":2},"end":{"line":35,"column":18}},"12":{"start":{"line":36,"column":2},"end":{"line":36,"column":25}},"13":{"start":{"line":42,"column":2},"end":{"line":50,"column":4}},"14":{"start":{"line":43,"column":4},"end":{"line":49,"column":5}},"15":{"start":{"line":44,"column":6},"end":{"line":46,"column":9}},"16":{"start":{"line":45,"column":8},"end":{"line":45,"column":32}},"17":{"start":{"line":48,"column":6},"end":{"line":48,"column":31}},"18":{"start":{"line":52,"column":2},"end":{"line":60,"column":4}},"19":{"start":{"line":53,"column":4},"end":{"line":59,"column":5}},"20":{"start":{"line":54,"column":6},"end":{"line":56,"column":9}},"21":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"22":{"start":{"line":58,"column":6},"end":{"line":58,"column":34}},"23":{"start":{"line":62,"column":2},"end":{"line":62,"column":15}}},"branchMap":{"1":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":2},"end":{"line":20,"column":2}},{"start":{"line":20,"column":2},"end":{"line":20,"column":2}}]},"2":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":4},"end":{"line":43,"column":4}},{"start":{"line":43,"column":4},"end":{"line":43,"column":4}}]},"3":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":4},"end":{"line":53,"column":4}},{"start":{"line":53,"column":4},"end":{"line":53,"column":4}}]}},"code":["","/**"," * Handles an Association"," */","","var Association = module.exports = function() {","  this.addModels = [];","  this.removeModels = [];","  this.value = [];","};","","/**"," * Set Value"," *"," * @param {Number|Object} value"," * @api private"," */","","Association.prototype._setValue = function(value) {","  if (Array.isArray(value)) {","    this.value = value;","    return;","  }","","  this.value = this.value = [value];","};","","/**"," * Get Value"," *"," * @api private"," */","","Association.prototype._getValue = function() {","  var self = this;","  var value = this.value;","","  // Attach association methods to values array","  // This allows access using the getter and the desired","  // API for synchronously adding and removing associations.","","  value.add = function add(obj) {","    if (Array.isArray(obj)) {","      obj.forEach(function(el) {","        self.addModels.push(el);","      });","    } else {","      self.addModels.push(obj);","    }","  };","","  value.remove = function remove(obj) {","    if (Array.isArray(obj)) {","      obj.forEach(function(el) {","        self.removeModels.push(el);","      });","    } else {","      self.removeModels.push(obj);","    }","  };","","  return value;","};",""],"l":{"6":1,"7":0,"8":0,"9":0,"19":1,"20":0,"21":0,"22":0,"25":0,"34":1,"35":0,"36":0,"42":0,"43":0,"44":0,"45":0,"48":0,"52":0,"53":0,"54":0,"55":0,"58":0,"62":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/core/typecast.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/core/typecast.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":1,"39":0,"40":1,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":1,"49":0,"50":0,"51":0,"52":0,"53":0,"54":1,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":1,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":1,"81":0,"82":0,"83":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0],"7":[0,0],"8":[0,0,0,0,0,0,0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":28},"end":{"line":22,"column":39}}},"2":{"name":"(anonymous_2)","line":36,"loc":{"start":{"line":36,"column":28},"end":{"line":36,"column":44}}},"3":{"name":"(anonymous_3)","line":39,"loc":{"start":{"line":39,"column":29},"end":{"line":39,"column":43}}},"4":{"name":"(anonymous_4)","line":53,"loc":{"start":{"line":53,"column":21},"end":{"line":53,"column":38}}},"5":{"name":"(anonymous_5)","line":60,"loc":{"start":{"line":60,"column":30},"end":{"line":60,"column":44}}},"6":{"name":"string","line":116,"loc":{"start":{"line":116,"column":24},"end":{"line":116,"column":45}}},"7":{"name":"integer","line":129,"loc":{"start":{"line":129,"column":25},"end":{"line":129,"column":54}}},"8":{"name":"float","line":155,"loc":{"start":{"line":155,"column":23},"end":{"line":155,"column":45}}},"9":{"name":"boolean","line":175,"loc":{"start":{"line":175,"column":25},"end":{"line":175,"column":49}}},"10":{"name":"date","line":205,"loc":{"start":{"line":205,"column":22},"end":{"line":205,"column":43}}},"11":{"name":"array","line":227,"loc":{"start":{"line":227,"column":23},"end":{"line":227,"column":45}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":38}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":40}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":49}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":26}},"5":{"start":{"line":22,"column":0},"end":{"line":26,"column":2}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":19}},"7":{"start":{"line":25,"column":2},"end":{"line":25,"column":14}},"8":{"start":{"line":36,"column":0},"end":{"line":42,"column":2}},"9":{"start":{"line":37,"column":2},"end":{"line":37,"column":18}},"10":{"start":{"line":39,"column":2},"end":{"line":41,"column":5}},"11":{"start":{"line":40,"column":4},"end":{"line":40,"column":84}},"12":{"start":{"line":53,"column":0},"end":{"line":106,"column":2}},"13":{"start":{"line":54,"column":2},"end":{"line":54,"column":18}},"14":{"start":{"line":56,"column":2},"end":{"line":58,"column":3}},"15":{"start":{"line":57,"column":4},"end":{"line":57,"column":11}},"16":{"start":{"line":60,"column":2},"end":{"line":103,"column":5}},"17":{"start":{"line":63,"column":4},"end":{"line":63,"column":55}},"18":{"start":{"line":63,"column":36},"end":{"line":63,"column":55}},"19":{"start":{"line":64,"column":4},"end":{"line":66,"column":5}},"20":{"start":{"line":65,"column":6},"end":{"line":65,"column":13}},"21":{"start":{"line":69,"column":4},"end":{"line":69,"column":45}},"22":{"start":{"line":69,"column":38},"end":{"line":69,"column":45}},"23":{"start":{"line":72,"column":4},"end":{"line":72,"column":32}},"24":{"start":{"line":75,"column":4},"end":{"line":102,"column":5}},"25":{"start":{"line":78,"column":8},"end":{"line":78,"column":47}},"26":{"start":{"line":79,"column":8},"end":{"line":79,"column":14}},"27":{"start":{"line":82,"column":8},"end":{"line":82,"column":53}},"28":{"start":{"line":83,"column":8},"end":{"line":83,"column":14}},"29":{"start":{"line":86,"column":8},"end":{"line":86,"column":46}},"30":{"start":{"line":87,"column":8},"end":{"line":87,"column":14}},"31":{"start":{"line":92,"column":8},"end":{"line":92,"column":45}},"32":{"start":{"line":93,"column":8},"end":{"line":93,"column":14}},"33":{"start":{"line":96,"column":8},"end":{"line":96,"column":48}},"34":{"start":{"line":97,"column":8},"end":{"line":97,"column":14}},"35":{"start":{"line":100,"column":8},"end":{"line":100,"column":46}},"36":{"start":{"line":101,"column":8},"end":{"line":101,"column":14}},"37":{"start":{"line":105,"column":2},"end":{"line":105,"column":16}},"38":{"start":{"line":116,"column":0},"end":{"line":118,"column":2}},"39":{"start":{"line":117,"column":2},"end":{"line":117,"column":73}},"40":{"start":{"line":129,"column":0},"end":{"line":145,"column":2}},"41":{"start":{"line":130,"column":2},"end":{"line":130,"column":13}},"42":{"start":{"line":135,"column":2},"end":{"line":135,"column":57}},"43":{"start":{"line":135,"column":33},"end":{"line":135,"column":57}},"44":{"start":{"line":138,"column":2},"end":{"line":142,"column":3}},"45":{"start":{"line":139,"column":4},"end":{"line":139,"column":33}},"46":{"start":{"line":141,"column":4},"end":{"line":141,"column":17}},"47":{"start":{"line":144,"column":2},"end":{"line":144,"column":16}},"48":{"start":{"line":155,"column":0},"end":{"line":165,"column":2}},"49":{"start":{"line":156,"column":2},"end":{"line":156,"column":13}},"50":{"start":{"line":158,"column":2},"end":{"line":162,"column":3}},"51":{"start":{"line":159,"column":4},"end":{"line":159,"column":31}},"52":{"start":{"line":161,"column":4},"end":{"line":161,"column":17}},"53":{"start":{"line":164,"column":2},"end":{"line":164,"column":16}},"54":{"start":{"line":175,"column":0},"end":{"line":195,"column":2}},"55":{"start":{"line":176,"column":2},"end":{"line":176,"column":13}},"56":{"start":{"line":178,"column":2},"end":{"line":182,"column":3}},"57":{"start":{"line":179,"column":4},"end":{"line":179,"column":38}},"58":{"start":{"line":179,"column":26},"end":{"line":179,"column":38}},"59":{"start":{"line":180,"column":4},"end":{"line":180,"column":40}},"60":{"start":{"line":180,"column":27},"end":{"line":180,"column":40}},"61":{"start":{"line":181,"column":4},"end":{"line":181,"column":17}},"62":{"start":{"line":185,"column":2},"end":{"line":189,"column":3}},"63":{"start":{"line":186,"column":4},"end":{"line":186,"column":33}},"64":{"start":{"line":188,"column":4},"end":{"line":188,"column":17}},"65":{"start":{"line":191,"column":2},"end":{"line":191,"column":33}},"66":{"start":{"line":191,"column":20},"end":{"line":191,"column":33}},"67":{"start":{"line":192,"column":2},"end":{"line":192,"column":32}},"68":{"start":{"line":192,"column":20},"end":{"line":192,"column":32}},"69":{"start":{"line":194,"column":2},"end":{"line":194,"column":15}},"70":{"start":{"line":205,"column":0},"end":{"line":217,"column":2}},"71":{"start":{"line":206,"column":2},"end":{"line":206,"column":13}},"72":{"start":{"line":207,"column":2},"end":{"line":213,"column":3}},"73":{"start":{"line":208,"column":4},"end":{"line":208,"column":39}},"74":{"start":{"line":209,"column":9},"end":{"line":213,"column":3}},"75":{"start":{"line":210,"column":4},"end":{"line":210,"column":28}},"76":{"start":{"line":212,"column":4},"end":{"line":212,"column":41}},"77":{"start":{"line":215,"column":2},"end":{"line":215,"column":57}},"78":{"start":{"line":215,"column":44},"end":{"line":215,"column":57}},"79":{"start":{"line":216,"column":2},"end":{"line":216,"column":16}},"80":{"start":{"line":227,"column":0},"end":{"line":230,"column":2}},"81":{"start":{"line":228,"column":2},"end":{"line":228,"column":41}},"82":{"start":{"line":228,"column":28},"end":{"line":228,"column":41}},"83":{"start":{"line":229,"column":2},"end":{"line":229,"column":17}}},"branchMap":{"1":{"line":40,"type":"cond-expr","locations":[{"start":{"line":40,"column":57},"end":{"line":40,"column":72}},{"start":{"line":40,"column":75},"end":{"line":40,"column":83}}]},"2":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":2},"end":{"line":56,"column":2}},{"start":{"line":56,"column":2},"end":{"line":56,"column":2}}]},"3":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":6},"end":{"line":56,"column":26}},{"start":{"line":56,"column":30},"end":{"line":56,"column":45}}]},"4":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":4},"end":{"line":63,"column":4}},{"start":{"line":63,"column":4},"end":{"line":63,"column":4}}]},"5":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":4},"end":{"line":64,"column":4}},{"start":{"line":64,"column":4},"end":{"line":64,"column":4}}]},"6":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":8},"end":{"line":64,"column":41}},{"start":{"line":64,"column":45},"end":{"line":64,"column":65}},{"start":{"line":64,"column":69},"end":{"line":64,"column":97}}]},"7":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":4},"end":{"line":69,"column":4}},{"start":{"line":69,"column":4},"end":{"line":69,"column":4}}]},"8":{"line":75,"type":"switch","locations":[{"start":{"line":76,"column":6},"end":{"line":76,"column":20}},{"start":{"line":77,"column":6},"end":{"line":79,"column":14}},{"start":{"line":81,"column":6},"end":{"line":83,"column":14}},{"start":{"line":85,"column":6},"end":{"line":87,"column":14}},{"start":{"line":89,"column":6},"end":{"line":89,"column":18}},{"start":{"line":90,"column":6},"end":{"line":90,"column":18}},{"start":{"line":91,"column":6},"end":{"line":93,"column":14}},{"start":{"line":95,"column":6},"end":{"line":97,"column":14}},{"start":{"line":99,"column":6},"end":{"line":101,"column":14}}]},"9":{"line":117,"type":"cond-expr","locations":[{"start":{"line":117,"column":47},"end":{"line":117,"column":61}},{"start":{"line":117,"column":64},"end":{"line":117,"column":72}}]},"10":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":2},"end":{"line":135,"column":2}},{"start":{"line":135,"column":2},"end":{"line":135,"column":2}}]},"11":{"line":178,"type":"if","locations":[{"start":{"line":178,"column":2},"end":{"line":178,"column":2}},{"start":{"line":178,"column":2},"end":{"line":178,"column":2}}]},"12":{"line":179,"type":"if","locations":[{"start":{"line":179,"column":4},"end":{"line":179,"column":4}},{"start":{"line":179,"column":4},"end":{"line":179,"column":4}}]},"13":{"line":180,"type":"if","locations":[{"start":{"line":180,"column":4},"end":{"line":180,"column":4}},{"start":{"line":180,"column":4},"end":{"line":180,"column":4}}]},"14":{"line":191,"type":"if","locations":[{"start":{"line":191,"column":2},"end":{"line":191,"column":2}},{"start":{"line":191,"column":2},"end":{"line":191,"column":2}}]},"15":{"line":192,"type":"if","locations":[{"start":{"line":192,"column":2},"end":{"line":192,"column":2}},{"start":{"line":192,"column":2},"end":{"line":192,"column":2}}]},"16":{"line":207,"type":"if","locations":[{"start":{"line":207,"column":2},"end":{"line":207,"column":2}},{"start":{"line":207,"column":2},"end":{"line":207,"column":2}}]},"17":{"line":209,"type":"if","locations":[{"start":{"line":209,"column":9},"end":{"line":209,"column":9}},{"start":{"line":209,"column":9},"end":{"line":209,"column":9}}]},"18":{"line":215,"type":"if","locations":[{"start":{"line":215,"column":2},"end":{"line":215,"column":2}},{"start":{"line":215,"column":2},"end":{"line":215,"column":2}}]},"19":{"line":228,"type":"if","locations":[{"start":{"line":228,"column":2},"end":{"line":228,"column":2}},{"start":{"line":228,"column":2},"end":{"line":228,"column":2}}]}},"code":["/**"," * Module dependencies"," */","","var types = require('../utils/types');","var utils = require('../utils/helpers');","var hasOwnProperty = utils.object.hasOwnProperty;","var _ = require('lodash');","","/**"," * Cast Types"," *"," * Will take values and cast they to the correct type based on the"," * type defined in the schema."," *"," * Especially handy for converting numbers passed as strings to the"," * correct integer type."," *"," * Should be run before sending values to an adapter."," */","","var Cast = module.exports = function() {","  this._types = {};","","  return this;","};","","/**"," * Builds an internal _types object that contains each"," * attribute with it's type. This can later be used to"," * transform values into the correct type."," *"," * @param {Object} attrs"," */","","Cast.prototype.initialize = function(attrs) {","  var self = this;","","  Object.keys(attrs).forEach(function(key) {","    self._types[key] = ~types.indexOf(attrs[key].type) ? attrs[key].type : 'string';","  });","};","","/**"," * Converts a set of values into the proper types"," * based on the Collection's schema."," *"," * @param {Object} values"," * @return {Object}"," * @api public"," */","","Cast.prototype.run = function(values) {","  var self = this;","","  if (values === undefined || values === null) {","    return;","  }","","  Object.keys(values).forEach(function(key) {","","    // Set undefined to null","    if (_.isUndefined(values[key])) values[key] = null;","    if (!hasOwnProperty(self._types, key) || values[key] === null || !hasOwnProperty(values, key)) {","      return;","    }","","    // If the value is a plain object, don't attempt to cast it","    if (_.isPlainObject(values[key])) return;","","    // Find the value's type","    var type = self._types[key];","","    // Casting Function","    switch (type) {","      case 'string':","      case 'text':","        values[key] = self.string(values[key]);","        break;","","      case 'integer':","        values[key] = self.integer(key, values[key]);","        break;","","      case 'float':","        values[key] = self.float(values[key]);","        break;","","      case 'date':","      case 'time':","      case 'datetime':","        values[key] = self.date(values[key]);","        break;","","      case 'boolean':","        values[key] = self.boolean(values[key]);","        break;","","      case 'array':","        values[key] = self.array(values[key]);","        break;","    }","  });","","  return values;","};","","/**"," * Cast String Values"," *"," * @param {String} str"," * @return {String}"," * @api private"," */","","Cast.prototype.string = function string(str) {","  return typeof str.toString !== 'undefined' ? str.toString() : '' + str;","};","","/**"," * Cast Integer Values"," *"," * @param {String} key"," * @param {Integer} value"," * @return {Integer}"," * @api private"," */","","Cast.prototype.integer = function integer(key, value) {","  var _value;","","  // Attempt to see if the value is resembles a MongoID","  // if so let's not try and cast it and instead return a string representation of","  // it. Needed for sails-mongo.","  if (utils.matchMongoId(value)) return value.toString();","","  // Attempt to parseInt","  try {","    _value = parseInt(value, 10);","  } catch(e) {","    return value;","  }","","  return _value;","};","","/**"," * Cast Float Values"," *"," * @param {Float} value"," * @return {Float}"," * @api private"," */","","Cast.prototype.float = function float(value) {","  var _value;","","  try {","    _value = parseFloat(value);","  } catch(e) {","    return value;","  }","","  return _value;","};","","/**"," * Cast Boolean Values"," *"," * @param {Boolean} value"," * @return {Boolean}"," * @api private"," */","","Cast.prototype.boolean = function boolean(value) {","  var parsed;","","  if (_.isString(value)) {","    if (value === 'true') return true;","    if (value === 'false') return false;","    return value;","  }","","  // Nicely cast [0, 1] to true and false","  try {","    parsed = parseInt(value, 10);","  } catch(e) {","    return false;","  }","","  if (parsed === 0) return false;","  if (parsed === 1) return true;","","  return value;","};","","/**"," * Cast Date Values"," *"," * @param {String|Date} value"," * @return {Date}"," * @api private"," */","","Cast.prototype.date = function date(value) {","  var _value;","  if (value.__proto__ == Date.prototype) {","    _value = new Date(value.getTime());","  } else if (typeof value.toDate === 'function') {","    _value = value.toDate();","  } else {","    _value = new Date(Date.parse(value));","  }","","  if (_value.toString() === 'Invalid Date') return value;","  return _value;","};","","/**"," * Cast Array Values"," *"," * @param {Array|String} value"," * @return {Array}"," * @api private"," */","","Cast.prototype.array = function array(value) {","  if (Array.isArray(value)) return value;","  return [value];","};",""],"l":{"5":1,"6":1,"7":1,"8":1,"22":1,"23":0,"25":0,"36":1,"37":0,"39":0,"40":0,"53":1,"54":0,"56":0,"57":0,"60":0,"63":0,"64":0,"65":0,"69":0,"72":0,"75":0,"78":0,"79":0,"82":0,"83":0,"86":0,"87":0,"92":0,"93":0,"96":0,"97":0,"100":0,"101":0,"105":0,"116":1,"117":0,"129":1,"130":0,"135":0,"138":0,"139":0,"141":0,"144":0,"155":1,"156":0,"158":0,"159":0,"161":0,"164":0,"175":1,"176":0,"178":0,"179":0,"180":0,"181":0,"185":0,"186":0,"188":0,"191":0,"192":0,"194":0,"205":1,"206":0,"207":0,"208":0,"209":0,"210":0,"212":0,"215":0,"216":0,"227":1,"228":0,"229":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/core/schema.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/core/schema.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":1,"64":0,"65":0,"66":0,"67":0,"68":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0,0,0,0,0,0,0,0,0,0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0,0],"11":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":37,"loc":{"start":{"line":37,"column":30},"end":{"line":37,"column":48}}},"2":{"name":"(anonymous_2)","line":52,"loc":{"start":{"line":52,"column":30},"end":{"line":52,"column":77}}},"3":{"name":"(anonymous_3)","line":56,"loc":{"start":{"line":56,"column":29},"end":{"line":56,"column":43}}},"4":{"name":"(anonymous_4)","line":63,"loc":{"start":{"line":63,"column":31},"end":{"line":63,"column":45}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":35},"end":{"line":82,"column":61}}},"6":{"name":"(anonymous_6)","line":194,"loc":{"start":{"line":194,"column":31},"end":{"line":194,"column":48}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":38}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":40}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":49}},"5":{"start":{"line":37,"column":0},"end":{"line":42,"column":2}},"6":{"start":{"line":38,"column":2},"end":{"line":38,"column":31}},"7":{"start":{"line":39,"column":2},"end":{"line":39,"column":19}},"8":{"start":{"line":41,"column":2},"end":{"line":41,"column":14}},"9":{"start":{"line":52,"column":0},"end":{"line":70,"column":2}},"10":{"start":{"line":53,"column":2},"end":{"line":53,"column":18}},"11":{"start":{"line":56,"column":2},"end":{"line":59,"column":5}},"12":{"start":{"line":57,"column":4},"end":{"line":57,"column":57}},"13":{"start":{"line":57,"column":50},"end":{"line":57,"column":57}},"14":{"start":{"line":58,"column":4},"end":{"line":58,"column":61}},"15":{"start":{"line":62,"column":2},"end":{"line":66,"column":3}},"16":{"start":{"line":63,"column":4},"end":{"line":65,"column":7}},"17":{"start":{"line":64,"column":6},"end":{"line":64,"column":28}},"18":{"start":{"line":69,"column":2},"end":{"line":69,"column":71}},"19":{"start":{"line":82,"column":0},"end":{"line":177,"column":2}},"20":{"start":{"line":83,"column":2},"end":{"line":83,"column":16}},"21":{"start":{"line":85,"column":2},"end":{"line":174,"column":3}},"22":{"start":{"line":86,"column":4},"end":{"line":173,"column":5}},"23":{"start":{"line":91,"column":8},"end":{"line":91,"column":71}},"24":{"start":{"line":92,"column":8},"end":{"line":92,"column":14}},"25":{"start":{"line":96,"column":8},"end":{"line":96,"column":37}},"26":{"start":{"line":97,"column":8},"end":{"line":97,"column":14}},"27":{"start":{"line":101,"column":8},"end":{"line":101,"column":37}},"28":{"start":{"line":102,"column":8},"end":{"line":102,"column":27}},"29":{"start":{"line":103,"column":8},"end":{"line":103,"column":14}},"30":{"start":{"line":107,"column":8},"end":{"line":107,"column":37}},"31":{"start":{"line":108,"column":8},"end":{"line":108,"column":14}},"32":{"start":{"line":112,"column":8},"end":{"line":112,"column":37}},"33":{"start":{"line":113,"column":8},"end":{"line":113,"column":14}},"34":{"start":{"line":117,"column":8},"end":{"line":117,"column":29}},"35":{"start":{"line":118,"column":8},"end":{"line":118,"column":14}},"36":{"start":{"line":122,"column":8},"end":{"line":122,"column":30}},"37":{"start":{"line":123,"column":8},"end":{"line":123,"column":14}},"38":{"start":{"line":127,"column":8},"end":{"line":127,"column":40}},"39":{"start":{"line":128,"column":8},"end":{"line":128,"column":30}},"40":{"start":{"line":129,"column":8},"end":{"line":129,"column":14}},"41":{"start":{"line":133,"column":8},"end":{"line":133,"column":33}},"42":{"start":{"line":134,"column":8},"end":{"line":134,"column":14}},"43":{"start":{"line":138,"column":8},"end":{"line":138,"column":32}},"44":{"start":{"line":139,"column":8},"end":{"line":139,"column":14}},"45":{"start":{"line":143,"column":8},"end":{"line":143,"column":31}},"46":{"start":{"line":144,"column":8},"end":{"line":144,"column":14}},"47":{"start":{"line":148,"column":8},"end":{"line":148,"column":31}},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":14}},"49":{"start":{"line":153,"column":8},"end":{"line":153,"column":34}},"50":{"start":{"line":154,"column":8},"end":{"line":154,"column":14}},"51":{"start":{"line":158,"column":8},"end":{"line":158,"column":17}},"52":{"start":{"line":159,"column":8},"end":{"line":159,"column":87}},"53":{"start":{"line":161,"column":8},"end":{"line":166,"column":9}},"54":{"start":{"line":162,"column":10},"end":{"line":165,"column":11}},"55":{"start":{"line":163,"column":12},"end":{"line":163,"column":41}},"56":{"start":{"line":164,"column":12},"end":{"line":164,"column":18}},"57":{"start":{"line":168,"column":8},"end":{"line":168,"column":39}},"58":{"start":{"line":169,"column":8},"end":{"line":169,"column":46}},"59":{"start":{"line":170,"column":8},"end":{"line":170,"column":31}},"60":{"start":{"line":171,"column":8},"end":{"line":171,"column":30}},"61":{"start":{"line":172,"column":8},"end":{"line":172,"column":14}},"62":{"start":{"line":176,"column":2},"end":{"line":176,"column":14}},"63":{"start":{"line":194,"column":0},"end":{"line":211,"column":2}},"64":{"start":{"line":196,"column":2},"end":{"line":196,"column":17}},"65":{"start":{"line":198,"column":2},"end":{"line":208,"column":3}},"66":{"start":{"line":202,"column":4},"end":{"line":206,"column":5}},"67":{"start":{"line":205,"column":6},"end":{"line":205,"column":31}},"68":{"start":{"line":210,"column":2},"end":{"line":210,"column":15}}},"branchMap":{"1":{"line":38,"type":"binary-expr","locations":[{"start":{"line":38,"column":17},"end":{"line":38,"column":24}},{"start":{"line":38,"column":28},"end":{"line":38,"column":30}}]},"2":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":4},"end":{"line":57,"column":4}},{"start":{"line":57,"column":4},"end":{"line":57,"column":4}}]},"3":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":2},"end":{"line":62,"column":2}},{"start":{"line":62,"column":2},"end":{"line":62,"column":2}}]},"4":{"line":69,"type":"cond-expr","locations":[{"start":{"line":69,"column":54},"end":{"line":69,"column":63}},{"start":{"line":69,"column":66},"end":{"line":69,"column":70}}]},"5":{"line":86,"type":"switch","locations":[{"start":{"line":89,"column":6},"end":{"line":92,"column":14}},{"start":{"line":95,"column":6},"end":{"line":97,"column":14}},{"start":{"line":100,"column":6},"end":{"line":103,"column":14}},{"start":{"line":106,"column":6},"end":{"line":108,"column":14}},{"start":{"line":111,"column":6},"end":{"line":113,"column":14}},{"start":{"line":116,"column":6},"end":{"line":118,"column":14}},{"start":{"line":121,"column":6},"end":{"line":123,"column":14}},{"start":{"line":126,"column":6},"end":{"line":129,"column":14}},{"start":{"line":132,"column":6},"end":{"line":134,"column":14}},{"start":{"line":137,"column":6},"end":{"line":139,"column":14}},{"start":{"line":142,"column":6},"end":{"line":144,"column":14}},{"start":{"line":147,"column":6},"end":{"line":149,"column":14}},{"start":{"line":152,"column":6},"end":{"line":154,"column":14}},{"start":{"line":157,"column":6},"end":{"line":172,"column":14}}]},"6":{"line":91,"type":"cond-expr","locations":[{"start":{"line":91,"column":49},"end":{"line":91,"column":59}},{"start":{"line":91,"column":62},"end":{"line":91,"column":70}}]},"7":{"line":162,"type":"if","locations":[{"start":{"line":162,"column":10},"end":{"line":162,"column":10}},{"start":{"line":162,"column":10},"end":{"line":162,"column":10}}]},"8":{"line":162,"type":"binary-expr","locations":[{"start":{"line":162,"column":14},"end":{"line":162,"column":60}},{"start":{"line":162,"column":64},"end":{"line":162,"column":91}}]},"9":{"line":202,"type":"if","locations":[{"start":{"line":202,"column":4},"end":{"line":202,"column":4}},{"start":{"line":202,"column":4},"end":{"line":202,"column":4}}]},"10":{"line":202,"type":"binary-expr","locations":[{"start":{"line":202,"column":9},"end":{"line":202,"column":23}},{"start":{"line":202,"column":27},"end":{"line":202,"column":59}},{"start":{"line":203,"column":9},"end":{"line":203,"column":24}},{"start":{"line":203,"column":28},"end":{"line":203,"column":139}}]},"11":{"line":203,"type":"binary-expr","locations":[{"start":{"line":203,"column":30},"end":{"line":203,"column":75}},{"start":{"line":203,"column":79},"end":{"line":203,"column":138}}]}},"code":["/**"," * Module dependencies"," */","","var _ = require('lodash');","var types = require('../utils/types');","var utils = require('../utils/helpers');","var hasOwnProperty = utils.object.hasOwnProperty;","","/**"," * Builds a Schema Object from an attributes"," * object in a model."," *"," * Loops through an attributes object to build a schema"," * containing attribute name as key and a type for casting"," * in the database. Also includes a default value if supplied."," *"," * Example:"," *"," * attributes: {"," *   name: 'string',"," *   phone: {"," *     type: 'string',"," *     defaultsTo: '555-555-5555'"," *   }"," * }"," *"," * Returns: {"," *   name: { type: 'string' },"," *   phone: { type: 'string, defaultsTo: '555-555-5555' }"," * }"," *"," * @param {Object} context"," * @return {Object}"," */","","var Schema = module.exports = function(context) {","  this.context = context || {};","  this.schema = {};","","  return this;","};","","/**"," * Initialize the internal schema object"," *"," * @param {Object} attrs"," * @param {Object} associations"," * @param {Boolean} hasSchema"," */","","Schema.prototype.initialize = function(attrs, hasSchema, reservedAttributes) {","  var self = this;","","  // Build normal attributes","  Object.keys(attrs).forEach(function(key) {","    if (hasOwnProperty(attrs[key], 'collection')) return;","    self.schema[key] = self.objectAttribute(key, attrs[key]);","  });","","  // Build Reserved Attributes","  if (Array.isArray(reservedAttributes)) {","    reservedAttributes.forEach(function(key) {","      self.schema[key] = {};","    });","  }","","  // Set hasSchema to determine if values should be cleansed or not","  this.hasSchema = typeof hasSchema !== 'undefined' ? hasSchema : true;","};","","/**"," * Handle the building of an Object attribute"," *"," * Cleans any unnecessary attributes such as validation properties off of"," * the internal schema and set's defaults for incorrect values."," *"," * @param {Object} value"," * @return {Object}"," */","","Schema.prototype.objectAttribute = function(attrName, value) {","  var attr = {};","","  for (var key in value) {","    switch (key) {","","      // Set schema[attribute].type","      case 'type':","        // Allow validation types in attributes and transform them to strings","        attr.type = ~types.indexOf(value[key]) ? value[key] : 'string';","        break;","","      // Set schema[attribute].defaultsTo","      case 'defaultsTo':","        attr.defaultsTo = value[key];","        break;","","      // Set schema[attribute].primaryKey","      case 'primaryKey':","        attr.primaryKey = value[key];","        attr.unique = true;","        break;","","      // Set schema[attribute].foreignKey","      case 'foreignKey':","        attr.foreignKey = value[key];","        break;","","      // Set schema[attribute].references","      case 'references':","        attr.references = value[key];","        break;","","      // Set schema[attribute].on","      case 'on':","        attr.on = value[key];","        break;","","      // Set schema[attribute].via","      case 'via':","        attr.via = value[key];","        break;","","      // Set schema[attribute].autoIncrement","      case 'autoIncrement':","        attr.autoIncrement = value[key];","        attr.type = 'integer';","        break;","","      // Set schema[attribute].unique","      case 'unique':","        attr.unique = value[key];","        break;","","      // Set schema[attribute].index","      case 'index':","        attr.index = value[key];","        break;","","      // Set schema[attribute].enum","      case 'enum':","        attr.enum = value[key];","        break;","","      // Set schema[attribute].size","      case 'size':","        attr.size = value[key];","        break;","","      // Set schema[attribute].notNull","      case 'notNull':","        attr.notNull = value[key];","        break;","","      // Handle Belongs To Attributes","      case 'model':","        var type;","        var attrs = this.context.waterline.schema[value[key].toLowerCase()].attributes;","","        for (var attribute in attrs) {","          if (hasOwnProperty(attrs[attribute], 'primaryKey') && attrs[attribute].primaryKey) {","            type = attrs[attribute].type;","            break;","          }","        }","","        attr.type = type.toLowerCase();","        attr.model = value[key].toLowerCase();","        attr.foreignKey = true;","        attr.alias = attrName;","        break;","    }","  }","","  return attr;","};","","","/**"," * Clean Values"," *"," * Takes user inputted data and strips out any values not defined in"," * the schema."," *"," * This is run after all the validations and right before being sent to the"," * adapter. This allows you to add temporary properties when doing validation"," * callbacks and have them stripped before being sent to the database."," *"," * @param {Object} values to clean"," * @return {Object} clone of values, stripped of any extra properties"," */","","Schema.prototype.cleanValues = function(values) {","","  var clone = {};","","  for (var key in values) {","","    // The value can pass through if either the collection does have a schema and the key is in the schema,","    // or otherwise if the collection is schemaless and the key does not represent an associated collection.","    if ((this.hasSchema && hasOwnProperty(this.schema, key)) ||","        (!this.hasSchema && !(hasOwnProperty(this.context._attributes, key) && hasOwnProperty(this.context._attributes[key], 'collection')))) {","","      clone[key] = values[key];","    }","","  }","","  return clone;","};",""],"l":{"5":1,"6":1,"7":1,"8":1,"37":1,"38":0,"39":0,"41":0,"52":1,"53":0,"56":0,"57":0,"58":0,"62":0,"63":0,"64":0,"69":0,"82":1,"83":0,"85":0,"86":0,"91":0,"92":0,"96":0,"97":0,"101":0,"102":0,"103":0,"107":0,"108":0,"112":0,"113":0,"117":0,"118":0,"122":0,"123":0,"127":0,"128":0,"129":0,"133":0,"134":0,"138":0,"139":0,"143":0,"144":0,"148":0,"149":0,"153":0,"154":0,"158":0,"159":0,"161":0,"162":0,"163":0,"164":0,"168":0,"169":0,"170":0,"171":0,"172":0,"176":0,"194":1,"196":0,"198":0,"202":0,"205":0,"210":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/core/dictionary.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/core/dictionary.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":34},"end":{"line":18,"column":65}}},"2":{"name":"_build","line":30,"loc":{"start":{"line":30,"column":30},"end":{"line":30,"column":59}}},"3":{"name":"(anonymous_3)","line":31,"loc":{"start":{"line":31,"column":34},"end":{"line":31,"column":71}}},"4":{"name":"(anonymous_4)","line":34,"loc":{"start":{"line":34,"column":32},"end":{"line":34,"column":49}}},"5":{"name":"_smash","line":50,"loc":{"start":{"line":50,"column":30},"end":{"line":50,"column":55}}},"6":{"name":"(anonymous_6)","line":51,"loc":{"start":{"line":51,"column":57},"end":{"line":51,"column":79}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":26}},"2":{"start":{"line":18,"column":0},"end":{"line":21,"column":2}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":45}},"4":{"start":{"line":20,"column":2},"end":{"line":20,"column":30}},"5":{"start":{"line":30,"column":0},"end":{"line":38,"column":2}},"6":{"start":{"line":31,"column":2},"end":{"line":37,"column":5}},"7":{"start":{"line":32,"column":4},"end":{"line":32,"column":45}},"8":{"start":{"line":34,"column":4},"end":{"line":36,"column":7}},"9":{"start":{"line":35,"column":6},"end":{"line":35,"column":28}},"10":{"start":{"line":50,"column":0},"end":{"line":56,"column":2}},"11":{"start":{"line":51,"column":2},"end":{"line":53,"column":11}},"12":{"start":{"line":52,"column":4},"end":{"line":52,"column":40}},"13":{"start":{"line":55,"column":2},"end":{"line":55,"column":45}}},"branchMap":{"1":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":18},"end":{"line":32,"column":37}},{"start":{"line":32,"column":41},"end":{"line":32,"column":44}}]},"2":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":30},"end":{"line":51,"column":37}},{"start":{"line":51,"column":41},"end":{"line":51,"column":44}}]}},"code":["var _ = require('lodash');","","/**"," * Handle Building an Adapter/Connection dictionary"," *"," * @param {Object} connections"," * @param {Array} ordered"," * @return {Object}"," * @api public"," *"," * Manages a 'dictionary' object of the following structure:"," * {"," *    CONNECTION: {"," *      METHOD: ADAPTER_NAME"," *    }"," * }"," */","var Dictionary = module.exports = function(connections, ordered) {","  this.dictionary = this._build(connections);","  return this._smash(ordered);","};","","/**"," * Build Dictionary. This maps adapter methods to the effective connection"," * for which the method is pertinent."," *"," * @param {Object} connections"," * @api private"," */","Dictionary.prototype._build = function _build(connections) {","  return _.mapValues(connections, function(connection, connectionName) {","    var adapter = connection._adapter || { };","","    return _.mapValues(adapter, function(method) {","      return connectionName;","    });","  });","};","","/**"," * Combine Dictionary into a single level object."," *"," * Appends methods from other adapters onto the left most connection adapter,"," * but does not override any existing methods defined in the leftmost adapter."," *"," * @param {Array} ordered"," * @return {Object}"," * @api private"," */","Dictionary.prototype._smash = function _smash(ordered) {","  var mergeArguments = _.map((ordered || [ ]).reverse(), function(adapterName) {","    return this.dictionary[adapterName];","  }, this);","","  return _.merge.apply(null, mergeArguments);","};",""],"l":{"1":1,"18":1,"19":0,"20":0,"30":1,"31":0,"32":0,"34":0,"35":0,"50":1,"51":0,"52":0,"55":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/core/validations.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/core/validations.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0,0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":33},"end":{"line":22,"column":51}}},"2":{"name":"(anonymous_2)","line":54,"loc":{"start":{"line":54,"column":33},"end":{"line":54,"column":66}}},"3":{"name":"(anonymous_3)","line":72,"loc":{"start":{"line":72,"column":29},"end":{"line":72,"column":44}}},"4":{"name":"(anonymous_4)","line":75,"loc":{"start":{"line":75,"column":37},"end":{"line":75,"column":52}}},"5":{"name":"(anonymous_5)","line":115,"loc":{"start":{"line":115,"column":31},"end":{"line":115,"column":65}}},"6":{"name":"_eachValidation","line":144,"loc":{"start":{"line":144,"column":26},"end":{"line":144,"column":67}}},"7":{"name":"_eachKey","line":189,"loc":{"start":{"line":189,"column":47},"end":{"line":189,"column":76}}},"8":{"name":"(anonymous_8)","line":202,"loc":{"start":{"line":202,"column":44},"end":{"line":202,"column":61}}},"9":{"name":"afterwards","line":210,"loc":{"start":{"line":210,"column":7},"end":{"line":210,"column":42}}},"10":{"name":"(anonymous_10)","line":244,"loc":{"start":{"line":244,"column":30},"end":{"line":244,"column":44}}},"11":{"name":"allValidationsChecked","line":254,"loc":{"start":{"line":254,"column":5},"end":{"line":254,"column":41}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":26}},"2":{"start":{"line":9,"column":0},"end":{"line":9,"column":31}},"3":{"start":{"line":10,"column":0},"end":{"line":10,"column":29}},"4":{"start":{"line":11,"column":0},"end":{"line":11,"column":40}},"5":{"start":{"line":12,"column":0},"end":{"line":12,"column":49}},"6":{"start":{"line":13,"column":0},"end":{"line":13,"column":62}},"7":{"start":{"line":22,"column":0},"end":{"line":24,"column":2}},"8":{"start":{"line":23,"column":2},"end":{"line":23,"column":24}},"9":{"start":{"line":54,"column":0},"end":{"line":92,"column":2}},"10":{"start":{"line":55,"column":2},"end":{"line":55,"column":18}},"11":{"start":{"line":57,"column":2},"end":{"line":57,"column":28}},"12":{"start":{"line":59,"column":2},"end":{"line":61,"column":99}},"13":{"start":{"line":64,"column":2},"end":{"line":66,"column":3}},"14":{"start":{"line":65,"column":4},"end":{"line":65,"column":88}},"15":{"start":{"line":69,"column":2},"end":{"line":69,"column":22}},"16":{"start":{"line":70,"column":2},"end":{"line":70,"column":23}},"17":{"start":{"line":72,"column":2},"end":{"line":91,"column":5}},"18":{"start":{"line":73,"column":4},"end":{"line":73,"column":32}},"19":{"start":{"line":75,"column":4},"end":{"line":90,"column":7}},"20":{"start":{"line":78,"column":6},"end":{"line":78,"column":49}},"21":{"start":{"line":78,"column":40},"end":{"line":78,"column":47}},"22":{"start":{"line":81,"column":6},"end":{"line":81,"column":65}},"23":{"start":{"line":81,"column":56},"end":{"line":81,"column":63}},"24":{"start":{"line":84,"column":6},"end":{"line":87,"column":7}},"25":{"start":{"line":85,"column":8},"end":{"line":85,"column":57}},"26":{"start":{"line":86,"column":8},"end":{"line":86,"column":15}},"27":{"start":{"line":89,"column":6},"end":{"line":89,"column":55}},"28":{"start":{"line":115,"column":0},"end":{"line":268,"column":2}},"29":{"start":{"line":116,"column":2},"end":{"line":116,"column":18}},"30":{"start":{"line":117,"column":2},"end":{"line":117,"column":18}},"31":{"start":{"line":118,"column":2},"end":{"line":118,"column":50}},"32":{"start":{"line":122,"column":2},"end":{"line":140,"column":3}},"33":{"start":{"line":124,"column":6},"end":{"line":124,"column":23}},"34":{"start":{"line":125,"column":6},"end":{"line":125,"column":12}},"35":{"start":{"line":127,"column":6},"end":{"line":127,"column":34}},"36":{"start":{"line":128,"column":6},"end":{"line":128,"column":12}},"37":{"start":{"line":130,"column":6},"end":{"line":133,"column":7}},"38":{"start":{"line":131,"column":8},"end":{"line":131,"column":34}},"39":{"start":{"line":132,"column":8},"end":{"line":132,"column":14}},"40":{"start":{"line":136,"column":6},"end":{"line":138,"column":7}},"41":{"start":{"line":137,"column":8},"end":{"line":137,"column":71}},"42":{"start":{"line":144,"column":2},"end":{"line":266,"column":5}},"43":{"start":{"line":145,"column":4},"end":{"line":145,"column":53}},"44":{"start":{"line":148,"column":4},"end":{"line":148,"column":21}},"45":{"start":{"line":149,"column":4},"end":{"line":155,"column":5}},"46":{"start":{"line":150,"column":6},"end":{"line":150,"column":43}},"47":{"start":{"line":154,"column":6},"end":{"line":154,"column":19}},"48":{"start":{"line":156,"column":4},"end":{"line":156,"column":45}},"49":{"start":{"line":159,"column":4},"end":{"line":159,"column":35}},"50":{"start":{"line":160,"column":4},"end":{"line":162,"column":5}},"51":{"start":{"line":161,"column":6},"end":{"line":161,"column":19}},"52":{"start":{"line":166,"column":4},"end":{"line":170,"column":5}},"53":{"start":{"line":167,"column":6},"end":{"line":169,"column":7}},"54":{"start":{"line":168,"column":8},"end":{"line":168,"column":20}},"55":{"start":{"line":173,"column":4},"end":{"line":177,"column":5}},"56":{"start":{"line":174,"column":6},"end":{"line":176,"column":7}},"57":{"start":{"line":175,"column":8},"end":{"line":175,"column":20}},"58":{"start":{"line":180,"column":4},"end":{"line":184,"column":5}},"59":{"start":{"line":181,"column":6},"end":{"line":183,"column":7}},"60":{"start":{"line":182,"column":8},"end":{"line":182,"column":20}},"61":{"start":{"line":189,"column":4},"end":{"line":252,"column":7}},"62":{"start":{"line":190,"column":6},"end":{"line":209,"column":7}},"63":{"start":{"line":191,"column":8},"end":{"line":193,"column":9}},"64":{"start":{"line":192,"column":10},"end":{"line":192,"column":24}},"65":{"start":{"line":196,"column":8},"end":{"line":199,"column":9}},"66":{"start":{"line":197,"column":10},"end":{"line":197,"column":76}},"67":{"start":{"line":198,"column":10},"end":{"line":198,"column":24}},"68":{"start":{"line":202,"column":8},"end":{"line":205,"column":11}},"69":{"start":{"line":203,"column":10},"end":{"line":203,"column":42}},"70":{"start":{"line":204,"column":10},"end":{"line":204,"column":17}},"71":{"start":{"line":208,"column":8},"end":{"line":208,"column":23}},"72":{"start":{"line":211,"column":6},"end":{"line":214,"column":7}},"73":{"start":{"line":213,"column":8},"end":{"line":213,"column":33}},"74":{"start":{"line":220,"column":6},"end":{"line":224,"column":7}},"75":{"start":{"line":221,"column":8},"end":{"line":223,"column":9}},"76":{"start":{"line":222,"column":10},"end":{"line":222,"column":22}},"77":{"start":{"line":227,"column":6},"end":{"line":227,"column":26}},"78":{"start":{"line":228,"column":6},"end":{"line":234,"column":7}},"79":{"start":{"line":229,"column":8},"end":{"line":229,"column":70}},"80":{"start":{"line":233,"column":8},"end":{"line":233,"column":21}},"81":{"start":{"line":237,"column":6},"end":{"line":239,"column":7}},"82":{"start":{"line":238,"column":8},"end":{"line":238,"column":20}},"83":{"start":{"line":242,"column":6},"end":{"line":242,"column":30}},"84":{"start":{"line":244,"column":6},"end":{"line":249,"column":9}},"85":{"start":{"line":245,"column":8},"end":{"line":247,"column":9}},"86":{"start":{"line":246,"column":10},"end":{"line":246,"column":30}},"87":{"start":{"line":248,"column":8},"end":{"line":248,"column":74}},"88":{"start":{"line":251,"column":6},"end":{"line":251,"column":18}},"89":{"start":{"line":256,"column":4},"end":{"line":258,"column":5}},"90":{"start":{"line":257,"column":6},"end":{"line":257,"column":21}},"91":{"start":{"line":261,"column":4},"end":{"line":263,"column":5}},"92":{"start":{"line":262,"column":6},"end":{"line":262,"column":18}},"93":{"start":{"line":265,"column":4},"end":{"line":265,"column":33}}},"branchMap":{"1":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":13},"end":{"line":57,"column":21}},{"start":{"line":57,"column":25},"end":{"line":57,"column":27}}]},"2":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":2},"end":{"line":64,"column":2}},{"start":{"line":64,"column":2},"end":{"line":64,"column":2}}]},"3":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":6},"end":{"line":64,"column":31}},{"start":{"line":64,"column":35},"end":{"line":64,"column":75}}]},"4":{"line":69,"type":"binary-expr","locations":[{"start":{"line":69,"column":10},"end":{"line":69,"column":15}},{"start":{"line":69,"column":19},"end":{"line":69,"column":21}}]},"5":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":6},"end":{"line":78,"column":6}},{"start":{"line":78,"column":6},"end":{"line":78,"column":6}}]},"6":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":6},"end":{"line":81,"column":6}},{"start":{"line":81,"column":6},"end":{"line":81,"column":6}}]},"7":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":6},"end":{"line":84,"column":6}},{"start":{"line":84,"column":6},"end":{"line":84,"column":6}}]},"8":{"line":122,"type":"switch","locations":[{"start":{"line":123,"column":4},"end":{"line":125,"column":12}},{"start":{"line":126,"column":4},"end":{"line":128,"column":12}},{"start":{"line":129,"column":4},"end":{"line":133,"column":7}},{"start":{"line":134,"column":4},"end":{"line":138,"column":7}}]},"9":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":6},"end":{"line":130,"column":6}},{"start":{"line":130,"column":6},"end":{"line":130,"column":6}}]},"10":{"line":136,"type":"if","locations":[{"start":{"line":136,"column":6},"end":{"line":136,"column":6}},{"start":{"line":136,"column":6},"end":{"line":136,"column":6}}]},"11":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":4},"end":{"line":160,"column":4}},{"start":{"line":160,"column":4},"end":{"line":160,"column":4}}]},"12":{"line":166,"type":"if","locations":[{"start":{"line":166,"column":4},"end":{"line":166,"column":4}},{"start":{"line":166,"column":4},"end":{"line":166,"column":4}}]},"13":{"line":167,"type":"if","locations":[{"start":{"line":167,"column":6},"end":{"line":167,"column":6}},{"start":{"line":167,"column":6},"end":{"line":167,"column":6}}]},"14":{"line":167,"type":"binary-expr","locations":[{"start":{"line":167,"column":10},"end":{"line":167,"column":24}},{"start":{"line":167,"column":28},"end":{"line":167,"column":40}}]},"15":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":4},"end":{"line":173,"column":4}},{"start":{"line":173,"column":4},"end":{"line":173,"column":4}}]},"16":{"line":173,"type":"binary-expr","locations":[{"start":{"line":173,"column":8},"end":{"line":173,"column":30}},{"start":{"line":173,"column":34},"end":{"line":173,"column":66}},{"start":{"line":173,"column":71},"end":{"line":173,"column":99}},{"start":{"line":173,"column":103},"end":{"line":173,"column":117}}]},"17":{"line":174,"type":"if","locations":[{"start":{"line":174,"column":6},"end":{"line":174,"column":6}},{"start":{"line":174,"column":6},"end":{"line":174,"column":6}}]},"18":{"line":174,"type":"binary-expr","locations":[{"start":{"line":174,"column":10},"end":{"line":174,"column":37}},{"start":{"line":174,"column":41},"end":{"line":174,"column":69}}]},"19":{"line":180,"type":"if","locations":[{"start":{"line":180,"column":4},"end":{"line":180,"column":4}},{"start":{"line":180,"column":4},"end":{"line":180,"column":4}}]},"20":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":8},"end":{"line":180,"column":60}},{"start":{"line":180,"column":64},"end":{"line":180,"column":111}}]},"21":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":6},"end":{"line":181,"column":6}},{"start":{"line":181,"column":6},"end":{"line":181,"column":6}}]},"22":{"line":191,"type":"if","locations":[{"start":{"line":191,"column":8},"end":{"line":191,"column":8}},{"start":{"line":191,"column":8},"end":{"line":191,"column":8}}]},"23":{"line":196,"type":"if","locations":[{"start":{"line":196,"column":8},"end":{"line":196,"column":8}},{"start":{"line":196,"column":8},"end":{"line":196,"column":8}}]},"24":{"line":211,"type":"if","locations":[{"start":{"line":211,"column":6},"end":{"line":211,"column":6}},{"start":{"line":211,"column":6},"end":{"line":211,"column":6}}]},"25":{"line":220,"type":"if","locations":[{"start":{"line":220,"column":6},"end":{"line":220,"column":6}},{"start":{"line":220,"column":6},"end":{"line":220,"column":6}}]},"26":{"line":220,"type":"binary-expr","locations":[{"start":{"line":220,"column":10},"end":{"line":220,"column":54}},{"start":{"line":220,"column":58},"end":{"line":220,"column":85}}]},"27":{"line":221,"type":"if","locations":[{"start":{"line":221,"column":8},"end":{"line":221,"column":8}},{"start":{"line":221,"column":8},"end":{"line":221,"column":8}}]},"28":{"line":237,"type":"if","locations":[{"start":{"line":237,"column":6},"end":{"line":237,"column":6}},{"start":{"line":237,"column":6},"end":{"line":237,"column":6}}]},"29":{"line":245,"type":"if","locations":[{"start":{"line":245,"column":8},"end":{"line":245,"column":8}},{"start":{"line":245,"column":8},"end":{"line":245,"column":8}}]},"30":{"line":256,"type":"if","locations":[{"start":{"line":256,"column":4},"end":{"line":256,"column":4}},{"start":{"line":256,"column":4},"end":{"line":256,"column":4}}]},"31":{"line":261,"type":"if","locations":[{"start":{"line":261,"column":4},"end":{"line":261,"column":4}},{"start":{"line":261,"column":4},"end":{"line":261,"column":4}}]}},"code":["/**"," * Handles validation on a model"," *"," * Uses Anchor for validating"," * https://github.com/balderdashy/anchor"," */","","var _ = require('lodash');","var anchor = require('anchor');","var async = require('async');","var utils = require('../utils/helpers');","var hasOwnProperty = utils.object.hasOwnProperty;","var WLValidationError = require('../error/WLValidationError');","","","/**"," * Build up validations using the Anchor module."," *"," * @param {String} adapter"," */","","var Validator = module.exports = function(adapter) {","  this.validations = {};","};","","/**"," * Builds a Validation Object from a normalized attributes"," * object."," *"," * Loops through an attributes object to build a validation object"," * containing attribute name as key and a series of validations that"," * are run on each model. Skips over type and defaultsTo as they are"," * schema properties."," *"," * Example:"," *"," * attributes: {"," *   name: {"," *     type: 'string',"," *     length: { min: 2, max: 5 }"," *   }"," *   email: {"," *     type: 'string',"," *     required: true"," *   }"," * }"," *"," * Returns: {"," *   name: { length: { min:2, max: 5 }},"," *   email: { required: true }"," * }"," */","","Validator.prototype.initialize = function(attrs, types, defaults) {","  var self = this;","","  defaults = defaults || {};","","  this.reservedProperties = ['defaultsTo', 'primaryKey', 'autoIncrement', 'unique', 'index', 'collection', 'dominant', 'through',","          'columnName', 'foreignKey', 'references', 'on', 'groupKey', 'model', 'via', 'size',","          'example', 'validationMessage', 'validations', 'populateSettings', 'onKey', 'protected'];","","","  if (defaults.ignoreProperties && Array.isArray(defaults.ignoreProperties)) {","    this.reservedProperties = this.reservedProperties.concat(defaults.ignoreProperties);","  }","","  // Add custom type definitions to anchor","  types = types || {};","  anchor.define(types);","","  Object.keys(attrs).forEach(function(attr) {","    self.validations[attr] = {};","","    Object.keys(attrs[attr]).forEach(function(prop) {","","      // Ignore null values","      if (attrs[attr][prop] === null) { return; }","","      // If property is reserved don't do anything with it","      if (self.reservedProperties.indexOf(prop) > -1) { return; }","","      // use the Anchor `in` method for enums","      if (prop === 'enum') {","        self.validations[attr]['in'] = attrs[attr][prop];","        return;","      }","","      self.validations[attr][prop] = attrs[attr][prop];","    });","  });","};","","","/**"," * Validator.prototype.validate()"," *"," * Accepts a dictionary of values and validates them against"," * the validation rules expected by this schema (`this.validations`)."," * Validation is performed using Anchor."," *"," *"," * @param {Dictionary} values"," *        The dictionary of values to validate."," *"," * @param {Boolean|String|String[]} presentOnly"," *        only validate present values (if `true`) or validate the"," *        specified attribute(s)."," *"," * @param {Function} callback"," *        @param {Error} err - a fatal error, if relevant."," *        @param {Array} invalidAttributes - an array of errors"," */","","Validator.prototype.validate = function(values, presentOnly, cb) {","  var self = this;","  var errors = {};","  var validations = Object.keys(this.validations);","","  // Handle optional second arg AND Use present values only, specified values, or all validations","  /* eslint-disable no-fallthrough */","  switch (typeof presentOnly) {","    case 'function':","      cb = presentOnly;","      break;","    case 'string':","      validations = [presentOnly];","      break;","    case 'object':","      if (Array.isArray(presentOnly)) {","        validations = presentOnly;","        break;","      } // Fall through to the default if the object is not an array","    default:","      // Any other truthy value.","      if (presentOnly) {","        validations = _.intersection(validations, Object.keys(values));","      }","    /* eslint-enable no-fallthrough */","  }","","","  // Validate all validations in parallel","  async.each(validations, function _eachValidation(validation, cb) {","    var curValidation = self.validations[validation];","","    // Build Requirements","    var requirements;","    try {","      requirements = anchor(curValidation);","    }","    catch (e) {","      // Handle fatal error:","      return cb(e);","    }","    requirements = _.cloneDeep(requirements);","","    // Grab value and set to null if undefined","    var value = values[validation];","    if (typeof value == 'undefined') {","      value = null;","    }","","    // If value is not required and empty then don't","    // try and validate it","    if (!curValidation.required) {","      if (value === null || value === '') {","        return cb();","      }","    }","","    // If Boolean and required manually check","    if (curValidation.required && curValidation.type === 'boolean' && (typeof value !== 'undefined' && value !== null)) {","      if (value.toString() === 'true' || value.toString() === 'false') {","        return cb();","      }","    }","","    // If type is integer and the value matches a mongoID let it validate","    if (hasOwnProperty(self.validations[validation], 'type') && self.validations[validation].type === 'integer') {","      if (utils.matchMongoId(value)) {","        return cb();","      }","    }","","    // Rule values may be specified as sync or async functions.","    // Call them and replace the rule value with the function's result","    // before running validations.","    async.each(Object.keys(requirements.data), function _eachKey(key, next) {","      try {","        if (typeof requirements.data[key] !== 'function') {","          return next();","        }","","        // Run synchronous function","        if (requirements.data[key].length < 1) {","          requirements.data[key] = requirements.data[key].apply(values, []);","          return next();","        }","","        // Run async function","        requirements.data[key].call(values, function(result) {","          requirements.data[key] = result;","          next();","        });","      }","      catch (e) {","        return next(e);","      }","    }, function afterwards(unexpectedErr) {","      if (unexpectedErr) {","        // Handle fatal error","        return cb(unexpectedErr);","      }","","      // If the value has a dynamic required function and it evaluates to false lets look and see","      // if the value supplied is null or undefined. If so then we don't need to check anything. This","      // prevents type errors like `undefined` should be a string.","      // if required is set to 'false', don't enforce as required rule","      if (requirements.data.hasOwnProperty('required') && !requirements.data.required) {","        if (_.isNull(value)) {","          return cb();","        }","      }","","      // Now run the validations using Anchor.","      var validationError;","      try {","        validationError = anchor(value).to(requirements.data, values);","      }","      catch (e) {","        // Handle fatal error:","        return cb(e);","      }","","      // If no validation errors, bail.","      if (!validationError) {","        return cb();","      }","","      // Build an array of errors.","      errors[validation] = [];","","      validationError.forEach(function(obj) {","        if (obj.property) {","          delete obj.property;","        }","        errors[validation].push({ rule: obj.rule, message: obj.message });","      });","","      return cb();","    });","","  }, function allValidationsChecked(err) {","    // Handle fatal error:","    if (err) {","      return cb(err);","    }","","","    if (Object.keys(errors).length === 0) {","      return cb();","    }","","    return cb(undefined, errors);","  });","","};",""],"l":{"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"22":1,"23":0,"54":1,"55":0,"57":0,"59":0,"64":0,"65":0,"69":0,"70":0,"72":0,"73":0,"75":0,"78":0,"81":0,"84":0,"85":0,"86":0,"89":0,"115":1,"116":0,"117":0,"118":0,"122":0,"124":0,"125":0,"127":0,"128":0,"130":0,"131":0,"132":0,"136":0,"137":0,"144":0,"145":0,"148":0,"149":0,"150":0,"154":0,"156":0,"159":0,"160":0,"161":0,"166":0,"167":0,"168":0,"173":0,"174":0,"175":0,"180":0,"181":0,"182":0,"189":0,"190":0,"191":0,"192":0,"196":0,"197":0,"198":0,"202":0,"203":0,"204":0,"208":0,"211":0,"213":0,"220":0,"221":0,"222":0,"227":0,"228":0,"229":0,"233":0,"237":0,"238":0,"242":0,"244":0,"245":0,"246":0,"248":0,"251":0,"256":0,"257":0,"261":0,"262":0,"265":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/error/WLValidationError.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/error/WLValidationError.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":1,"27":0,"28":0,"29":1,"30":0,"31":0,"32":1,"33":0,"34":1,"35":0,"36":1,"37":0,"38":1,"39":0,"40":1,"41":0,"42":1,"43":0,"44":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"fnMap":{"1":{"name":"WLValidationError","line":16,"loc":{"start":{"line":16,"column":0},"end":{"line":16,"column":39}}},"2":{"name":"(anonymous_2)","line":52,"loc":{"start":{"line":52,"column":63},"end":{"line":52,"column":89}}},"3":{"name":"(anonymous_3)","line":53,"loc":{"start":{"line":53,"column":24},"end":{"line":53,"column":39}}},"4":{"name":"(anonymous_4)","line":63,"loc":{"start":{"line":63,"column":26},"end":{"line":63,"column":61}}},"5":{"name":"(anonymous_5)","line":65,"loc":{"start":{"line":65,"column":31},"end":{"line":65,"column":55}}},"6":{"name":"(anonymous_6)","line":81,"loc":{"start":{"line":81,"column":54},"end":{"line":81,"column":65}}},"7":{"name":"(anonymous_7)","line":82,"loc":{"start":{"line":82,"column":45},"end":{"line":82,"column":71}}},"8":{"name":"(anonymous_8)","line":93,"loc":{"start":{"line":93,"column":57},"end":{"line":93,"column":68}}},"9":{"name":"(anonymous_9)","line":94,"loc":{"start":{"line":94,"column":45},"end":{"line":94,"column":71}}},"10":{"name":"(anonymous_10)","line":98,"loc":{"start":{"line":98,"column":55},"end":{"line":98,"column":66}}},"11":{"name":"(anonymous_11)","line":108,"loc":{"start":{"line":108,"column":59},"end":{"line":108,"column":70}}},"12":{"name":"(anonymous_12)","line":111,"loc":{"start":{"line":111,"column":53},"end":{"line":111,"column":64}}},"13":{"name":"(anonymous_13)","line":121,"loc":{"start":{"line":121,"column":55},"end":{"line":121,"column":66}}},"14":{"name":"(anonymous_14)","line":132,"loc":{"start":{"line":132,"column":64},"end":{"line":132,"column":75}}},"15":{"name":"(anonymous_15)","line":148,"loc":{"start":{"line":148,"column":0},"end":{"line":148,"column":11}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":35}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":27}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":26}},"5":{"start":{"line":16,"column":0},"end":{"line":72,"column":1}},"6":{"start":{"line":19,"column":2},"end":{"line":19,"column":50}},"7":{"start":{"line":22,"column":2},"end":{"line":26,"column":3}},"8":{"start":{"line":23,"column":4},"end":{"line":25,"column":7}},"9":{"start":{"line":35,"column":2},"end":{"line":35,"column":37}},"10":{"start":{"line":36,"column":2},"end":{"line":39,"column":31}},"11":{"start":{"line":42,"column":2},"end":{"line":42,"column":29}},"12":{"start":{"line":45,"column":2},"end":{"line":45,"column":41}},"13":{"start":{"line":49,"column":2},"end":{"line":49,"column":32}},"14":{"start":{"line":52,"column":2},"end":{"line":59,"column":5}},"15":{"start":{"line":53,"column":4},"end":{"line":58,"column":7}},"16":{"start":{"line":54,"column":6},"end":{"line":56,"column":7}},"17":{"start":{"line":55,"column":8},"end":{"line":55,"column":107}},"18":{"start":{"line":57,"column":6},"end":{"line":57,"column":18}},"19":{"start":{"line":62,"column":2},"end":{"line":70,"column":9}},"20":{"start":{"line":64,"column":4},"end":{"line":64,"column":36}},"21":{"start":{"line":65,"column":4},"end":{"line":68,"column":11}},"22":{"start":{"line":66,"column":6},"end":{"line":66,"column":39}},"23":{"start":{"line":67,"column":6},"end":{"line":67,"column":18}},"24":{"start":{"line":69,"column":4},"end":{"line":69,"column":16}},"25":{"start":{"line":73,"column":0},"end":{"line":73,"column":42}},"26":{"start":{"line":81,"column":0},"end":{"line":85,"column":3}},"27":{"start":{"line":82,"column":2},"end":{"line":84,"column":5}},"28":{"start":{"line":83,"column":4},"end":{"line":83,"column":34}},"29":{"start":{"line":93,"column":0},"end":{"line":97,"column":3}},"30":{"start":{"line":94,"column":2},"end":{"line":96,"column":5}},"31":{"start":{"line":95,"column":4},"end":{"line":95,"column":37}},"32":{"start":{"line":98,"column":0},"end":{"line":100,"column":3}},"33":{"start":{"line":99,"column":2},"end":{"line":99,"column":23}},"34":{"start":{"line":108,"column":0},"end":{"line":110,"column":3}},"35":{"start":{"line":109,"column":2},"end":{"line":109,"column":40}},"36":{"start":{"line":111,"column":0},"end":{"line":113,"column":3}},"37":{"start":{"line":112,"column":2},"end":{"line":112,"column":25}},"38":{"start":{"line":121,"column":0},"end":{"line":123,"column":3}},"39":{"start":{"line":122,"column":2},"end":{"line":122,"column":32}},"40":{"start":{"line":132,"column":0},"end":{"line":139,"column":3}},"41":{"start":{"line":138,"column":2},"end":{"line":138,"column":32}},"42":{"start":{"line":146,"column":0},"end":{"line":156,"column":2}},"43":{"start":{"line":149,"column":2},"end":{"line":155,"column":4}},"44":{"start":{"line":159,"column":0},"end":{"line":159,"column":35}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":2},"end":{"line":22,"column":2}},{"start":{"line":22,"column":2},"end":{"line":22,"column":2}}]},"2":{"line":38,"type":"cond-expr","locations":[{"start":{"line":38,"column":17},"end":{"line":38,"column":19}},{"start":{"line":38,"column":22},"end":{"line":38,"column":25}}]},"3":{"line":39,"type":"cond-expr","locations":[{"start":{"line":39,"column":17},"end":{"line":39,"column":21}},{"start":{"line":39,"column":24},"end":{"line":39,"column":29}}]},"4":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":16},"end":{"line":45,"column":33}},{"start":{"line":45,"column":37},"end":{"line":45,"column":40}}]},"5":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":6},"end":{"line":54,"column":6}},{"start":{"line":54,"column":6},"end":{"line":54,"column":6}}]}},"code":["/**"," * Module dependencies"," */","","var WLError = require('./WLError');","var WLUsageError = require('./WLUsageError');","var util = require('util');","var _ = require('lodash');","","","/**"," * WLValidationError"," *"," * @extends WLError"," */","function WLValidationError(properties) {","","  // Call superclass","  WLValidationError.super_.call(this, properties);","","  // Ensure valid usage","  if (typeof this.invalidAttributes !== 'object') {","    return new WLUsageError({","      reason: 'An `invalidAttributes` object must be passed into the constructor for `WLValidationError`'","    });","  }","  // if ( typeof this.model !== 'string' ) {","  //   return new WLUsageError({","  //     reason: 'A `model` string (the collection\\'s `globalId`) must be passed into the constructor for `WLValidationError`'","  //   });","  // }","","  // Customize the `reason` based on the # of invalid attributes","  // (`reason` may not be overridden)","  var isSingular = this.length === 1;","  this.reason = util.format('%d attribute%s %s invalid',","    this.length,","    isSingular ? '' : 's',","    isSingular ? 'is' : 'are');","","  // Always apply the 'E_VALIDATION' error code, even if it was overridden.","  this.code = 'E_VALIDATION';","","  // Status may be overridden.","  this.status = properties.status || 400;","","  // Model should always be set.","  // (this should be the globalId of model, or \"collection\")","  this.model = properties.model;","","  // Ensure messages exist for each invalidAttribute","  this.invalidAttributes = _.mapValues(this.invalidAttributes, function(rules, attrName) {","    return _.map(rules, function(rule) {","      if (!rule.message) {","        rule.message = util.format('A record with that `%s` already exists (`%s`).', attrName, rule.value);","      }","      return rule;","    });","  });","","  // Customize the `details`","  this.details = util.format('Invalid attributes sent to %s:\\n', this.model) +","  _.reduce(this.messages, function(memo, messages, attrName) {","    memo += ' • ' + attrName + '\\n';","    memo += _.reduce(messages, function(memo, message) {","      memo += '   • ' + message + '\\n';","      return memo;","    }, '');","    return memo;","  }, '');","","}","util.inherits(WLValidationError, WLError);","","","/**"," * `rules`"," *"," * @return {Object[Array[String]]} dictionary of validation rule ids, indexed by attribute"," */","WLValidationError.prototype.__defineGetter__('rules', function() {","  return _.mapValues(this.invalidAttributes, function(rules, attrName) {","    return _.pluck(rules, 'rule');","  });","});","","","/**"," * `messages` (aka `errors`)"," *"," * @return {Object[Array[String]]} dictionary of validation messages, indexed by attribute"," */","WLValidationError.prototype.__defineGetter__('messages', function() {","  return _.mapValues(this.invalidAttributes, function(rules, attrName) {","    return _.pluck(rules, 'message');","  });","});","WLValidationError.prototype.__defineGetter__('errors', function() {","  return this.messages;","});","","","/**"," * `attributes` (aka `keys`)"," *"," * @return {Array[String]} of invalid attribute names"," */","WLValidationError.prototype.__defineGetter__('attributes', function() {","  return _.keys(this.invalidAttributes);","});","WLValidationError.prototype.__defineGetter__('keys', function() {","  return this.attributes;","});","","","/**"," * `.length`"," *"," * @return {Integer} number of invalid attributes"," */","WLValidationError.prototype.__defineGetter__('length', function() {","  return this.attributes.length;","});","","","/**"," * `.ValidationError`"," * (backwards-compatibility)"," *"," * @return {Object[Array[Object]]} number of invalid attributes"," */","WLValidationError.prototype.__defineGetter__('ValidationError', function() {","  //","  // TODO:","  // Down the road- emit deprecation event here--","  // (will log information about new error handling options)","  //","  return this.invalidAttributes;","});","","","/**"," * [toJSON description]"," * @type {[type]}"," */","WLValidationError.prototype.toJSON =","WLValidationError.prototype.toPOJO =","function() {","  return {","    error: this.code,","    status: this.status,","    summary: this.reason,","    model: this.model,","    invalidAttributes: this.invalidAttributes","  };","};","","","module.exports = WLValidationError;",""],"l":{"5":1,"6":1,"7":1,"8":1,"16":1,"19":0,"22":0,"23":0,"35":0,"36":0,"42":0,"45":0,"49":0,"52":0,"53":0,"54":0,"55":0,"57":0,"62":0,"64":0,"65":0,"66":0,"67":0,"69":0,"73":1,"81":1,"82":0,"83":0,"93":1,"94":0,"95":0,"98":1,"99":0,"108":1,"109":0,"111":1,"112":0,"121":1,"122":0,"132":1,"138":0,"146":1,"149":0,"159":1}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/error/WLUsageError.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/error/WLUsageError.js","s":{"1":1,"2":1,"3":1,"4":0,"5":1,"6":1,"7":1,"8":1,"9":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"WLUsageError","line":14,"loc":{"start":{"line":14,"column":0},"end":{"line":14,"column":34}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":35}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":27}},"3":{"start":{"line":14,"column":0},"end":{"line":18,"column":1}},"4":{"start":{"line":17,"column":2},"end":{"line":17,"column":45}},"5":{"start":{"line":19,"column":0},"end":{"line":19,"column":37}},"6":{"start":{"line":23,"column":0},"end":{"line":24,"column":10}},"7":{"start":{"line":25,"column":0},"end":{"line":26,"column":2}},"8":{"start":{"line":27,"column":0},"end":{"line":28,"column":16}},"9":{"start":{"line":31,"column":0},"end":{"line":31,"column":30}}},"branchMap":{},"code":["/**"," * Module dependencies"," */","","var WLError = require('./WLError');","var util = require('util');","","","/**"," * WLUsageError"," *"," * @extends WLError"," */","function WLUsageError(properties) {","","  // Call superclass","  WLUsageError.super_.call(this, properties);","}","util.inherits(WLUsageError, WLError);","","","// Override WLError defaults with WLUsageError properties.","WLUsageError.prototype.code =","'E_USAGE';","WLUsageError.prototype.status =","0;","WLUsageError.prototype.reason =","'Invalid usage';","","","module.exports = WLUsageError;",""],"l":{"5":1,"6":1,"14":1,"17":0,"19":1,"23":1,"25":1,"27":1,"31":1}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/core/transformations.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/core/transformations.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0,"28":1,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":1,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"(anonymous_1)","line":19,"loc":{"start":{"line":19,"column":38},"end":{"line":19,"column":67}}},"2":{"name":"(anonymous_2)","line":37,"loc":{"start":{"line":37,"column":38},"end":{"line":37,"column":67}}},"3":{"name":"(anonymous_3)","line":40,"loc":{"start":{"line":40,"column":34},"end":{"line":40,"column":49}}},"4":{"name":"(anonymous_4)","line":49,"loc":{"start":{"line":49,"column":42},"end":{"line":49,"column":56}}},"5":{"name":"(anonymous_5)","line":77,"loc":{"start":{"line":77,"column":37},"end":{"line":77,"column":68}}},"6":{"name":"recursiveParse","line":83,"loc":{"start":{"line":83,"column":2},"end":{"line":83,"column":31}}},"7":{"name":"(anonymous_7)","line":98,"loc":{"start":{"line":98,"column":29},"end":{"line":98,"column":48}}},"8":{"name":"(anonymous_8)","line":152,"loc":{"start":{"line":152,"column":39},"end":{"line":152,"column":60}}},"9":{"name":"(anonymous_9)","line":157,"loc":{"start":{"line":157,"column":45},"end":{"line":157,"column":59}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":40}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":49}},"4":{"start":{"line":19,"column":0},"end":{"line":28,"column":2}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":29}},"6":{"start":{"line":25,"column":2},"end":{"line":25,"column":38}},"7":{"start":{"line":27,"column":2},"end":{"line":27,"column":14}},"8":{"start":{"line":37,"column":0},"end":{"line":67,"column":2}},"9":{"start":{"line":38,"column":2},"end":{"line":38,"column":18}},"10":{"start":{"line":40,"column":2},"end":{"line":66,"column":5}},"11":{"start":{"line":43,"column":4},"end":{"line":43,"column":77}},"12":{"start":{"line":43,"column":70},"end":{"line":43,"column":77}},"13":{"start":{"line":46,"column":4},"end":{"line":46,"column":62}},"14":{"start":{"line":46,"column":55},"end":{"line":46,"column":62}},"15":{"start":{"line":49,"column":4},"end":{"line":65,"column":7}},"16":{"start":{"line":52,"column":6},"end":{"line":52,"column":39}},"17":{"start":{"line":52,"column":32},"end":{"line":52,"column":39}},"18":{"start":{"line":55,"column":6},"end":{"line":57,"column":7}},"19":{"start":{"line":56,"column":8},"end":{"line":56,"column":70}},"20":{"start":{"line":60,"column":6},"end":{"line":63,"column":7}},"21":{"start":{"line":61,"column":8},"end":{"line":61,"column":51}},"22":{"start":{"line":61,"column":44},"end":{"line":61,"column":51}},"23":{"start":{"line":62,"column":8},"end":{"line":62,"column":60}},"24":{"start":{"line":77,"column":0},"end":{"line":142,"column":2}},"25":{"start":{"line":78,"column":2},"end":{"line":78,"column":18}},"26":{"start":{"line":79,"column":2},"end":{"line":79,"column":35}},"27":{"start":{"line":81,"column":2},"end":{"line":81,"column":35}},"28":{"start":{"line":83,"column":2},"end":{"line":136,"column":3}},"29":{"start":{"line":86,"column":4},"end":{"line":86,"column":21}},"30":{"start":{"line":86,"column":14},"end":{"line":86,"column":21}},"31":{"start":{"line":89,"column":4},"end":{"line":96,"column":5}},"32":{"start":{"line":90,"column":6},"end":{"line":93,"column":7}},"33":{"start":{"line":91,"column":8},"end":{"line":91,"column":44}},"34":{"start":{"line":92,"column":8},"end":{"line":92,"column":15}},"35":{"start":{"line":95,"column":6},"end":{"line":95,"column":13}},"36":{"start":{"line":98,"column":4},"end":{"line":135,"column":7}},"37":{"start":{"line":101,"column":6},"end":{"line":101,"column":49}},"38":{"start":{"line":101,"column":42},"end":{"line":101,"column":49}},"39":{"start":{"line":104,"column":6},"end":{"line":110,"column":7}},"40":{"start":{"line":105,"column":8},"end":{"line":108,"column":9}},"41":{"start":{"line":106,"column":10},"end":{"line":106,"column":72}},"42":{"start":{"line":107,"column":10},"end":{"line":107,"column":31}},"43":{"start":{"line":109,"column":8},"end":{"line":109,"column":15}},"44":{"start":{"line":113,"column":6},"end":{"line":113,"column":98}},"45":{"start":{"line":113,"column":61},"end":{"line":113,"column":98}},"46":{"start":{"line":116,"column":6},"end":{"line":127,"column":7}},"47":{"start":{"line":119,"column":8},"end":{"line":124,"column":9}},"48":{"start":{"line":120,"column":10},"end":{"line":120,"column":72}},"49":{"start":{"line":121,"column":10},"end":{"line":121,"column":31}},"50":{"start":{"line":123,"column":10},"end":{"line":123,"column":70}},"51":{"start":{"line":126,"column":8},"end":{"line":126,"column":45}},"52":{"start":{"line":130,"column":6},"end":{"line":134,"column":7}},"53":{"start":{"line":132,"column":8},"end":{"line":132,"column":61}},"54":{"start":{"line":133,"column":8},"end":{"line":133,"column":29}},"55":{"start":{"line":139,"column":2},"end":{"line":139,"column":25}},"56":{"start":{"line":141,"column":2},"end":{"line":141,"column":16}},"57":{"start":{"line":152,"column":0},"end":{"line":167,"column":2}},"58":{"start":{"line":153,"column":2},"end":{"line":153,"column":18}},"59":{"start":{"line":154,"column":2},"end":{"line":154,"column":35}},"60":{"start":{"line":157,"column":2},"end":{"line":164,"column":5}},"61":{"start":{"line":158,"column":4},"end":{"line":158,"column":49}},"62":{"start":{"line":160,"column":4},"end":{"line":160,"column":57}},"63":{"start":{"line":160,"column":50},"end":{"line":160,"column":57}},"64":{"start":{"line":162,"column":4},"end":{"line":162,"column":42}},"65":{"start":{"line":163,"column":4},"end":{"line":163,"column":56}},"66":{"start":{"line":163,"column":29},"end":{"line":163,"column":56}},"67":{"start":{"line":166,"column":2},"end":{"line":166,"column":16}}},"branchMap":{"1":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":4},"end":{"line":43,"column":4}},{"start":{"line":43,"column":4},"end":{"line":43,"column":4}}]},"2":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":4},"end":{"line":46,"column":4}},{"start":{"line":46,"column":4},"end":{"line":46,"column":4}}]},"3":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":6},"end":{"line":52,"column":6}},{"start":{"line":52,"column":6},"end":{"line":52,"column":6}}]},"4":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":6},"end":{"line":55,"column":6}},{"start":{"line":55,"column":6},"end":{"line":55,"column":6}}]},"5":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":6},"end":{"line":60,"column":6}},{"start":{"line":60,"column":6},"end":{"line":60,"column":6}}]},"6":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":8},"end":{"line":61,"column":8}},{"start":{"line":61,"column":8},"end":{"line":61,"column":8}}]},"7":{"line":81,"type":"binary-expr","locations":[{"start":{"line":81,"column":13},"end":{"line":81,"column":21}},{"start":{"line":81,"column":25},"end":{"line":81,"column":34}}]},"8":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":4},"end":{"line":86,"column":4}},{"start":{"line":86,"column":4},"end":{"line":86,"column":4}}]},"9":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":4},"end":{"line":89,"column":4}},{"start":{"line":89,"column":4},"end":{"line":89,"column":4}}]},"10":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":6},"end":{"line":90,"column":6}},{"start":{"line":90,"column":6},"end":{"line":90,"column":6}}]},"11":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":6},"end":{"line":101,"column":6}},{"start":{"line":101,"column":6},"end":{"line":101,"column":6}}]},"12":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":6},"end":{"line":104,"column":6}},{"start":{"line":104,"column":6},"end":{"line":104,"column":6}}]},"13":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":8},"end":{"line":105,"column":8}},{"start":{"line":105,"column":8},"end":{"line":105,"column":8}}]},"14":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":6},"end":{"line":113,"column":6}},{"start":{"line":113,"column":6},"end":{"line":113,"column":6}}]},"15":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":10},"end":{"line":113,"column":38}},{"start":{"line":113,"column":42},"end":{"line":113,"column":59}}]},"16":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":6},"end":{"line":116,"column":6}},{"start":{"line":116,"column":6},"end":{"line":116,"column":6}}]},"17":{"line":116,"type":"binary-expr","locations":[{"start":{"line":116,"column":11},"end":{"line":116,"column":59}},{"start":{"line":116,"column":65},"end":{"line":116,"column":95}}]},"18":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":8},"end":{"line":119,"column":8}},{"start":{"line":119,"column":8},"end":{"line":119,"column":8}}]},"19":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":6},"end":{"line":130,"column":6}},{"start":{"line":130,"column":6},"end":{"line":130,"column":6}}]},"20":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":4},"end":{"line":160,"column":4}},{"start":{"line":160,"column":4},"end":{"line":160,"column":4}}]},"21":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":4},"end":{"line":163,"column":4}},{"start":{"line":163,"column":4},"end":{"line":163,"column":4}}]}},"code":["/**"," * Module dependencies"," */","","var _ = require('lodash');","var utils = require('../utils/helpers');","var hasOwnProperty = utils.object.hasOwnProperty;","","/**"," * Transformation"," *"," * Allows for a Waterline Collection to have different"," * attributes than what actually exist in an adater's representation."," *"," * @param {Object} attributes"," * @param {Object} tables"," */","","var Transformation = module.exports = function(attributes, tables) {","","  // Hold an internal mapping of keys to transform","  this._transformations = {};","","  // Initialize","  this.initialize(attributes, tables);","","  return this;","};","","/**"," * Initial mapping of transformations."," *"," * @param {Object} attributes"," * @param {Object} tables"," */","","Transformation.prototype.initialize = function(attributes, tables) {","  var self = this;","","  Object.keys(attributes).forEach(function(attr) {","","    // Ignore Functions and Strings","    if (['function', 'string'].indexOf(typeof attributes[attr]) > -1) return;","","    // If not an object, ignore","    if (attributes[attr] !== Object(attributes[attr])) return;","","    // Loop through an attribute and check for transformation keys","    Object.keys(attributes[attr]).forEach(function(key) {","","      // Currently just works with `columnName`, `collection`, `groupKey`","      if (key !== 'columnName') return;","","      // Error if value is not a string","      if (typeof attributes[attr][key] !== 'string') {","        throw new Error('columnName transformation must be a string');","      }","","      // Set transformation attr to new key","      if (key === 'columnName') {","        if (attr === attributes[attr][key]) return;","        self._transformations[attr] = attributes[attr][key];","      }","","    });","  });","};","","/**"," * Transforms a set of attributes into a representation used"," * in an adapter."," *"," * @param {Object} attributes to transform"," * @return {Object}"," */","","Transformation.prototype.serialize = function(attributes, behavior) {","  var self = this;","  var values = _.clone(attributes);","","  behavior = behavior || 'default';","","  function recursiveParse(obj) {","","    // Return if no object","    if (!obj) return;","","    // Handle array of types for findOrCreateEach","    if (typeof obj === 'string') {","      if (hasOwnProperty(self._transformations, obj)) {","        values = self._transformations[obj];","        return;","      }","","      return;","    }","","    Object.keys(obj).forEach(function(property) {","","      // Just a double check to exit if hasOwnProperty fails","      if (!hasOwnProperty(obj, property)) return;","","      // Schema must be serialized in first level only","      if (behavior === 'schema') {","        if (hasOwnProperty(self._transformations, property)) {","          obj[self._transformations[property]] = _.clone(obj[property]);","          delete obj[property];","        }","        return;","      }","","      // Recursively parse `OR` criteria objects to transform keys","      if (Array.isArray(obj[property]) && property === 'or') return recursiveParse(obj[property]);","","      // If Nested Object call function again passing the property as obj","      if ((toString.call(obj[property]) !== '[object Date]') && (_.isPlainObject(obj[property]))) {","","        // check if object key is in the transformations","        if (hasOwnProperty(self._transformations, property)) {","          obj[self._transformations[property]] = _.clone(obj[property]);","          delete obj[property];","","          return recursiveParse(obj[self._transformations[property]]);","        }","","        return recursiveParse(obj[property]);","      }","","      // Check if property is a transformation key","      if (hasOwnProperty(self._transformations, property)) {","","        obj[self._transformations[property]] = obj[property];","        delete obj[property];","      }","    });","  }","","  // Recursivly parse attributes to handle nested criteria","  recursiveParse(values);","","  return values;","};","","/**"," * Transforms a set of attributes received from an adapter"," * into a representation used in a collection."," *"," * @param {Object} attributes to transform"," * @return {Object}"," */","","Transformation.prototype.unserialize = function(attributes) {","  var self = this;","  var values = _.clone(attributes);","","  // Loop through the attributes and change them","  Object.keys(this._transformations).forEach(function(key) {","    var transformed = self._transformations[key];","","    if (!hasOwnProperty(attributes, transformed)) return;","","    values[key] = attributes[transformed];","    if (transformed !== key) delete values[transformed];","  });","","  return values;","};",""],"l":{"5":1,"6":1,"7":1,"19":1,"22":0,"25":0,"27":0,"37":1,"38":0,"40":0,"43":0,"46":0,"49":0,"52":0,"55":0,"56":0,"60":0,"61":0,"62":0,"77":1,"78":0,"79":0,"81":0,"83":1,"86":0,"89":0,"90":0,"91":0,"92":0,"95":0,"98":0,"101":0,"104":0,"105":0,"106":0,"107":0,"109":0,"113":0,"116":0,"119":0,"120":0,"121":0,"123":0,"126":0,"130":0,"132":0,"133":0,"139":0,"141":0,"152":1,"153":0,"154":0,"157":0,"158":0,"160":0,"162":0,"163":0,"166":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":29},"end":{"line":16,"column":40}}},"2":{"name":"(anonymous_2)","line":40,"loc":{"start":{"line":40,"column":23},"end":{"line":40,"column":36}}},"3":{"name":"(anonymous_3)","line":51,"loc":{"start":{"line":51,"column":35},"end":{"line":51,"column":60}}},"4":{"name":"(anonymous_4)","line":67,"loc":{"start":{"line":67,"column":37},"end":{"line":67,"column":51}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":40}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":40}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":40}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":41}},"6":{"start":{"line":10,"column":0},"end":{"line":10,"column":38}},"7":{"start":{"line":16,"column":0},"end":{"line":32,"column":2}},"8":{"start":{"line":19,"column":2},"end":{"line":25,"column":5}},"9":{"start":{"line":28,"column":2},"end":{"line":28,"column":26}},"10":{"start":{"line":31,"column":2},"end":{"line":31,"column":29}},"11":{"start":{"line":40,"column":0},"end":{"line":75,"column":2}},"12":{"start":{"line":41,"column":2},"end":{"line":41,"column":18}},"13":{"start":{"line":51,"column":2},"end":{"line":58,"column":5}},"14":{"start":{"line":52,"column":4},"end":{"line":52,"column":60}},"15":{"start":{"line":55,"column":4},"end":{"line":57,"column":5}},"16":{"start":{"line":56,"column":6},"end":{"line":56,"column":28}},"17":{"start":{"line":61,"column":2},"end":{"line":74,"column":131}},"18":{"start":{"line":64,"column":4},"end":{"line":64,"column":72}},"19":{"start":{"line":67,"column":4},"end":{"line":70,"column":7}},"20":{"start":{"line":68,"column":6},"end":{"line":68,"column":30}},"21":{"start":{"line":68,"column":15},"end":{"line":68,"column":30}},"22":{"start":{"line":69,"column":6},"end":{"line":69,"column":11}},"23":{"start":{"line":74,"column":7},"end":{"line":74,"column":131}},"24":{"start":{"line":78,"column":0},"end":{"line":89,"column":2}},"25":{"start":{"line":92,"column":0},"end":{"line":92,"column":22}}},"branchMap":{"1":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":16},"end":{"line":22,"column":30}},{"start":{"line":22,"column":34},"end":{"line":22,"column":47}}]},"2":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":4},"end":{"line":55,"column":4}},{"start":{"line":55,"column":4},"end":{"line":55,"column":4}}]},"3":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":8},"end":{"line":55,"column":32}},{"start":{"line":55,"column":36},"end":{"line":55,"column":53}}]},"4":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":2},"end":{"line":61,"column":2}},{"start":{"line":61,"column":2},"end":{"line":61,"column":2}}]},"5":{"line":61,"type":"binary-expr","locations":[{"start":{"line":61,"column":6},"end":{"line":61,"column":18}},{"start":{"line":61,"column":22},"end":{"line":61,"column":84}}]},"6":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":6},"end":{"line":68,"column":6}},{"start":{"line":68,"column":6},"end":{"line":68,"column":6}}]}},"code":["/**"," * Dependencies"," */","","var _ = require('lodash');","var extend = require('../utils/extend');","var AdapterBase = require('../adapter');","var utils = require('../utils/helpers');","var AdapterMixin = require('./adapters');","var hop = utils.object.hasOwnProperty;","","/**"," * Query"," */","","var Query = module.exports = function() {","","  // Create a reference to an internal Adapter Base","  this.adapter = new AdapterBase({","    connections: this.connections,","    query: this,","    collection: this.tableName || this.identity,","    identity: this.identity,","    dictionary: this.adapterDictionary","  });","","  // Mixin Custom Adapter Functions.","  AdapterMixin.call(this);","","  // Generate Dynamic Finders","  this.buildDynamicFinders();","};","","","/**"," * Automigrate"," *"," * @param  {Function} cb"," */","Query.prototype.sync = function(cb) {","  var self = this;","","  // If any adapters used in this collection have syncable turned off set migrate to safe.","  //","  // I don't think a collection would ever need two adapters where one needs migrations and","  // the other doesn't but it may be a possibility. The way the auto-migrations work now doesn't","  // allow for this either way so this should be good. We will probably need to revist this soonish","  // however and take a pass at getting something working for better migration systems.","  // - particlebanana","","  _.keys(this.connections).forEach(function(connectionName) {","    var adapter = self.connections[connectionName]._adapter;","","    // If not syncable, don't sync","    if (hop(adapter, 'syncable') && !adapter.syncable) {","      self.migrate = 'safe';","    }","  });","","  // Assign synchronization behavior depending on migrate option in collection","  if (this.migrate && ['drop', 'alter', 'create', 'safe'].indexOf(this.migrate) > -1) {","","    // Determine which sync strategy to use","    var strategyMethodName = 'migrate' + utils.capitalize(this.migrate);","","    // Run automigration strategy","    this.adapter[strategyMethodName](function(err) {","      if (err) return cb(err);","      cb();","    });","  }","","  // Throw Error","  else cb(new Error('Invalid `migrate` strategy defined for collection. Must be one of the following: drop, alter, create, safe'));","};","","","_.extend(","  Query.prototype,","  require('./validate'),","  require('./ddl'),","  require('./dql'),","  require('./aggregate'),","  require('./composite'),","  require('./finders/basic'),","  require('./finders/helpers'),","  require('./finders/dynamicFinders'),","  require('./stream')",");","","// Make Extendable","Query.extend = extend;",""],"l":{"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"16":1,"19":0,"28":0,"31":0,"40":1,"41":0,"51":0,"52":0,"55":0,"56":0,"61":0,"64":0,"67":0,"68":0,"69":0,"74":0,"78":1,"92":1}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/adapter/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/adapter/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":31},"end":{"line":7,"column":49}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":7,"column":0},"end":{"line":26,"column":2}},"3":{"start":{"line":10,"column":2},"end":{"line":10,"column":47}},"4":{"start":{"line":13,"column":2},"end":{"line":13,"column":45}},"5":{"start":{"line":17,"column":2},"end":{"line":17,"column":35}},"6":{"start":{"line":20,"column":2},"end":{"line":20,"column":45}},"7":{"start":{"line":23,"column":2},"end":{"line":23,"column":41}},"8":{"start":{"line":25,"column":2},"end":{"line":25,"column":14}},"9":{"start":{"line":28,"column":0},"end":{"line":37,"column":2}}},"branchMap":{"1":{"line":10,"type":"binary-expr","locations":[{"start":{"line":10,"column":21},"end":{"line":10,"column":40}},{"start":{"line":10,"column":44},"end":{"line":10,"column":46}}]},"2":{"line":13,"type":"binary-expr","locations":[{"start":{"line":13,"column":20},"end":{"line":13,"column":38}},{"start":{"line":13,"column":42},"end":{"line":13,"column":44}}]},"3":{"line":17,"type":"binary-expr","locations":[{"start":{"line":17,"column":15},"end":{"line":17,"column":28}},{"start":{"line":17,"column":32},"end":{"line":17,"column":34}}]},"4":{"line":20,"type":"binary-expr","locations":[{"start":{"line":20,"column":20},"end":{"line":20,"column":38}},{"start":{"line":20,"column":42},"end":{"line":20,"column":44}}]},"5":{"line":23,"type":"binary-expr","locations":[{"start":{"line":23,"column":18},"end":{"line":23,"column":34}},{"start":{"line":23,"column":38},"end":{"line":23,"column":40}}]}},"code":["/**"," * Base Adapter Definition"," */","","var _ = require('lodash');","","var Adapter = module.exports = function(options) {","","  // Ensure the connections are set","  this.connections = options.connections || {};","","  // Ensure the dictionary is built","  this.dictionary = options.dictionary || {};","","  // Set a Query instance to get access to top","  // level query functions","  this.query = options.query || {};","","  // Set Collection Name","  this.collection = options.collection || '';","","  // Set Model Identity","  this.identity = options.identity || '';","","  return this;","};","","_.extend(","  Adapter.prototype,","  require('./dql'),","  require('./ddl'),","  require('./compoundQueries'),","  require('./aggregateQueries'),","  require('./setupTeardown'),","  require('./sync'),","  require('./stream')",");",""],"l":{"5":1,"7":1,"10":0,"13":0,"17":0,"20":0,"23":0,"25":0,"28":1}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/adapter/dql.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/adapter/dql.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":11},"end":{"line":16,"column":22}}},"2":{"name":"(anonymous_2)","line":31,"loc":{"start":{"line":31,"column":8},"end":{"line":31,"column":31}}},"3":{"name":"(anonymous_3)","line":65,"loc":{"start":{"line":65,"column":10},"end":{"line":65,"column":31}}},"4":{"name":"afterwards","line":84,"loc":{"start":{"line":84,"column":73},"end":{"line":84,"column":113}}},"5":{"name":"(anonymous_5)","line":103,"loc":{"start":{"line":103,"column":8},"end":{"line":103,"column":31}}},"6":{"name":"(anonymous_6)","line":132,"loc":{"start":{"line":132,"column":11},"end":{"line":132,"column":34}}},"7":{"name":"(anonymous_7)","line":162,"loc":{"start":{"line":162,"column":24},"end":{"line":162,"column":46}}},"8":{"name":"(anonymous_8)","line":176,"loc":{"start":{"line":176,"column":9},"end":{"line":176,"column":32}}},"9":{"name":"(anonymous_9)","line":201,"loc":{"start":{"line":201,"column":24},"end":{"line":201,"column":46}}},"10":{"name":"(anonymous_10)","line":216,"loc":{"start":{"line":216,"column":10},"end":{"line":216,"column":41}}},"11":{"name":"afterwards","line":239,"loc":{"start":{"line":239,"column":83},"end":{"line":239,"column":124}}},"12":{"name":"(anonymous_12)","line":255,"loc":{"start":{"line":255,"column":11},"end":{"line":255,"column":34}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":46}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":40}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":71}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":26}},"5":{"start":{"line":14,"column":0},"end":{"line":273,"column":2}},"6":{"start":{"line":17,"column":4},"end":{"line":17,"column":51}},"7":{"start":{"line":34,"column":4},"end":{"line":34,"column":44}},"8":{"start":{"line":35,"column":4},"end":{"line":35,"column":32}},"9":{"start":{"line":38,"column":4},"end":{"line":38,"column":53}},"10":{"start":{"line":41,"column":4},"end":{"line":41,"column":76}},"11":{"start":{"line":41,"column":50},"end":{"line":41,"column":76}},"12":{"start":{"line":43,"column":4},"end":{"line":43,"column":40}},"13":{"start":{"line":44,"column":4},"end":{"line":44,"column":54}},"14":{"start":{"line":46,"column":4},"end":{"line":46,"column":68}},"15":{"start":{"line":46,"column":42},"end":{"line":46,"column":68}},"16":{"start":{"line":50,"column":4},"end":{"line":50,"column":76}},"17":{"start":{"line":52,"column":4},"end":{"line":52,"column":58}},"18":{"start":{"line":67,"column":4},"end":{"line":67,"column":39}},"19":{"start":{"line":70,"column":4},"end":{"line":70,"column":32}},"20":{"start":{"line":72,"column":4},"end":{"line":72,"column":77}},"21":{"start":{"line":72,"column":31},"end":{"line":72,"column":77}},"22":{"start":{"line":75,"column":4},"end":{"line":75,"column":55}},"23":{"start":{"line":78,"column":4},"end":{"line":78,"column":78}},"24":{"start":{"line":78,"column":52},"end":{"line":78,"column":78}},"25":{"start":{"line":80,"column":4},"end":{"line":80,"column":42}},"26":{"start":{"line":81,"column":4},"end":{"line":81,"column":54}},"27":{"start":{"line":83,"column":4},"end":{"line":83,"column":70}},"28":{"start":{"line":83,"column":44},"end":{"line":83,"column":70}},"29":{"start":{"line":84,"column":4},"end":{"line":90,"column":8}},"30":{"start":{"line":85,"column":6},"end":{"line":89,"column":42}},"31":{"start":{"line":86,"column":8},"end":{"line":86,"column":58}},"32":{"start":{"line":86,"column":37},"end":{"line":86,"column":58}},"33":{"start":{"line":87,"column":8},"end":{"line":87,"column":23}},"34":{"start":{"line":89,"column":11},"end":{"line":89,"column":42}},"35":{"start":{"line":106,"column":4},"end":{"line":106,"column":44}},"36":{"start":{"line":107,"column":4},"end":{"line":107,"column":32}},"37":{"start":{"line":110,"column":4},"end":{"line":110,"column":53}},"38":{"start":{"line":113,"column":4},"end":{"line":113,"column":76}},"39":{"start":{"line":113,"column":50},"end":{"line":113,"column":76}},"40":{"start":{"line":115,"column":4},"end":{"line":115,"column":40}},"41":{"start":{"line":116,"column":4},"end":{"line":116,"column":54}},"42":{"start":{"line":118,"column":4},"end":{"line":118,"column":49}},"43":{"start":{"line":118,"column":23},"end":{"line":118,"column":49}},"44":{"start":{"line":119,"column":4},"end":{"line":119,"column":58}},"45":{"start":{"line":135,"column":4},"end":{"line":135,"column":33}},"46":{"start":{"line":138,"column":4},"end":{"line":138,"column":32}},"47":{"start":{"line":141,"column":4},"end":{"line":141,"column":98}},"48":{"start":{"line":144,"column":4},"end":{"line":144,"column":72}},"49":{"start":{"line":144,"column":46},"end":{"line":144,"column":72}},"50":{"start":{"line":147,"column":4},"end":{"line":156,"column":5}},"51":{"start":{"line":148,"column":6},"end":{"line":148,"column":45}},"52":{"start":{"line":149,"column":6},"end":{"line":149,"column":56}},"53":{"start":{"line":151,"column":6},"end":{"line":155,"column":7}},"54":{"start":{"line":153,"column":8},"end":{"line":153,"column":48}},"55":{"start":{"line":154,"column":8},"end":{"line":154,"column":72}},"56":{"start":{"line":160,"column":4},"end":{"line":160,"column":23}},"57":{"start":{"line":162,"column":4},"end":{"line":167,"column":7}},"58":{"start":{"line":163,"column":6},"end":{"line":163,"column":34}},"59":{"start":{"line":163,"column":19},"end":{"line":163,"column":34}},"60":{"start":{"line":164,"column":6},"end":{"line":164,"column":44}},"61":{"start":{"line":164,"column":29},"end":{"line":164,"column":44}},"62":{"start":{"line":166,"column":6},"end":{"line":166,"column":23}},"63":{"start":{"line":177,"column":4},"end":{"line":177,"column":17}},"64":{"start":{"line":180,"column":4},"end":{"line":180,"column":32}},"65":{"start":{"line":181,"column":4},"end":{"line":181,"column":44}},"66":{"start":{"line":184,"column":4},"end":{"line":184,"column":92}},"67":{"start":{"line":187,"column":4},"end":{"line":194,"column":5}},"68":{"start":{"line":190,"column":6},"end":{"line":190,"column":78}},"69":{"start":{"line":190,"column":52},"end":{"line":190,"column":78}},"70":{"start":{"line":193,"column":6},"end":{"line":193,"column":38}},"71":{"start":{"line":196,"column":4},"end":{"line":196,"column":52}},"72":{"start":{"line":196,"column":19},"end":{"line":196,"column":52}},"73":{"start":{"line":197,"column":4},"end":{"line":197,"column":54}},"74":{"start":{"line":199,"column":4},"end":{"line":199,"column":104}},"75":{"start":{"line":199,"column":42},"end":{"line":199,"column":104}},"76":{"start":{"line":201,"column":4},"end":{"line":205,"column":7}},"77":{"start":{"line":202,"column":6},"end":{"line":202,"column":30}},"78":{"start":{"line":202,"column":15},"end":{"line":202,"column":30}},"79":{"start":{"line":203,"column":6},"end":{"line":203,"column":47}},"80":{"start":{"line":204,"column":6},"end":{"line":204,"column":21}},"81":{"start":{"line":217,"column":4},"end":{"line":217,"column":39}},"82":{"start":{"line":221,"column":4},"end":{"line":221,"column":32}},"83":{"start":{"line":222,"column":4},"end":{"line":222,"column":44}},"84":{"start":{"line":224,"column":4},"end":{"line":228,"column":5}},"85":{"start":{"line":225,"column":6},"end":{"line":225,"column":26}},"86":{"start":{"line":226,"column":11},"end":{"line":228,"column":5}},"87":{"start":{"line":227,"column":6},"end":{"line":227,"column":59}},"88":{"start":{"line":231,"column":4},"end":{"line":231,"column":55}},"89":{"start":{"line":234,"column":4},"end":{"line":234,"column":78}},"90":{"start":{"line":234,"column":52},"end":{"line":234,"column":78}},"91":{"start":{"line":236,"column":4},"end":{"line":236,"column":42}},"92":{"start":{"line":237,"column":4},"end":{"line":237,"column":54}},"93":{"start":{"line":239,"column":4},"end":{"line":245,"column":8}},"94":{"start":{"line":240,"column":6},"end":{"line":243,"column":7}},"95":{"start":{"line":241,"column":8},"end":{"line":241,"column":58}},"96":{"start":{"line":241,"column":37},"end":{"line":241,"column":58}},"97":{"start":{"line":242,"column":8},"end":{"line":242,"column":23}},"98":{"start":{"line":244,"column":6},"end":{"line":244,"column":38}},"99":{"start":{"line":258,"column":4},"end":{"line":258,"column":32}},"100":{"start":{"line":259,"column":4},"end":{"line":259,"column":44}},"101":{"start":{"line":262,"column":4},"end":{"line":262,"column":56}},"102":{"start":{"line":265,"column":4},"end":{"line":265,"column":79}},"103":{"start":{"line":265,"column":53},"end":{"line":265,"column":79}},"104":{"start":{"line":267,"column":4},"end":{"line":267,"column":43}},"105":{"start":{"line":268,"column":4},"end":{"line":268,"column":54}},"106":{"start":{"line":270,"column":4},"end":{"line":270,"column":61}}},"branchMap":{"1":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":4},"end":{"line":41,"column":4}},{"start":{"line":41,"column":4},"end":{"line":41,"column":4}}]},"2":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":4},"end":{"line":46,"column":4}},{"start":{"line":46,"column":4},"end":{"line":46,"column":4}}]},"3":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":4},"end":{"line":72,"column":4}},{"start":{"line":72,"column":4},"end":{"line":72,"column":4}}]},"4":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":4},"end":{"line":78,"column":4}},{"start":{"line":78,"column":4},"end":{"line":78,"column":4}}]},"5":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":4},"end":{"line":83,"column":4}},{"start":{"line":83,"column":4},"end":{"line":83,"column":4}}]},"6":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":6},"end":{"line":85,"column":6}},{"start":{"line":85,"column":6},"end":{"line":85,"column":6}}]},"7":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":8},"end":{"line":86,"column":8}},{"start":{"line":86,"column":8},"end":{"line":86,"column":8}}]},"8":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":4},"end":{"line":113,"column":4}},{"start":{"line":113,"column":4},"end":{"line":113,"column":4}}]},"9":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":4},"end":{"line":118,"column":4}},{"start":{"line":118,"column":4},"end":{"line":118,"column":4}}]},"10":{"line":144,"type":"if","locations":[{"start":{"line":144,"column":4},"end":{"line":144,"column":4}},{"start":{"line":144,"column":4},"end":{"line":144,"column":4}}]},"11":{"line":144,"type":"binary-expr","locations":[{"start":{"line":144,"column":8},"end":{"line":144,"column":17}},{"start":{"line":144,"column":21},"end":{"line":144,"column":44}}]},"12":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":4},"end":{"line":147,"column":4}},{"start":{"line":147,"column":4},"end":{"line":147,"column":4}}]},"13":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":6},"end":{"line":151,"column":6}},{"start":{"line":151,"column":6},"end":{"line":151,"column":6}}]},"14":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":6},"end":{"line":163,"column":6}},{"start":{"line":163,"column":6},"end":{"line":163,"column":6}}]},"15":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":6},"end":{"line":164,"column":6}},{"start":{"line":164,"column":6},"end":{"line":164,"column":6}}]},"16":{"line":187,"type":"if","locations":[{"start":{"line":187,"column":4},"end":{"line":187,"column":4}},{"start":{"line":187,"column":4},"end":{"line":187,"column":4}}]},"17":{"line":190,"type":"if","locations":[{"start":{"line":190,"column":6},"end":{"line":190,"column":6}},{"start":{"line":190,"column":6},"end":{"line":190,"column":6}}]},"18":{"line":196,"type":"if","locations":[{"start":{"line":196,"column":4},"end":{"line":196,"column":4}},{"start":{"line":196,"column":4},"end":{"line":196,"column":4}}]},"19":{"line":199,"type":"if","locations":[{"start":{"line":199,"column":4},"end":{"line":199,"column":4}},{"start":{"line":199,"column":4},"end":{"line":199,"column":4}}]},"20":{"line":202,"type":"if","locations":[{"start":{"line":202,"column":6},"end":{"line":202,"column":6}},{"start":{"line":202,"column":6},"end":{"line":202,"column":6}}]},"21":{"line":203,"type":"binary-expr","locations":[{"start":{"line":203,"column":18},"end":{"line":203,"column":24}},{"start":{"line":203,"column":28},"end":{"line":203,"column":41}},{"start":{"line":203,"column":45},"end":{"line":203,"column":46}}]},"22":{"line":224,"type":"if","locations":[{"start":{"line":224,"column":4},"end":{"line":224,"column":4}},{"start":{"line":224,"column":4},"end":{"line":224,"column":4}}]},"23":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":11},"end":{"line":226,"column":11}},{"start":{"line":226,"column":11},"end":{"line":226,"column":11}}]},"24":{"line":234,"type":"if","locations":[{"start":{"line":234,"column":4},"end":{"line":234,"column":4}},{"start":{"line":234,"column":4},"end":{"line":234,"column":4}}]},"25":{"line":240,"type":"if","locations":[{"start":{"line":240,"column":6},"end":{"line":240,"column":6}},{"start":{"line":240,"column":6},"end":{"line":240,"column":6}}]},"26":{"line":241,"type":"if","locations":[{"start":{"line":241,"column":8},"end":{"line":241,"column":8}},{"start":{"line":241,"column":8},"end":{"line":241,"column":8}}]},"27":{"line":265,"type":"if","locations":[{"start":{"line":265,"column":4},"end":{"line":265,"column":4}},{"start":{"line":265,"column":4},"end":{"line":265,"column":4}}]}},"code":["/**"," * Module Dependencies"," */","","var normalize = require('../utils/normalize');","var schema = require('../utils/schema');","var hasOwnProperty = require('../utils/helpers').object.hasOwnProperty;","var _ = require('lodash');","","","/**"," * DQL Adapter Normalization"," */","module.exports = {","","  hasJoin: function() {","    return hasOwnProperty(this.dictionary, 'join');","  },","","","  /**","   * join()","   *","   * If `join` is defined in the adapter, Waterline will use it to optimize","   * the `.populate()` implementation when joining collections within the same","   * database connection.","   *","   * @param  {[type]}   criteria","   * @param  {Function} cb","   */","  join: function(criteria, cb) {","","    // Normalize Arguments","    criteria = normalize.criteria(criteria);","    cb = normalize.callback(cb);","","    // Build Default Error Message","    var err = 'No join() method defined in adapter!';","","    // Find the connection to run this on","    if (!hasOwnProperty(this.dictionary, 'join')) return cb(new Error(err));","","    var connName = this.dictionary.join;","    var adapter = this.connections[connName]._adapter;","","    if (!hasOwnProperty(adapter, 'join')) return cb(new Error(err));","","    // Parse Join Criteria and set references to any collection tableName properties.","    // This is done here so that everywhere else in the codebase can use the collection identity.","    criteria = schema.serializeJoins(criteria, this.query.waterline.schema);","","    adapter.join(connName, this.collection, criteria, cb);","  },","","","  /**","   * create()","   *","   * Create one or more models.","   *","   * @param  {[type]}   values [description]","   * @param  {Function} cb     [description]","   * @return {[type]}          [description]","   */","  create: function(values, cb) {","","    var globalId = this.query.globalId;","","    // Normalize Arguments","    cb = normalize.callback(cb);","","    if (Array.isArray(values)) return this.createEach.call(this, values, cb);","","    // Build Default Error Message","    var err = 'No create() method defined in adapter!';","","    // Find the connection to run this on","    if (!hasOwnProperty(this.dictionary, 'create')) return cb(new Error(err));","","    var connName = this.dictionary.create;","    var adapter = this.connections[connName]._adapter;","","    if (!hasOwnProperty(adapter, 'create')) return cb(new Error(err));","    adapter.create(connName, this.collection, values, normalize.callback(function afterwards(err, createdRecord) {","      if (err) {","        if (typeof err === 'object') err.model = globalId;","        return cb(err);","      }","      else return cb(null, createdRecord);","    }));","  },","","","  /**","   * find()","   *","   * Find a set of models.","   *","   * @param  {[type]}   criteria [description]","   * @param  {Function} cb       [description]","   * @return {[type]}            [description]","   */","  find: function(criteria, cb) {","","    // Normalize Arguments","    criteria = normalize.criteria(criteria);","    cb = normalize.callback(cb);","","    // Build Default Error Message","    var err = 'No find() method defined in adapter!';","","    // Find the connection to run this on","    if (!hasOwnProperty(this.dictionary, 'find')) return cb(new Error(err));","","    var connName = this.dictionary.find;","    var adapter = this.connections[connName]._adapter;","","    if (!adapter.find) return cb(new Error(err));","    adapter.find(connName, this.collection, criteria, cb);","  },","","","  /**","   * findOne()","   *","   * Find exactly one model.","   *","   * @param  {[type]}   criteria [description]","   * @param  {Function} cb       [description]","   * @return {[type]}            [description]","   */","  findOne: function(criteria, cb) {","","    // make shallow copy of criteria so original does not get modified","    criteria = _.clone(criteria);","","    // Normalize Arguments","    cb = normalize.callback(cb);","","    // Build Default Error Message","    var err = '.findOne() requires a criteria. If you want the first record try .find().limit(1)';","","    // If no criteria is specified or where is empty return an error","    if (!criteria || criteria.where === null) return cb(new Error(err));","","    // Detects if there is a `findOne` in the adapter. Use it if it exists.","    if (hasOwnProperty(this.dictionary, 'findOne')) {","      var connName = this.dictionary.findOne;","      var adapter = this.connections[connName]._adapter;","","      if (adapter.findOne) {","        // Normalize Arguments","        criteria = normalize.criteria(criteria);","        return adapter.findOne(connName, this.collection, criteria, cb);","      }","    }","","    // Fallback to use `find()` to simulate a `findOne()`","    // Enforce limit to 1","    criteria.limit = 1;","","    this.find(criteria, function(err, models) {","      if (!models) return cb(err);","      if (models.length < 1) return cb(err);","","      cb(null, models);","    });","  },","","  /**","   * [count description]","   * @param  {[type]}   criteria [description]","   * @param  {Function} cb       [description]","   * @return {[type]}            [description]","   */","  count: function(criteria, cb) {","    var connName;","","    // Normalize Arguments","    cb = normalize.callback(cb);","    criteria = normalize.criteria(criteria);","","    // Build Default Error Message","    var err = '.count() requires the adapter define either a count method or a find method';","","    // Find the connection to run this on","    if (!hasOwnProperty(this.dictionary, 'count')) {","","      // If a count method isn't defined make sure a find method is","      if (!hasOwnProperty(this.dictionary, 'find')) return cb(new Error(err));","","      // Use the find method","      connName = this.dictionary.find;","    }","","    if (!connName) connName = this.dictionary.count;","    var adapter = this.connections[connName]._adapter;","","    if (hasOwnProperty(adapter, 'count')) return adapter.count(connName, this.collection, criteria, cb);","","    this.find(criteria, function(err, models) {","      if (err) return cb(err);","      var count = models && models.length || 0;","      cb(err, count);","    });","  },","","","  /**","   * [update description]","   * @param  {[type]}   criteria [description]","   * @param  {[type]}   values   [description]","   * @param  {Function} cb       [description]","   * @return {[type]}            [description]","   */","  update: function(criteria, values, cb) {","    var globalId = this.query.globalId;","","","    // Normalize Arguments","    cb = normalize.callback(cb);","    criteria = normalize.criteria(criteria);","","    if (criteria === false) {","      return cb(null, []);","    } else if (!criteria) {","      return cb(new Error('No criteria or id specified!'));","    }","","    // Build Default Error Message","    var err = 'No update() method defined in adapter!';","","    // Find the connection to run this on","    if (!hasOwnProperty(this.dictionary, 'update')) return cb(new Error(err));","","    var connName = this.dictionary.update;","    var adapter = this.connections[connName]._adapter;","","    adapter.update(connName, this.collection, criteria, values, normalize.callback(function afterwards(err, updatedRecords) {","      if (err) {","        if (typeof err === 'object') err.model = globalId;","        return cb(err);","      }","      return cb(null, updatedRecords);","    }));","  },","","","  /**","   * [destroy description]","   * @param  {[type]}   criteria [description]","   * @param  {Function} cb       [description]","   * @return {[type]}            [description]","   */","  destroy: function(criteria, cb) {","","    // Normalize Arguments","    cb = normalize.callback(cb);","    criteria = normalize.criteria(criteria);","","    // Build Default Error Message","    var err = 'No destroy() method defined in adapter!';","","    // Find the connection to run this on","    if (!hasOwnProperty(this.dictionary, 'destroy')) return cb(new Error(err));","","    var connName = this.dictionary.destroy;","    var adapter = this.connections[connName]._adapter;","","    adapter.destroy(connName, this.collection, criteria, cb);","  }","","};",""],"l":{"5":1,"6":1,"7":1,"8":1,"14":1,"17":0,"34":0,"35":0,"38":0,"41":0,"43":0,"44":0,"46":0,"50":0,"52":0,"67":0,"70":0,"72":0,"75":0,"78":0,"80":0,"81":0,"83":0,"84":0,"85":0,"86":0,"87":0,"89":0,"106":0,"107":0,"110":0,"113":0,"115":0,"116":0,"118":0,"119":0,"135":0,"138":0,"141":0,"144":0,"147":0,"148":0,"149":0,"151":0,"153":0,"154":0,"160":0,"162":0,"163":0,"164":0,"166":0,"177":0,"180":0,"181":0,"184":0,"187":0,"190":0,"193":0,"196":0,"197":0,"199":0,"201":0,"202":0,"203":0,"204":0,"217":0,"221":0,"222":0,"224":0,"225":0,"226":0,"227":0,"231":0,"234":0,"236":0,"237":0,"239":0,"240":0,"241":0,"242":0,"244":0,"258":0,"259":0,"262":0,"265":0,"267":0,"268":0,"270":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/normalize.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/normalize.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":1,"166":0,"167":1,"168":0,"169":0,"170":0,"171":1,"172":0,"173":1,"174":0,"175":1,"176":0,"177":1,"178":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0,0],"21":[0,0],"22":[0,0],"23":[0,0,0,0,0,0,0,0,0,0,0,0],"24":[0,0],"25":[0,0],"26":[0,0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0,0],"37":[0,0],"38":[0,0,0],"39":[0,0],"40":[0,0,0],"41":[0,0],"42":[0,0,0],"43":[0,0],"44":[0,0,0],"45":[0,0],"46":[0,0,0],"47":[0,0],"48":[0,0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},"fnMap":{"1":{"name":"(anonymous_1)","line":11,"loc":{"start":{"line":11,"column":12},"end":{"line":11,"column":39}}},"2":{"name":"(anonymous_2)","line":52,"loc":{"start":{"line":52,"column":19},"end":{"line":52,"column":32}}},"3":{"name":"(anonymous_3)","line":54,"loc":{"start":{"line":54,"column":19},"end":{"line":54,"column":32}}},"4":{"name":"(anonymous_4)","line":58,"loc":{"start":{"line":58,"column":19},"end":{"line":58,"column":32}}},"5":{"name":"(anonymous_5)","line":79,"loc":{"start":{"line":79,"column":12},"end":{"line":79,"column":35}}},"6":{"name":"(anonymous_6)","line":96,"loc":{"start":{"line":96,"column":21},"end":{"line":96,"column":40}}},"7":{"name":"(anonymous_7)","line":200,"loc":{"start":{"line":200,"column":42},"end":{"line":200,"column":56}}},"8":{"name":"(anonymous_8)","line":219,"loc":{"start":{"line":219,"column":32},"end":{"line":219,"column":52}}},"9":{"name":"(anonymous_9)","line":220,"loc":{"start":{"line":220,"column":36},"end":{"line":220,"column":50}}},"10":{"name":"(anonymous_10)","line":246,"loc":{"start":{"line":246,"column":41},"end":{"line":246,"column":56}}},"11":{"name":"(anonymous_11)","line":262,"loc":{"start":{"line":262,"column":41},"end":{"line":262,"column":56}}},"12":{"name":"(anonymous_12)","line":280,"loc":{"start":{"line":280,"column":16},"end":{"line":280,"column":57}}},"13":{"name":"(anonymous_13)","line":299,"loc":{"start":{"line":299,"column":13},"end":{"line":299,"column":33}}},"14":{"name":"(anonymous_14)","line":313,"loc":{"start":{"line":313,"column":12},"end":{"line":313,"column":25}}},"15":{"name":"(anonymous_15)","line":319,"loc":{"start":{"line":319,"column":24},"end":{"line":319,"column":38}}},"16":{"name":"_defaultErrorHandler","line":351,"loc":{"start":{"line":351,"column":13},"end":{"line":351,"column":45}}},"17":{"name":"numberizeModel","line":380,"loc":{"start":{"line":380,"column":0},"end":{"line":380,"column":31}}},"18":{"name":"numberize","line":386,"loc":{"start":{"line":386,"column":0},"end":{"line":386,"column":25}}},"19":{"name":"isNumbery","line":392,"loc":{"start":{"line":392,"column":0},"end":{"line":392,"column":26}}},"20":{"name":"escapeLikeQuery","line":397,"loc":{"start":{"line":397,"column":0},"end":{"line":397,"column":40}}},"21":{"name":"unescapeLikeQuery","line":402,"loc":{"start":{"line":402,"column":0},"end":{"line":402,"column":42}}},"22":{"name":"applyInOriginalCtx","line":420,"loc":{"start":{"line":420,"column":0},"end":{"line":420,"column":38}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":26}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":32}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":37}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":39}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":35}},"6":{"start":{"line":6,"column":0},"end":{"line":6,"column":52}},"7":{"start":{"line":8,"column":0},"end":{"line":376,"column":2}},"8":{"start":{"line":14,"column":4},"end":{"line":14,"column":18}},"9":{"start":{"line":17,"column":4},"end":{"line":29,"column":5}},"10":{"start":{"line":19,"column":6},"end":{"line":28,"column":7}},"11":{"start":{"line":20,"column":8},"end":{"line":20,"column":89}},"12":{"start":{"line":20,"column":80},"end":{"line":20,"column":89}},"13":{"start":{"line":23,"column":8},"end":{"line":23,"column":58}},"14":{"start":{"line":23,"column":49},"end":{"line":23,"column":58}},"15":{"start":{"line":26,"column":8},"end":{"line":26,"column":17}},"16":{"start":{"line":27,"column":8},"end":{"line":27,"column":14}},"17":{"start":{"line":33,"column":4},"end":{"line":40,"column":5}},"18":{"start":{"line":35,"column":6},"end":{"line":35,"column":40}},"19":{"start":{"line":38,"column":6},"end":{"line":38,"column":19}},"20":{"start":{"line":39,"column":6},"end":{"line":39,"column":31}},"21":{"start":{"line":44,"column":4},"end":{"line":72,"column":5}},"22":{"start":{"line":46,"column":6},"end":{"line":46,"column":19}},"23":{"start":{"line":47,"column":6},"end":{"line":49,"column":7}},"24":{"start":{"line":48,"column":8},"end":{"line":48,"column":18}},"25":{"start":{"line":51,"column":6},"end":{"line":59,"column":7}},"26":{"start":{"line":52,"column":8},"end":{"line":52,"column":46}},"27":{"start":{"line":52,"column":33},"end":{"line":52,"column":44}},"28":{"start":{"line":53,"column":13},"end":{"line":59,"column":7}},"29":{"start":{"line":54,"column":8},"end":{"line":54,"column":64}},"30":{"start":{"line":54,"column":33},"end":{"line":54,"column":62}},"31":{"start":{"line":58,"column":8},"end":{"line":58,"column":45}},"32":{"start":{"line":58,"column":33},"end":{"line":58,"column":43}},"33":{"start":{"line":62,"column":6},"end":{"line":70,"column":7}},"34":{"start":{"line":63,"column":8},"end":{"line":63,"column":48}},"35":{"start":{"line":67,"column":8},"end":{"line":69,"column":9}},"36":{"start":{"line":68,"column":10},"end":{"line":68,"column":46}},"37":{"start":{"line":74,"column":4},"end":{"line":74,"column":19}},"38":{"start":{"line":80,"column":4},"end":{"line":80,"column":45}},"39":{"start":{"line":83,"column":4},"end":{"line":83,"column":44}},"40":{"start":{"line":83,"column":28},"end":{"line":83,"column":44}},"41":{"start":{"line":85,"column":4},"end":{"line":89,"column":5}},"42":{"start":{"line":86,"column":6},"end":{"line":88,"column":8}},"43":{"start":{"line":93,"column":4},"end":{"line":93,"column":49}},"44":{"start":{"line":93,"column":33},"end":{"line":93,"column":49}},"45":{"start":{"line":96,"column":4},"end":{"line":98,"column":7}},"46":{"start":{"line":97,"column":6},"end":{"line":97,"column":51}},"47":{"start":{"line":97,"column":30},"end":{"line":97,"column":51}},"48":{"start":{"line":102,"column":4},"end":{"line":106,"column":5}},"49":{"start":{"line":103,"column":6},"end":{"line":105,"column":8}},"50":{"start":{"line":108,"column":4},"end":{"line":110,"column":5}},"51":{"start":{"line":109,"column":6},"end":{"line":109,"column":37}},"52":{"start":{"line":113,"column":4},"end":{"line":113,"column":97}},"53":{"start":{"line":113,"column":31},"end":{"line":113,"column":97}},"54":{"start":{"line":116,"column":4},"end":{"line":132,"column":61}},"55":{"start":{"line":121,"column":6},"end":{"line":121,"column":28}},"56":{"start":{"line":122,"column":6},"end":{"line":122,"column":28}},"57":{"start":{"line":123,"column":6},"end":{"line":123,"column":27}},"58":{"start":{"line":124,"column":6},"end":{"line":124,"column":28}},"59":{"start":{"line":125,"column":6},"end":{"line":125,"column":27}},"60":{"start":{"line":126,"column":6},"end":{"line":126,"column":27}},"61":{"start":{"line":127,"column":6},"end":{"line":129,"column":8}},"62":{"start":{"line":132,"column":11},"end":{"line":132,"column":61}},"63":{"start":{"line":132,"column":41},"end":{"line":132,"column":61}},"64":{"start":{"line":136,"column":4},"end":{"line":143,"column":5}},"65":{"start":{"line":137,"column":6},"end":{"line":137,"column":67}},"66":{"start":{"line":138,"column":6},"end":{"line":138,"column":49}},"67":{"start":{"line":138,"column":30},"end":{"line":138,"column":49}},"68":{"start":{"line":139,"column":6},"end":{"line":139,"column":34}},"69":{"start":{"line":140,"column":11},"end":{"line":143,"column":5}},"70":{"start":{"line":141,"column":6},"end":{"line":141,"column":52}},"71":{"start":{"line":142,"column":6},"end":{"line":142,"column":49}},"72":{"start":{"line":142,"column":30},"end":{"line":142,"column":49}},"73":{"start":{"line":145,"column":4},"end":{"line":152,"column":5}},"74":{"start":{"line":146,"column":6},"end":{"line":146,"column":65}},"75":{"start":{"line":147,"column":6},"end":{"line":147,"column":47}},"76":{"start":{"line":147,"column":29},"end":{"line":147,"column":47}},"77":{"start":{"line":148,"column":6},"end":{"line":148,"column":33}},"78":{"start":{"line":149,"column":11},"end":{"line":152,"column":5}},"79":{"start":{"line":150,"column":6},"end":{"line":150,"column":50}},"80":{"start":{"line":151,"column":6},"end":{"line":151,"column":47}},"81":{"start":{"line":151,"column":29},"end":{"line":151,"column":47}},"82":{"start":{"line":154,"column":4},"end":{"line":157,"column":5}},"83":{"start":{"line":155,"column":6},"end":{"line":155,"column":51}},"84":{"start":{"line":156,"column":6},"end":{"line":156,"column":33}},"85":{"start":{"line":160,"column":4},"end":{"line":163,"column":5}},"86":{"start":{"line":161,"column":6},"end":{"line":161,"column":49}},"87":{"start":{"line":162,"column":6},"end":{"line":162,"column":32}},"88":{"start":{"line":165,"column":4},"end":{"line":168,"column":5}},"89":{"start":{"line":166,"column":6},"end":{"line":166,"column":57}},"90":{"start":{"line":167,"column":6},"end":{"line":167,"column":36}},"91":{"start":{"line":170,"column":4},"end":{"line":173,"column":5}},"92":{"start":{"line":171,"column":6},"end":{"line":171,"column":57}},"93":{"start":{"line":172,"column":6},"end":{"line":172,"column":36}},"94":{"start":{"line":175,"column":4},"end":{"line":178,"column":5}},"95":{"start":{"line":176,"column":6},"end":{"line":176,"column":49}},"96":{"start":{"line":177,"column":6},"end":{"line":177,"column":32}},"97":{"start":{"line":180,"column":4},"end":{"line":183,"column":5}},"98":{"start":{"line":181,"column":6},"end":{"line":181,"column":49}},"99":{"start":{"line":182,"column":6},"end":{"line":182,"column":32}},"100":{"start":{"line":185,"column":4},"end":{"line":188,"column":5}},"101":{"start":{"line":186,"column":6},"end":{"line":186,"column":55}},"102":{"start":{"line":187,"column":6},"end":{"line":187,"column":35}},"103":{"start":{"line":191,"column":4},"end":{"line":193,"column":5}},"104":{"start":{"line":192,"column":6},"end":{"line":192,"column":28}},"105":{"start":{"line":198,"column":4},"end":{"line":207,"column":5}},"106":{"start":{"line":199,"column":6},"end":{"line":199,"column":24}},"107":{"start":{"line":200,"column":6},"end":{"line":204,"column":9}},"108":{"start":{"line":201,"column":8},"end":{"line":203,"column":9}},"109":{"start":{"line":202,"column":10},"end":{"line":202,"column":23}},"110":{"start":{"line":206,"column":6},"end":{"line":206,"column":30}},"111":{"start":{"line":206,"column":17},"end":{"line":206,"column":30}},"112":{"start":{"line":211,"column":4},"end":{"line":228,"column":5}},"113":{"start":{"line":214,"column":6},"end":{"line":216,"column":7}},"114":{"start":{"line":215,"column":8},"end":{"line":215,"column":107}},"115":{"start":{"line":218,"column":6},"end":{"line":218,"column":50}},"116":{"start":{"line":219,"column":6},"end":{"line":225,"column":9}},"117":{"start":{"line":220,"column":8},"end":{"line":224,"column":11}},"118":{"start":{"line":221,"column":10},"end":{"line":223,"column":11}},"119":{"start":{"line":222,"column":12},"end":{"line":222,"column":32}},"120":{"start":{"line":227,"column":6},"end":{"line":227,"column":33}},"121":{"start":{"line":231,"column":4},"end":{"line":271,"column":5}},"122":{"start":{"line":234,"column":6},"end":{"line":243,"column":7}},"123":{"start":{"line":235,"column":8},"end":{"line":235,"column":45}},"124":{"start":{"line":238,"column":8},"end":{"line":238,"column":61}},"125":{"start":{"line":241,"column":8},"end":{"line":241,"column":27}},"126":{"start":{"line":242,"column":8},"end":{"line":242,"column":43}},"127":{"start":{"line":246,"column":6},"end":{"line":259,"column":9}},"128":{"start":{"line":248,"column":8},"end":{"line":255,"column":9}},"129":{"start":{"line":249,"column":10},"end":{"line":249,"column":66}},"130":{"start":{"line":252,"column":10},"end":{"line":254,"column":11}},"131":{"start":{"line":253,"column":12},"end":{"line":253,"column":80}},"132":{"start":{"line":257,"column":8},"end":{"line":257,"column":67}},"133":{"start":{"line":257,"column":43},"end":{"line":257,"column":67}},"134":{"start":{"line":258,"column":8},"end":{"line":258,"column":69}},"135":{"start":{"line":258,"column":44},"end":{"line":258,"column":69}},"136":{"start":{"line":262,"column":6},"end":{"line":264,"column":9}},"137":{"start":{"line":263,"column":8},"end":{"line":263,"column":64}},"138":{"start":{"line":263,"column":39},"end":{"line":263,"column":64}},"139":{"start":{"line":268,"column":6},"end":{"line":270,"column":7}},"140":{"start":{"line":269,"column":8},"end":{"line":269,"column":93}},"141":{"start":{"line":273,"column":4},"end":{"line":273,"column":20}},"142":{"start":{"line":283,"column":4},"end":{"line":283,"column":52}},"143":{"start":{"line":283,"column":39},"end":{"line":283,"column":52}},"144":{"start":{"line":285,"column":4},"end":{"line":285,"column":33}},"145":{"start":{"line":287,"column":4},"end":{"line":287,"column":56}},"146":{"start":{"line":287,"column":25},"end":{"line":287,"column":56}},"147":{"start":{"line":290,"column":4},"end":{"line":290,"column":73}},"148":{"start":{"line":290,"column":18},"end":{"line":290,"column":73}},"149":{"start":{"line":292,"column":4},"end":{"line":292,"column":46}},"150":{"start":{"line":294,"column":4},"end":{"line":294,"column":20}},"151":{"start":{"line":302,"column":4},"end":{"line":302,"column":53}},"152":{"start":{"line":317,"column":4},"end":{"line":317,"column":24}},"153":{"start":{"line":318,"column":4},"end":{"line":337,"column":5}},"154":{"start":{"line":319,"column":6},"end":{"line":336,"column":8}},"155":{"start":{"line":323,"column":8},"end":{"line":325,"column":9}},"156":{"start":{"line":324,"column":10},"end":{"line":324,"column":51}},"157":{"start":{"line":329,"column":8},"end":{"line":329,"column":28}},"158":{"start":{"line":331,"column":8},"end":{"line":331,"column":68}},"159":{"start":{"line":332,"column":8},"end":{"line":332,"column":34}},"160":{"start":{"line":335,"column":8},"end":{"line":335,"column":52}},"161":{"start":{"line":348,"column":4},"end":{"line":348,"column":48}},"162":{"start":{"line":348,"column":27},"end":{"line":348,"column":48}},"163":{"start":{"line":349,"column":4},"end":{"line":354,"column":7}},"164":{"start":{"line":352,"column":8},"end":{"line":352,"column":76}},"165":{"start":{"line":380,"column":0},"end":{"line":382,"column":1}},"166":{"start":{"line":381,"column":2},"end":{"line":381,"column":39}},"167":{"start":{"line":386,"column":0},"end":{"line":389,"column":1}},"168":{"start":{"line":387,"column":2},"end":{"line":388,"column":19}},"169":{"start":{"line":387,"column":83},"end":{"line":387,"column":96}},"170":{"start":{"line":388,"column":7},"end":{"line":388,"column":19}},"171":{"start":{"line":392,"column":0},"end":{"line":394,"column":1}},"172":{"start":{"line":393,"column":2},"end":{"line":393,"column":33}},"173":{"start":{"line":397,"column":0},"end":{"line":399,"column":1}},"174":{"start":{"line":398,"column":2},"end":{"line":398,"column":52}},"175":{"start":{"line":402,"column":0},"end":{"line":404,"column":1}},"176":{"start":{"line":403,"column":2},"end":{"line":403,"column":44}},"177":{"start":{"line":420,"column":0},"end":{"line":422,"column":1}},"178":{"start":{"line":421,"column":2},"end":{"line":421,"column":82}}},"branchMap":{"1":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":17,"column":4}},{"start":{"line":17,"column":4},"end":{"line":17,"column":4}}]},"2":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":8},"end":{"line":20,"column":8}},{"start":{"line":20,"column":8},"end":{"line":20,"column":8}}]},"3":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":8},"end":{"line":23,"column":8}},{"start":{"line":23,"column":8},"end":{"line":23,"column":8}}]},"4":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":4},"end":{"line":33,"column":4}},{"start":{"line":33,"column":4},"end":{"line":33,"column":4}}]},"5":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":8},"end":{"line":33,"column":27}},{"start":{"line":33,"column":31},"end":{"line":33,"column":50}},{"start":{"line":33,"column":54},"end":{"line":33,"column":76}}]},"6":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]},"7":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":8},"end":{"line":44,"column":15}},{"start":{"line":44,"column":19},"end":{"line":44,"column":30}}]},"8":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":6},"end":{"line":47,"column":6}},{"start":{"line":47,"column":6},"end":{"line":47,"column":6}}]},"9":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":6},"end":{"line":51,"column":6}},{"start":{"line":51,"column":6},"end":{"line":51,"column":6}}]},"10":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":13},"end":{"line":53,"column":13}},{"start":{"line":53,"column":13},"end":{"line":53,"column":13}}]},"11":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":6},"end":{"line":62,"column":6}},{"start":{"line":62,"column":6},"end":{"line":62,"column":6}}]},"12":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":8},"end":{"line":67,"column":8}},{"start":{"line":67,"column":8},"end":{"line":67,"column":8}}]},"13":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":4},"end":{"line":83,"column":4}},{"start":{"line":83,"column":4},"end":{"line":83,"column":4}}]},"14":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":4},"end":{"line":85,"column":4}},{"start":{"line":85,"column":4},"end":{"line":85,"column":4}}]},"15":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":4},"end":{"line":93,"column":4}},{"start":{"line":93,"column":4},"end":{"line":93,"column":4}}]},"16":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":6},"end":{"line":97,"column":6}},{"start":{"line":97,"column":6},"end":{"line":97,"column":6}}]},"17":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":4},"end":{"line":102,"column":4}},{"start":{"line":102,"column":4},"end":{"line":102,"column":4}}]},"18":{"line":104,"type":"binary-expr","locations":[{"start":{"line":104,"column":12},"end":{"line":104,"column":21}},{"start":{"line":104,"column":25},"end":{"line":104,"column":33}}]},"19":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":4},"end":{"line":108,"column":4}},{"start":{"line":108,"column":4},"end":{"line":108,"column":4}}]},"20":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":8},"end":{"line":108,"column":28}},{"start":{"line":108,"column":32},"end":{"line":108,"column":47}},{"start":{"line":108,"column":51},"end":{"line":108,"column":74}}]},"21":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":4},"end":{"line":113,"column":4}},{"start":{"line":113,"column":4},"end":{"line":113,"column":4}}]},"22":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":4},"end":{"line":116,"column":4}},{"start":{"line":116,"column":4},"end":{"line":116,"column":4}}]},"23":{"line":116,"type":"binary-expr","locations":[{"start":{"line":116,"column":8},"end":{"line":116,"column":23}},{"start":{"line":116,"column":27},"end":{"line":116,"column":42}},{"start":{"line":116,"column":46},"end":{"line":116,"column":60}},{"start":{"line":116,"column":64},"end":{"line":116,"column":79}},{"start":{"line":116,"column":83},"end":{"line":116,"column":97}},{"start":{"line":117,"column":6},"end":{"line":117,"column":20}},{"start":{"line":117,"column":24},"end":{"line":117,"column":37}},{"start":{"line":117,"column":41},"end":{"line":117,"column":58}},{"start":{"line":118,"column":6},"end":{"line":118,"column":23}},{"start":{"line":118,"column":27},"end":{"line":118,"column":40}},{"start":{"line":118,"column":44},"end":{"line":118,"column":57}},{"start":{"line":118,"column":61},"end":{"line":118,"column":77}}]},"24":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":11},"end":{"line":132,"column":11}},{"start":{"line":132,"column":11},"end":{"line":132,"column":11}}]},"25":{"line":136,"type":"if","locations":[{"start":{"line":136,"column":4},"end":{"line":136,"column":4}},{"start":{"line":136,"column":4},"end":{"line":136,"column":4}}]},"26":{"line":136,"type":"binary-expr","locations":[{"start":{"line":136,"column":8},"end":{"line":136,"column":30}},{"start":{"line":136,"column":34},"end":{"line":136,"column":57}},{"start":{"line":136,"column":61},"end":{"line":136,"column":89}}]},"27":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":6},"end":{"line":138,"column":6}},{"start":{"line":138,"column":6},"end":{"line":138,"column":6}}]},"28":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":11},"end":{"line":140,"column":11}},{"start":{"line":140,"column":11},"end":{"line":140,"column":11}}]},"29":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":6},"end":{"line":142,"column":6}},{"start":{"line":142,"column":6},"end":{"line":142,"column":6}}]},"30":{"line":145,"type":"if","locations":[{"start":{"line":145,"column":4},"end":{"line":145,"column":4}},{"start":{"line":145,"column":4},"end":{"line":145,"column":4}}]},"31":{"line":145,"type":"binary-expr","locations":[{"start":{"line":145,"column":8},"end":{"line":145,"column":30}},{"start":{"line":145,"column":34},"end":{"line":145,"column":57}},{"start":{"line":145,"column":61},"end":{"line":145,"column":88}}]},"32":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":6},"end":{"line":147,"column":6}},{"start":{"line":147,"column":6},"end":{"line":147,"column":6}}]},"33":{"line":149,"type":"if","locations":[{"start":{"line":149,"column":11},"end":{"line":149,"column":11}},{"start":{"line":149,"column":11},"end":{"line":149,"column":11}}]},"34":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":6},"end":{"line":151,"column":6}},{"start":{"line":151,"column":6},"end":{"line":151,"column":6}}]},"35":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":4},"end":{"line":154,"column":4}},{"start":{"line":154,"column":4},"end":{"line":154,"column":4}}]},"36":{"line":154,"type":"binary-expr","locations":[{"start":{"line":154,"column":8},"end":{"line":154,"column":30}},{"start":{"line":154,"column":34},"end":{"line":154,"column":57}},{"start":{"line":154,"column":61},"end":{"line":154,"column":88}}]},"37":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":4},"end":{"line":160,"column":4}},{"start":{"line":160,"column":4},"end":{"line":160,"column":4}}]},"38":{"line":160,"type":"binary-expr","locations":[{"start":{"line":160,"column":8},"end":{"line":160,"column":30}},{"start":{"line":160,"column":34},"end":{"line":160,"column":57}},{"start":{"line":160,"column":61},"end":{"line":160,"column":87}}]},"39":{"line":165,"type":"if","locations":[{"start":{"line":165,"column":4},"end":{"line":165,"column":4}},{"start":{"line":165,"column":4},"end":{"line":165,"column":4}}]},"40":{"line":165,"type":"binary-expr","locations":[{"start":{"line":165,"column":8},"end":{"line":165,"column":30}},{"start":{"line":165,"column":34},"end":{"line":165,"column":57}},{"start":{"line":165,"column":61},"end":{"line":165,"column":91}}]},"41":{"line":170,"type":"if","locations":[{"start":{"line":170,"column":4},"end":{"line":170,"column":4}},{"start":{"line":170,"column":4},"end":{"line":170,"column":4}}]},"42":{"line":170,"type":"binary-expr","locations":[{"start":{"line":170,"column":8},"end":{"line":170,"column":30}},{"start":{"line":170,"column":34},"end":{"line":170,"column":57}},{"start":{"line":170,"column":61},"end":{"line":170,"column":91}}]},"43":{"line":175,"type":"if","locations":[{"start":{"line":175,"column":4},"end":{"line":175,"column":4}},{"start":{"line":175,"column":4},"end":{"line":175,"column":4}}]},"44":{"line":175,"type":"binary-expr","locations":[{"start":{"line":175,"column":8},"end":{"line":175,"column":30}},{"start":{"line":175,"column":34},"end":{"line":175,"column":57}},{"start":{"line":175,"column":61},"end":{"line":175,"column":87}}]},"45":{"line":180,"type":"if","locations":[{"start":{"line":180,"column":4},"end":{"line":180,"column":4}},{"start":{"line":180,"column":4},"end":{"line":180,"column":4}}]},"46":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":8},"end":{"line":180,"column":30}},{"start":{"line":180,"column":34},"end":{"line":180,"column":57}},{"start":{"line":180,"column":61},"end":{"line":180,"column":87}}]},"47":{"line":185,"type":"if","locations":[{"start":{"line":185,"column":4},"end":{"line":185,"column":4}},{"start":{"line":185,"column":4},"end":{"line":185,"column":4}}]},"48":{"line":185,"type":"binary-expr","locations":[{"start":{"line":185,"column":8},"end":{"line":185,"column":30}},{"start":{"line":185,"column":34},"end":{"line":185,"column":57}},{"start":{"line":185,"column":61},"end":{"line":185,"column":90}}]},"49":{"line":191,"type":"if","locations":[{"start":{"line":191,"column":4},"end":{"line":191,"column":4}},{"start":{"line":191,"column":4},"end":{"line":191,"column":4}}]},"50":{"line":191,"type":"binary-expr","locations":[{"start":{"line":191,"column":8},"end":{"line":191,"column":22}},{"start":{"line":191,"column":26},"end":{"line":191,"column":61}}]},"51":{"line":198,"type":"if","locations":[{"start":{"line":198,"column":4},"end":{"line":198,"column":4}},{"start":{"line":198,"column":4},"end":{"line":198,"column":4}}]},"52":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":8},"end":{"line":201,"column":8}},{"start":{"line":201,"column":8},"end":{"line":201,"column":8}}]},"53":{"line":201,"type":"binary-expr","locations":[{"start":{"line":201,"column":12},"end":{"line":201,"column":46}},{"start":{"line":201,"column":50},"end":{"line":201,"column":82}}]},"54":{"line":206,"type":"if","locations":[{"start":{"line":206,"column":6},"end":{"line":206,"column":6}},{"start":{"line":206,"column":6},"end":{"line":206,"column":6}}]},"55":{"line":211,"type":"if","locations":[{"start":{"line":211,"column":4},"end":{"line":211,"column":4}},{"start":{"line":211,"column":4},"end":{"line":211,"column":4}}]},"56":{"line":211,"type":"binary-expr","locations":[{"start":{"line":211,"column":8},"end":{"line":211,"column":22}},{"start":{"line":211,"column":26},"end":{"line":211,"column":51}}]},"57":{"line":214,"type":"if","locations":[{"start":{"line":214,"column":6},"end":{"line":214,"column":6}},{"start":{"line":214,"column":6},"end":{"line":214,"column":6}}]},"58":{"line":221,"type":"if","locations":[{"start":{"line":221,"column":10},"end":{"line":221,"column":10}},{"start":{"line":221,"column":10},"end":{"line":221,"column":10}}]},"59":{"line":221,"type":"binary-expr","locations":[{"start":{"line":221,"column":14},"end":{"line":221,"column":40}},{"start":{"line":221,"column":44},"end":{"line":221,"column":68}}]},"60":{"line":231,"type":"if","locations":[{"start":{"line":231,"column":4},"end":{"line":231,"column":4}},{"start":{"line":231,"column":4},"end":{"line":231,"column":4}}]},"61":{"line":231,"type":"binary-expr","locations":[{"start":{"line":231,"column":8},"end":{"line":231,"column":29}},{"start":{"line":231,"column":33},"end":{"line":231,"column":55}}]},"62":{"line":234,"type":"if","locations":[{"start":{"line":234,"column":6},"end":{"line":234,"column":6}},{"start":{"line":234,"column":6},"end":{"line":234,"column":6}}]},"63":{"line":238,"type":"cond-expr","locations":[{"start":{"line":238,"column":30},"end":{"line":238,"column":52}},{"start":{"line":238,"column":55},"end":{"line":238,"column":60}}]},"64":{"line":248,"type":"if","locations":[{"start":{"line":248,"column":8},"end":{"line":248,"column":8}},{"start":{"line":248,"column":8},"end":{"line":248,"column":8}}]},"65":{"line":252,"type":"if","locations":[{"start":{"line":252,"column":10},"end":{"line":252,"column":10}},{"start":{"line":252,"column":10},"end":{"line":252,"column":10}}]},"66":{"line":252,"type":"binary-expr","locations":[{"start":{"line":252,"column":14},"end":{"line":252,"column":43}},{"start":{"line":252,"column":47},"end":{"line":252,"column":77}}]},"67":{"line":257,"type":"if","locations":[{"start":{"line":257,"column":8},"end":{"line":257,"column":8}},{"start":{"line":257,"column":8},"end":{"line":257,"column":8}}]},"68":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8}},{"start":{"line":258,"column":8},"end":{"line":258,"column":8}}]},"69":{"line":263,"type":"if","locations":[{"start":{"line":263,"column":8},"end":{"line":263,"column":8}},{"start":{"line":263,"column":8},"end":{"line":263,"column":8}}]},"70":{"line":268,"type":"if","locations":[{"start":{"line":268,"column":6},"end":{"line":268,"column":6}},{"start":{"line":268,"column":6},"end":{"line":268,"column":6}}]},"71":{"line":268,"type":"binary-expr","locations":[{"start":{"line":268,"column":10},"end":{"line":268,"column":36}},{"start":{"line":268,"column":40},"end":{"line":268,"column":68}}]},"72":{"line":283,"type":"if","locations":[{"start":{"line":283,"column":4},"end":{"line":283,"column":4}},{"start":{"line":283,"column":4},"end":{"line":283,"column":4}}]},"73":{"line":287,"type":"if","locations":[{"start":{"line":287,"column":4},"end":{"line":287,"column":4}},{"start":{"line":287,"column":4},"end":{"line":287,"column":4}}]},"74":{"line":290,"type":"if","locations":[{"start":{"line":290,"column":4},"end":{"line":290,"column":4}},{"start":{"line":290,"column":4},"end":{"line":290,"column":4}}]},"75":{"line":318,"type":"if","locations":[{"start":{"line":318,"column":4},"end":{"line":318,"column":4}},{"start":{"line":318,"column":4},"end":{"line":318,"column":4}}]},"76":{"line":323,"type":"if","locations":[{"start":{"line":323,"column":8},"end":{"line":323,"column":8}},{"start":{"line":323,"column":8},"end":{"line":323,"column":8}}]},"77":{"line":348,"type":"if","locations":[{"start":{"line":348,"column":4},"end":{"line":348,"column":4}},{"start":{"line":348,"column":4},"end":{"line":348,"column":4}}]},"78":{"line":387,"type":"if","locations":[{"start":{"line":387,"column":2},"end":{"line":387,"column":2}},{"start":{"line":387,"column":2},"end":{"line":387,"column":2}}]},"79":{"line":387,"type":"binary-expr","locations":[{"start":{"line":387,"column":6},"end":{"line":387,"column":22}},{"start":{"line":387,"column":26},"end":{"line":387,"column":41}},{"start":{"line":387,"column":45},"end":{"line":387,"column":81}}]}},"code":["var _ = require('lodash');","var util = require('./helpers');","var hop = util.object.hasOwnProperty;","var switchback = require('switchback');","var errorify = require('../error');","var WLUsageError = require('../error/WLUsageError');","","var normalize = module.exports = {","","  // Expand Primary Key criteria into objects","  expandPK: function(context, options) {","","    // Default to id as primary key","    var pk = 'id';","","    // If autoPK is not used, attempt to find a primary key","    if (!context.autoPK) {","      // Check which attribute is used as primary key","      for (var key in context.attributes) {","        if (!util.object.hasOwnProperty(context.attributes[key], 'primaryKey')) continue;","","        // Check if custom primaryKey value is falsy","        if (!context.attributes[key].primaryKey) continue;","","        // If a custom primary key is defined, use it","        pk = key;","        break;","      }","    }","","    // Check if options is an integer or string and normalize criteria","    // to object, using the specified primary key field.","    if (_.isNumber(options) || _.isString(options) || Array.isArray(options)) {","      // Temporary store the given criteria","      var pkCriteria = _.clone(options);","","      // Make the criteria object, with the primary key","      options = {};","      options[pk] = pkCriteria;","    }","","    // If we're querying by primary key, create a coercion function for it","    // depending on the data type of the key","    if (options && options[pk]) {","","      var coercePK;","      if(!context.attributes[pk]) {","        return pk;","      }","      ","      if (context.attributes[pk].type == 'integer') {","        coercePK = function(pk) {return +pk;};","      } else if (context.attributes[pk].type == 'string') {","        coercePK = function(pk) {return String(pk).toString();};","","      // If the data type is unspecified, return the key as-is","      } else {","        coercePK = function(pk) {return pk;};","      }","","      // If the criteria is an array of PKs, coerce them all","      if (Array.isArray(options[pk])) {","        options[pk] = options[pk].map(coercePK);","","      // Otherwise just coerce the one","      } else {","        if (!_.isObject(options[pk])) {","          options[pk] = coercePK(options[pk]);","        }","      }","","    }","","    return options;","","  },","","  // Normalize the different ways of specifying criteria into a uniform object","  criteria: function(origCriteria) {","    var criteria = _.cloneDeep(origCriteria);","","    // If original criteria is already false, keep it that way.","    if (criteria === false) return criteria;","","    if (!criteria) {","      return {","        where: null","      };","    }","","    // Let the calling method normalize array criteria. It could be an IN query","    // where we need the PK of the collection or a .findOrCreateEach","    if (Array.isArray(criteria)) return criteria;","","    // Empty undefined values from criteria object","    _.each(criteria, function(val, key) {","      if (_.isUndefined(val)) criteria[key] = null;","    });","","    // Convert non-objects (ids) into a criteria","    // TODO: use customizable primary key attribute","    if (!_.isObject(criteria)) {","      criteria = {","        id: +criteria || criteria","      };","    }","","    if (_.isObject(criteria) && !criteria.where && criteria.where !== null) {","      criteria = { where: criteria };","    }","","    // Return string to indicate an error","    if (!_.isObject(criteria)) throw new WLUsageError('Invalid options/criteria :: ' + criteria);","","    // If criteria doesn't seem to contain operational keys, assume all the keys are criteria","    if (!criteria.where && !criteria.joins && !criteria.join && !criteria.limit && !criteria.skip &&","      !criteria.sort && !criteria.sum && !criteria.average &&","      !criteria.groupBy && !criteria.min && !criteria.max && !criteria.select) {","","      // Delete any residuals and then use the remaining keys as attributes in a criteria query","      delete criteria.where;","      delete criteria.joins;","      delete criteria.join;","      delete criteria.limit;","      delete criteria.skip;","      delete criteria.sort;","      criteria = {","        where: criteria","      };","","    // If where is null, turn it into an object","    } else if (_.isNull(criteria.where)) criteria.where = {};","","","    // Move Limit, Skip, sort outside the where criteria","    if (hop(criteria, 'where') && criteria.where !== null && hop(criteria.where, 'limit')) {","      criteria.limit = parseInt(_.clone(criteria.where.limit), 10);","      if (criteria.limit < 0) criteria.limit = 0;","      delete criteria.where.limit;","    } else if (hop(criteria, 'limit')) {","      criteria.limit = parseInt(criteria.limit, 10);","      if (criteria.limit < 0) criteria.limit = 0;","    }","","    if (hop(criteria, 'where') && criteria.where !== null && hop(criteria.where, 'skip')) {","      criteria.skip = parseInt(_.clone(criteria.where.skip), 10);","      if (criteria.skip < 0) criteria.skip = 0;","      delete criteria.where.skip;","    } else if (hop(criteria, 'skip')) {","      criteria.skip = parseInt(criteria.skip, 10);","      if (criteria.skip < 0) criteria.skip = 0;","    }","","    if (hop(criteria, 'where') && criteria.where !== null && hop(criteria.where, 'sort')) {","      criteria.sort = _.clone(criteria.where.sort);","      delete criteria.where.sort;","    }","","    // Pull out aggregation keys from where key","    if (hop(criteria, 'where') && criteria.where !== null && hop(criteria.where, 'sum')) {","      criteria.sum = _.clone(criteria.where.sum);","      delete criteria.where.sum;","    }","","    if (hop(criteria, 'where') && criteria.where !== null && hop(criteria.where, 'average')) {","      criteria.average = _.clone(criteria.where.average);","      delete criteria.where.average;","    }","","    if (hop(criteria, 'where') && criteria.where !== null && hop(criteria.where, 'groupBy')) {","      criteria.groupBy = _.clone(criteria.where.groupBy);","      delete criteria.where.groupBy;","    }","","    if (hop(criteria, 'where') && criteria.where !== null && hop(criteria.where, 'min')) {","      criteria.min = _.clone(criteria.where.min);","      delete criteria.where.min;","    }","","    if (hop(criteria, 'where') && criteria.where !== null && hop(criteria.where, 'max')) {","      criteria.max = _.clone(criteria.where.max);","      delete criteria.where.max;","    }","","    if (hop(criteria, 'where') && criteria.where !== null && hop(criteria.where, 'select')) {","      criteria.select = _.clone(criteria.where.select);","      delete criteria.where.select;","    }","","    // If WHERE is {}, always change it back to null","    if (criteria.where && _.keys(criteria.where).length === 0) {","      criteria.where = null;","    }","","    // If an IN was specified in the top level query and is an empty array, we can return an","    // empty object without running the query because nothing will match anyway. Let's return","    // false from here so the query knows to exit out.","    if (criteria.where) {","      var falsy = false;","      Object.keys(criteria.where).forEach(function(key) {","        if (Array.isArray(criteria.where[key]) && criteria.where[key].length === 0) {","          falsy = true;","        }","      });","","      if (falsy) return false;","    }","","    // If an IN was specified inside an OR clause and is an empty array, remove it because nothing will","    // match it anyway and it can prevent errors in the adapters","    if (criteria.where && hop(criteria.where, 'or')) {","","      // Ensure `or` is an array","      if (!_.isArray(criteria.where.or)) {","        throw new WLUsageError('An `or` clause in a query should be specified as an array of subcriteria');","      }","","      var _clone = _.cloneDeep(criteria.where.or);","      criteria.where.or.forEach(function(clause, i) {","        Object.keys(clause).forEach(function(key) {","          if (Array.isArray(clause[key]) && clause[key].length === 0) {","            _clone.splice(i, 1);","          }","        });","      });","","      criteria.where.or = _clone;","    }","","    // Normalize sort criteria","    if (hop(criteria, 'sort') && criteria.sort !== null) {","","      // Split string into attr and sortDirection parts (default to 'asc')","      if (_.isString(criteria.sort)) {","        var parts = criteria.sort.split(' ');","","        // Set default sort to asc","        parts[1] = parts[1] ? parts[1].toLowerCase() : 'asc';","","        // Expand criteria.sort into object","        criteria.sort = {};","        criteria.sort[parts[0]] = parts[1];","      }","","      // normalize ASC/DESC notation","      Object.keys(criteria.sort).forEach(function(attr) {","","        if (_.isString(criteria.sort[attr])) {","          criteria.sort[attr] = criteria.sort[attr].toLowerCase();","","          // Throw error on invalid sort order","          if (criteria.sort[attr] !== 'asc' && criteria.sort[attr] !== 'desc') {","            throw new WLUsageError('Invalid sort criteria :: ' + criteria.sort);","          }","        }","","        if (criteria.sort[attr] === 'asc') criteria.sort[attr] = 1;","        if (criteria.sort[attr] === 'desc') criteria.sort[attr] = -1;","      });","","      // normalize binary sorting criteria","      Object.keys(criteria.sort).forEach(function(attr) {","        if (criteria.sort[attr] === 0) criteria.sort[attr] = -1;","      });","","      // Verify that user either specified a proper object","      // or provided explicit comparator function","      if (!_.isObject(criteria.sort) && !_.isFunction(criteria.sort)) {","        throw new WLUsageError('Invalid sort criteria for ' + attrName + ' :: ' + direction);","      }","    }","","    return criteria;","  },","","  // Normalize the capitalization and % wildcards in a like query","  // Returns false if criteria is invalid,","  // otherwise returns normalized criteria obj.","  // Enhancer is an optional function to run on each criterion to preprocess the string","  likeCriteria: function(criteria, attributes, enhancer) {","","    // Only accept criteria as an object","    if (criteria !== Object(criteria)) return false;","","    criteria = _.clone(criteria);","","    if (!criteria.where) criteria = { where: criteria };","","    // Apply enhancer to each","    if (enhancer) criteria.where = util.objMap(criteria.where, enhancer);","","    criteria.where = { like: criteria.where };","","    return criteria;","  },","","","  // Normalize a result set from an adapter","  resultSet: function(resultSet) {","","    // Ensure that any numbers that can be parsed have been","    return util.pluralize(resultSet, numberizeModel);","  },","","","  /**","   * Normalize the different ways of specifying callbacks in built-in Waterline methods.","   * Switchbacks vs. Callbacks (but not deferred objects/promises)","   *","   * @param  {Function|Handlers} cb","   * @return {Handlers}","   */","  callback: function(cb) {","","    // Build modified callback:","    // (only works for functions currently)","    var wrappedCallback;","    if (_.isFunction(cb)) {","      wrappedCallback = function(err) {","","        // If no error occurred, immediately trigger the original callback","        // without messing up the context or arguments:","        if (!err) {","          return applyInOriginalCtx(cb, arguments);","        }","","        // If an error argument is present, upgrade it to a WLError","        // (if it isn't one already)","        err = errorify(err);","","        var modifiedArgs = Array.prototype.slice.call(arguments, 1);","        modifiedArgs.unshift(err);","","        // Trigger callback without messing up the context or arguments:","        return applyInOriginalCtx(cb, modifiedArgs);","      };","    }","","","    //","    // TODO: Make it clear that switchback support it experimental.","    //","    // Push switchback support off until >= v0.11","    // or at least add a warning about it being a `stage 1: experimental`","    // feature.","    //","","    if (!_.isFunction(cb)) wrappedCallback = cb;","    return switchback(wrappedCallback, {","      invalid: 'error', // Redirect 'invalid' handler to 'error' handler","      error: function _defaultErrorHandler() {","        console.error.apply(console, Array.prototype.slice.call(arguments));","      }","    });","","","    // ????","    // TODO: determine support target for 2-way switchback usage","    // ????","","    // Allow callback to be -HANDLED- in different ways","    // at the app-level.","    // `cb` may be passed in (at app-level) as either:","    //    => an object of handlers","    //    => or a callback function","    //","    // If a callback function was provided, it will be","    // automatically upgraded to a simplerhandler object.","    // var cb_fromApp = switchback(cb);","","    // Allow callback to be -INVOKED- in different ways.","    // (adapter def)","    // var cb_fromAdapter = cb_fromApp;","","  }","};","","// If any attribute looks like a number, but it's a string","// cast it to a number","function numberizeModel(model) {","  return util.objMap(model, numberize);","}","","","// If specified attr looks like a number, but it's a string, cast it to a number","function numberize(attr) {","  if (_.isString(attr) && isNumbery(attr) && parseInt(attr, 10) < Math.pow(2, 53)) return +attr;","  else return attr;","}","","// Returns whether this value can be successfully parsed as a finite number","function isNumbery(value) {","  return Math.pow(+value, 2) > 0;","}","","// Replace % with %%%","function escapeLikeQuery(likeCriterion) {","  return likeCriterion.replace(/[^%]%[^%]/g, '%%%');","}","","// Replace %%% with %","function unescapeLikeQuery(likeCriterion) {","  return likeCriterion.replace(/%%%/g, '%');","}","","","/**"," * Like _.partial, but accepts an array of arguments instead of"," * comma-seperated args (if _.partial is `call`, this is `apply`.)"," * The biggest difference from `_.partial`, other than the usage,"," * is that this helper actually CALLS the partially applied function."," *"," * This helper is mainly useful for callbacks."," *"," * @param  {Function} fn   [description]"," * @param  {[type]}   args [description]"," * @return {[type]}        [description]"," */","","function applyInOriginalCtx(fn, args) {","  return (_.partial.apply(null, [fn].concat(Array.prototype.slice.call(args))))();","}",""],"l":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"8":1,"14":0,"17":0,"19":0,"20":0,"23":0,"26":0,"27":0,"33":0,"35":0,"38":0,"39":0,"44":0,"46":0,"47":0,"48":0,"51":0,"52":0,"53":0,"54":0,"58":0,"62":0,"63":0,"67":0,"68":0,"74":0,"80":0,"83":0,"85":0,"86":0,"93":0,"96":0,"97":0,"102":0,"103":0,"108":0,"109":0,"113":0,"116":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"132":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"154":0,"155":0,"156":0,"160":0,"161":0,"162":0,"165":0,"166":0,"167":0,"170":0,"171":0,"172":0,"175":0,"176":0,"177":0,"180":0,"181":0,"182":0,"185":0,"186":0,"187":0,"191":0,"192":0,"198":0,"199":0,"200":0,"201":0,"202":0,"206":0,"211":0,"214":0,"215":0,"218":0,"219":0,"220":0,"221":0,"222":0,"227":0,"231":0,"234":0,"235":0,"238":0,"241":0,"242":0,"246":0,"248":0,"249":0,"252":0,"253":0,"257":0,"258":0,"262":0,"263":0,"268":0,"269":0,"273":0,"283":0,"285":0,"287":0,"290":0,"292":0,"294":0,"302":0,"317":0,"318":0,"319":0,"323":0,"324":0,"329":0,"331":0,"332":0,"335":0,"348":0,"349":0,"352":0,"380":1,"381":0,"386":1,"387":0,"388":0,"392":1,"393":0,"397":1,"398":0,"402":1,"403":0,"420":1,"421":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/error/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/error/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"errorify","line":34,"loc":{"start":{"line":34,"column":17},"end":{"line":34,"column":40}}},"2":{"name":"duckType","line":49,"loc":{"start":{"line":49,"column":0},"end":{"line":49,"column":23}}},"3":{"name":"_isConstraintViolation","line":77,"loc":{"start":{"line":77,"column":0},"end":{"line":77,"column":37}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":27}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":26}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":35}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":55}},"5":{"start":{"line":34,"column":0},"end":{"line":40,"column":2}},"6":{"start":{"line":37,"column":2},"end":{"line":37,"column":68}},"7":{"start":{"line":37,"column":57},"end":{"line":37,"column":68}},"8":{"start":{"line":39,"column":2},"end":{"line":39,"column":23}},"9":{"start":{"line":49,"column":0},"end":{"line":69,"column":1}},"10":{"start":{"line":55,"column":2},"end":{"line":60,"column":3}},"11":{"start":{"line":59,"column":4},"end":{"line":59,"column":38}},"12":{"start":{"line":66,"column":2},"end":{"line":68,"column":5}},"13":{"start":{"line":77,"column":0},"end":{"line":88,"column":1}},"14":{"start":{"line":80,"column":2},"end":{"line":87,"column":20}},"15":{"start":{"line":81,"column":4},"end":{"line":81,"column":16}},"16":{"start":{"line":87,"column":7},"end":{"line":87,"column":20}}},"branchMap":{"1":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":2},"end":{"line":37,"column":2}},{"start":{"line":37,"column":2},"end":{"line":37,"column":2}}]},"2":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":6},"end":{"line":37,"column":29}},{"start":{"line":37,"column":33},"end":{"line":37,"column":55}}]},"3":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":2},"end":{"line":55,"column":2}},{"start":{"line":55,"column":2},"end":{"line":55,"column":2}}]},"4":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":2},"end":{"line":80,"column":2}},{"start":{"line":80,"column":2},"end":{"line":80,"column":2}}]},"5":{"line":80,"type":"binary-expr","locations":[{"start":{"line":80,"column":6},"end":{"line":80,"column":9}},{"start":{"line":80,"column":13},"end":{"line":80,"column":36}},{"start":{"line":80,"column":40},"end":{"line":80,"column":63}}]}},"code":["/**"," * Module dependencies"," */","","var util = require('util');","var _ = require('lodash');","var WLError = require('./WLError');","var WLValidationError = require('./WLValidationError');","","","/**"," * A classifier which normalizes a mystery error into a simple,"," * consistent format.  This ensures that our instance which is"," * \"new\"-ed up belongs to one of a handful of distinct categories"," * and has a predictable method signature and properties."," *"," * The returned error instance will always be or extend from"," * `WLError` (which extends from `Error`)"," *"," * NOTE:"," * This method should eventually be deprecated in a"," * future version of Waterline.  It exists to help"," * w/ error type negotiation.  In general, Waterline"," * should use WLError, or errors which extend from it"," * to construct error objects of the appropriate type."," * In other words, no ** new ** errors should need to"," * be wrapped in a call to `errorify` - instead, code"," * necessary to handle any new error conditions should"," * construct a `WLError` directly and return that."," *"," * @param  {???} err"," * @return {WLError}"," */","module.exports = function errorify(err) {","","  // If specified `err` is already a WLError, just return it.","  if (typeof err === 'object' && err instanceof WLError) return err;","","  return duckType(err);","};","","","/**"," * Determine which type of error we're working with."," * Err... using hacks."," *"," * @return {[type]} [description]"," */","function duckType(err) {","","  // Validation or constraint violation error (`E_VALIDATION`)","  //","  // i.e. detected before talking to adapter, like `minLength`","  // i.e. constraint violation reported by adapter, like `unique`","  if (/* _isValidationError(err) || */ _isConstraintViolation(err)) {","","    // Dress `unique` rule violations to be consistent with other","    // validation errors.","    return new WLValidationError(err);","  }","","  // Unexpected miscellaneous error  (`E_UNKNOWN`)","  //","  // (i.e. helmet fire. The database crashed or something. Or there's an adapter","  //  bug. Or a bug in WL core.)","  return new WLError({","    originalError: err","  });","}","","","/**"," * @param  {?} err"," * @return {Boolean} whether this is an adapter-level constraint"," * violation (e.g. `unique`)"," */","function _isConstraintViolation(err) {","","  // If a proper error code is specified, this error can be classified.","  if (err && typeof err === 'object' && err.code === 'E_UNIQUE') {","    return true;","  }","","  // Otherwise, there is not enough information to call this a","  // constraint violation error and provide proper explanation to","  // the architect.","  else return false;","}","","","// /**","//  * @param  {?} err","//  * @return {Boolean} whether this is a validation error (e.g. minLength exceeded for attribute)","//  */","// function _isValidationError(err) {","//   return _.isObject(err) && err.ValidationError;","// }","",""],"l":{"5":1,"6":1,"7":1,"8":1,"34":1,"37":0,"39":0,"49":1,"55":0,"59":0,"66":0,"77":1,"80":0,"81":0,"87":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/adapter/ddl/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/adapter/ddl/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":10},"end":{"line":17,"column":23}}},"2":{"name":"(anonymous_2)","line":42,"loc":{"start":{"line":42,"column":18},"end":{"line":42,"column":52}}},"3":{"name":"(anonymous_3)","line":47,"loc":{"start":{"line":47,"column":34},"end":{"line":47,"column":48}}},"4":{"name":"(anonymous_4)","line":63,"loc":{"start":{"line":63,"column":12},"end":{"line":63,"column":25}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":8},"end":{"line":82,"column":32}}},"6":{"name":"(anonymous_6)","line":113,"loc":{"start":{"line":113,"column":9},"end":{"line":113,"column":22}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":49}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":55}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":74}},"5":{"start":{"line":15,"column":0},"end":{"line":131,"column":2}},"6":{"start":{"line":18,"column":4},"end":{"line":18,"column":20}},"7":{"start":{"line":21,"column":4},"end":{"line":21,"column":32}},"8":{"start":{"line":24,"column":4},"end":{"line":24,"column":58}},"9":{"start":{"line":27,"column":4},"end":{"line":27,"column":58}},"10":{"start":{"line":30,"column":4},"end":{"line":33,"column":7}},"11":{"start":{"line":42,"column":4},"end":{"line":60,"column":7}},"12":{"start":{"line":43,"column":6},"end":{"line":43,"column":30}},"13":{"start":{"line":43,"column":15},"end":{"line":43,"column":30}},"14":{"start":{"line":44,"column":6},"end":{"line":44,"column":132}},"15":{"start":{"line":44,"column":30},"end":{"line":44,"column":132}},"16":{"start":{"line":47,"column":6},"end":{"line":50,"column":9}},"17":{"start":{"line":48,"column":8},"end":{"line":48,"column":37}},"18":{"start":{"line":48,"column":30},"end":{"line":48,"column":37}},"19":{"start":{"line":49,"column":8},"end":{"line":49,"column":27}},"20":{"start":{"line":53,"column":6},"end":{"line":53,"column":66}},"21":{"start":{"line":53,"column":54},"end":{"line":53,"column":66}},"22":{"start":{"line":55,"column":6},"end":{"line":55,"column":44}},"23":{"start":{"line":56,"column":6},"end":{"line":56,"column":56}},"24":{"start":{"line":58,"column":6},"end":{"line":58,"column":75}},"25":{"start":{"line":58,"column":46},"end":{"line":58,"column":75}},"26":{"start":{"line":59,"column":6},"end":{"line":59,"column":60}},"27":{"start":{"line":66,"column":4},"end":{"line":66,"column":32}},"28":{"start":{"line":69,"column":4},"end":{"line":69,"column":57}},"29":{"start":{"line":73,"column":4},"end":{"line":73,"column":66}},"30":{"start":{"line":73,"column":54},"end":{"line":73,"column":66}},"31":{"start":{"line":75,"column":4},"end":{"line":75,"column":44}},"32":{"start":{"line":76,"column":4},"end":{"line":76,"column":54}},"33":{"start":{"line":78,"column":4},"end":{"line":78,"column":72}},"34":{"start":{"line":78,"column":46},"end":{"line":78,"column":72}},"35":{"start":{"line":79,"column":4},"end":{"line":79,"column":52}},"36":{"start":{"line":84,"column":4},"end":{"line":87,"column":5}},"37":{"start":{"line":85,"column":6},"end":{"line":85,"column":21}},"38":{"start":{"line":86,"column":6},"end":{"line":86,"column":21}},"39":{"start":{"line":89,"column":4},"end":{"line":89,"column":19}},"40":{"start":{"line":98,"column":4},"end":{"line":98,"column":32}},"41":{"start":{"line":101,"column":4},"end":{"line":101,"column":53}},"42":{"start":{"line":104,"column":4},"end":{"line":104,"column":76}},"43":{"start":{"line":104,"column":50},"end":{"line":104,"column":76}},"44":{"start":{"line":106,"column":4},"end":{"line":106,"column":40}},"45":{"start":{"line":107,"column":4},"end":{"line":107,"column":54}},"46":{"start":{"line":109,"column":4},"end":{"line":109,"column":68}},"47":{"start":{"line":109,"column":42},"end":{"line":109,"column":68}},"48":{"start":{"line":110,"column":4},"end":{"line":110,"column":59}},"49":{"start":{"line":116,"column":4},"end":{"line":116,"column":32}},"50":{"start":{"line":119,"column":4},"end":{"line":119,"column":54}},"51":{"start":{"line":122,"column":4},"end":{"line":122,"column":77}},"52":{"start":{"line":122,"column":51},"end":{"line":122,"column":77}},"53":{"start":{"line":124,"column":4},"end":{"line":124,"column":41}},"54":{"start":{"line":125,"column":4},"end":{"line":125,"column":54}},"55":{"start":{"line":127,"column":4},"end":{"line":127,"column":69}},"56":{"start":{"line":127,"column":43},"end":{"line":127,"column":69}},"57":{"start":{"line":128,"column":4},"end":{"line":128,"column":49}}},"branchMap":{"1":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":17},"end":{"line":27,"column":51}},{"start":{"line":27,"column":55},"end":{"line":27,"column":57}}]},"2":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":6},"end":{"line":43,"column":6}},{"start":{"line":43,"column":6},"end":{"line":43,"column":6}}]},"3":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":6},"end":{"line":44,"column":6}},{"start":{"line":44,"column":6},"end":{"line":44,"column":6}}]},"4":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":8},"end":{"line":48,"column":8}},{"start":{"line":48,"column":8},"end":{"line":48,"column":8}}]},"5":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":6},"end":{"line":53,"column":6}},{"start":{"line":53,"column":6},"end":{"line":53,"column":6}}]},"6":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":6},"end":{"line":58,"column":6}},{"start":{"line":58,"column":6},"end":{"line":58,"column":6}}]},"7":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":4},"end":{"line":73,"column":4}},{"start":{"line":73,"column":4},"end":{"line":73,"column":4}}]},"8":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":4},"end":{"line":78,"column":4}},{"start":{"line":78,"column":4},"end":{"line":78,"column":4}}]},"9":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":4},"end":{"line":84,"column":4}},{"start":{"line":84,"column":4},"end":{"line":84,"column":4}}]},"10":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":4},"end":{"line":104,"column":4}},{"start":{"line":104,"column":4},"end":{"line":104,"column":4}}]},"11":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":4},"end":{"line":109,"column":4}},{"start":{"line":109,"column":4},"end":{"line":109,"column":4}}]},"12":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":4},"end":{"line":122,"column":4}},{"start":{"line":122,"column":4},"end":{"line":122,"column":4}}]},"13":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":4},"end":{"line":127,"column":4}},{"start":{"line":127,"column":4},"end":{"line":127,"column":4}}]}},"code":["/**"," * Module dependencies"," */","","var _ = require('lodash');","var normalize = require('../../utils/normalize');","var getRelations = require('../../utils/getRelations');","var hasOwnProperty = require('../../utils/helpers').object.hasOwnProperty;","","","/**"," * DDL Adapter Normalization"," */","","module.exports = {","","  define: function(cb) {","    var self = this;","","    // Normalize Arguments","    cb = normalize.callback(cb);","","    // Build Default Error Message","    var errMsg = 'No define() method defined in adapter!';","","    // Grab attributes from definition","    var schema = _.clone(this.query._schema.schema) || {};","","    // Find any junctionTables that reference this collection","    var relations = getRelations({","      schema: self.query.waterline.schema,","      parentCollection: self.collection","    });","","    //","    // TODO: if junction tables don't exist, define them","    // console.log(relations);","    //","","    // Verify that collection doesn't already exist","    // and then define it and trigger callback","    this.describe(function(err, existingAttributes) {","      if (err) return cb(err);","      if (existingAttributes) return cb(new Error('Trying to define a collection (' + self.collection + ') which already exists.'));","","      // Remove hasMany association keys before sending down to adapter","      Object.keys(schema).forEach(function(key) {","        if (schema[key].type) return;","        delete schema[key];","      });","","      // Find the connection to run this on","      if (!hasOwnProperty(self.dictionary, 'define')) return cb();","","      var connName = self.dictionary.define;","      var adapter = self.connections[connName]._adapter;","","      if (!hasOwnProperty(adapter, 'define')) return cb(new Error(errMsg));","      adapter.define(connName, self.collection, schema, cb);","    });","  },","","  describe: function(cb) {","","    // Normalize Arguments","    cb = normalize.callback(cb);","","    // Build Default Error Message","    var err = 'No describe() method defined in adapter!';","","    // Find the connection to run this on","    // NOTE: if `describe` doesn't exist, an error is not being returned.","    if (!hasOwnProperty(this.dictionary, 'describe')) return cb();","","    var connName = this.dictionary.describe;","    var adapter = this.connections[connName]._adapter;","","    if (!hasOwnProperty(adapter, 'describe')) return cb(new Error(err));","    adapter.describe(connName, this.collection, cb);","  },","","  drop: function(relations, cb) {","    // Allow relations to be optional","    if (typeof relations === 'function') {","      cb = relations;","      relations = [];","    }","","    relations = [];","","    //","    // TODO:","    // Use a more normalized strategy to get relations so we can omit the extra argument above.","    // e.g. getRelations({ schema: self.query.waterline.schema, parentCollection: self.collection });","    //","","    // Normalize Arguments","    cb = normalize.callback(cb);","","    // Build Default Error Message","    var err = 'No drop() method defined in adapter!';","","    // Find the connection to run this on","    if (!hasOwnProperty(this.dictionary, 'drop')) return cb(new Error(err));","","    var connName = this.dictionary.drop;","    var adapter = this.connections[connName]._adapter;","","    if (!hasOwnProperty(adapter, 'drop')) return cb(new Error(err));","    adapter.drop(connName, this.collection, relations, cb);","  },","","  alter: function(cb) {","","    // Normalize arguments","    cb = normalize.callback(cb);","","    // Build Default Error Message","    var err = 'No alter() method defined in adapter!';","","    // Find the connection to run this on","    if (!hasOwnProperty(this.dictionary, 'alter')) return cb(new Error(err));","","    var connName = this.dictionary.alter;","    var adapter = this.connections[connName]._adapter;","","    if (!hasOwnProperty(adapter, 'alter')) return cb(new Error(err));","    adapter.alter(connName, this.collection, cb);","  }","","};",""],"l":{"5":1,"6":1,"7":1,"8":1,"15":1,"18":0,"21":0,"24":0,"27":0,"30":0,"42":0,"43":0,"44":0,"47":0,"48":0,"49":0,"53":0,"55":0,"56":0,"58":0,"59":0,"66":0,"69":0,"73":0,"75":0,"76":0,"78":0,"79":0,"84":0,"85":0,"86":0,"89":0,"98":0,"101":0,"104":0,"106":0,"107":0,"109":0,"110":0,"116":0,"119":0,"122":0,"124":0,"125":0,"127":0,"128":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/getRelations.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/getRelations.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"getRelations","line":12,"loc":{"start":{"line":12,"column":17},"end":{"line":12,"column":48}}},"2":{"name":"(anonymous_2)","line":17,"loc":{"start":{"line":17,"column":30},"end":{"line":17,"column":51}}},"3":{"name":"(anonymous_3)","line":21,"loc":{"start":{"line":21,"column":53},"end":{"line":21,"column":67}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":29,"column":2}},"2":{"start":{"line":14,"column":2},"end":{"line":14,"column":30}},"3":{"start":{"line":15,"column":2},"end":{"line":15,"column":21}},"4":{"start":{"line":17,"column":2},"end":{"line":26,"column":5}},"5":{"start":{"line":18,"column":4},"end":{"line":18,"column":46}},"6":{"start":{"line":19,"column":4},"end":{"line":19,"column":66}},"7":{"start":{"line":19,"column":59},"end":{"line":19,"column":66}},"8":{"start":{"line":21,"column":4},"end":{"line":25,"column":7}},"9":{"start":{"line":22,"column":6},"end":{"line":22,"column":81}},"10":{"start":{"line":22,"column":74},"end":{"line":22,"column":81}},"11":{"start":{"line":23,"column":6},"end":{"line":23,"column":91}},"12":{"start":{"line":23,"column":84},"end":{"line":23,"column":91}},"13":{"start":{"line":24,"column":6},"end":{"line":24,"column":33}},"14":{"start":{"line":28,"column":2},"end":{"line":28,"column":19}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":4}},{"start":{"line":19,"column":4},"end":{"line":19,"column":4}}]},"2":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":6},"end":{"line":22,"column":6}},{"start":{"line":22,"column":6},"end":{"line":22,"column":6}}]},"3":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":6},"end":{"line":23,"column":6}},{"start":{"line":23,"column":6},"end":{"line":23,"column":6}}]}},"code":["/**"," * getRelations"," *"," * Find any `junctionTables` that reference the parent collection."," *"," * @param  {[type]} options [description]"," *    @option parentCollection"," *    @option schema"," * @return {[type]}         [relations]"," */","","module.exports = function getRelations(options) {","","  var schema = options.schema;","  var relations = [];","","  Object.keys(schema).forEach(function(collection) {","    var collectionSchema = schema[collection];","    if (!collectionSchema.hasOwnProperty('junctionTable')) return;","","    Object.keys(collectionSchema.attributes).forEach(function(key) {","      if (!collectionSchema.attributes[key].hasOwnProperty('foreignKey')) return;","      if (collectionSchema.attributes[key].references !== options.parentCollection) return;","      relations.push(collection);","    });","  });","","  return relations;","};",""],"l":{"12":1,"14":0,"15":0,"17":0,"18":0,"19":0,"21":0,"22":0,"23":0,"24":0,"28":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/adapter/compoundQueries.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/adapter/compoundQueries.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":11,"loc":{"start":{"line":11,"column":16},"end":{"line":11,"column":47}}},"2":{"name":"(anonymous_2)","line":38,"loc":{"start":{"line":38,"column":27},"end":{"line":38,"column":49}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":46}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":71}},"4":{"start":{"line":9,"column":0},"end":{"line":46,"column":2}},"5":{"start":{"line":12,"column":4},"end":{"line":12,"column":20}},"6":{"start":{"line":13,"column":4},"end":{"line":14,"column":16}},"7":{"start":{"line":17,"column":4},"end":{"line":17,"column":69}},"8":{"start":{"line":17,"column":17},"end":{"line":17,"column":69}},"9":{"start":{"line":20,"column":4},"end":{"line":20,"column":44}},"10":{"start":{"line":21,"column":4},"end":{"line":21,"column":32}},"11":{"start":{"line":24,"column":4},"end":{"line":24,"column":65}},"12":{"start":{"line":27,"column":4},"end":{"line":34,"column":5}},"13":{"start":{"line":28,"column":6},"end":{"line":28,"column":46}},"14":{"start":{"line":29,"column":6},"end":{"line":29,"column":52}},"15":{"start":{"line":31,"column":6},"end":{"line":33,"column":7}},"16":{"start":{"line":32,"column":8},"end":{"line":32,"column":75}},"17":{"start":{"line":38,"column":4},"end":{"line":43,"column":7}},"18":{"start":{"line":39,"column":6},"end":{"line":39,"column":30}},"19":{"start":{"line":39,"column":15},"end":{"line":39,"column":30}},"20":{"start":{"line":40,"column":6},"end":{"line":40,"column":45}},"21":{"start":{"line":40,"column":18},"end":{"line":40,"column":45}},"22":{"start":{"line":42,"column":6},"end":{"line":42,"column":30}}},"branchMap":{"1":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":17,"column":4}},{"start":{"line":17,"column":4},"end":{"line":17,"column":4}}]},"2":{"line":17,"type":"cond-expr","locations":[{"start":{"line":17,"column":43},"end":{"line":17,"column":57}},{"start":{"line":17,"column":60},"end":{"line":17,"column":68}}]},"3":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]},"4":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":6}},{"start":{"line":31,"column":6},"end":{"line":31,"column":6}}]},"5":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":6},"end":{"line":39,"column":6}},{"start":{"line":39,"column":6},"end":{"line":39,"column":6}}]},"6":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":6},"end":{"line":40,"column":6}},{"start":{"line":40,"column":6},"end":{"line":40,"column":6}}]}},"code":["/**"," * Compound Queries Adapter Normalization"," */","","var _ = require('lodash');","var normalize = require('../utils/normalize');","var hasOwnProperty = require('../utils/helpers').object.hasOwnProperty;","","module.exports = {","","  findOrCreate: function(criteria, values, cb) {","    var self = this;","    var connName,","        adapter;","","    // If no values were specified, use criteria","    if (!values) values = criteria.where ? criteria.where : criteria;","","    // Normalize Arguments","    criteria = normalize.criteria(criteria);","    cb = normalize.callback(cb);","","    // Build Default Error Message","    var err = 'No find() or create() method defined in adapter!';","","    // Custom user adapter behavior","    if (hasOwnProperty(this.dictionary, 'findOrCreate')) {","      connName = this.dictionary.findOrCreate;","      adapter = this.connections[connName]._adapter;","","      if (hasOwnProperty(adapter, 'findOrCreate')) {","        return adapter.findOrCreate(connName, this.collection, values, cb);","      }","    }","","    // Default behavior","    // WARNING: Not transactional!  (unless your data adapter is)","    this.findOne(criteria, function(err, result) {","      if (err) return cb(err);","      if (result) return cb(null, result[0]);","","      self.create(values, cb);","    });","  }","","};",""],"l":{"5":1,"6":1,"7":1,"9":1,"12":0,"13":0,"17":0,"20":0,"21":0,"24":0,"27":0,"28":0,"29":0,"31":0,"32":0,"38":0,"39":0,"40":0,"42":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/adapter/aggregateQueries.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/adapter/aggregateQueries.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"(anonymous_1)","line":13,"loc":{"start":{"line":13,"column":14},"end":{"line":13,"column":39}}},"2":{"name":"(anonymous_2)","line":46,"loc":{"start":{"line":46,"column":33},"end":{"line":46,"column":54}}},"3":{"name":"(anonymous_3)","line":47,"loc":{"start":{"line":47,"column":56},"end":{"line":47,"column":75}}},"4":{"name":"(anonymous_4)","line":52,"loc":{"start":{"line":52,"column":7},"end":{"line":52,"column":21}}},"5":{"name":"(anonymous_5)","line":59,"loc":{"start":{"line":59,"column":20},"end":{"line":59,"column":64}}},"6":{"name":"(anonymous_6)","line":95,"loc":{"start":{"line":95,"column":33},"end":{"line":95,"column":54}}},"7":{"name":"(anonymous_7)","line":103,"loc":{"start":{"line":103,"column":52},"end":{"line":103,"column":71}}},"8":{"name":"(anonymous_8)","line":113,"loc":{"start":{"line":113,"column":34},"end":{"line":113,"column":53}}},"9":{"name":"(anonymous_9)","line":118,"loc":{"start":{"line":118,"column":60},"end":{"line":118,"column":81}}},"10":{"name":"(anonymous_10)","line":126,"loc":{"start":{"line":126,"column":7},"end":{"line":126,"column":21}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":29}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":46}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":71}},"5":{"start":{"line":10,"column":0},"end":{"line":132,"column":2}},"6":{"start":{"line":14,"column":4},"end":{"line":14,"column":20}},"7":{"start":{"line":15,"column":4},"end":{"line":16,"column":16}},"8":{"start":{"line":19,"column":4},"end":{"line":19,"column":32}},"9":{"start":{"line":22,"column":4},"end":{"line":22,"column":71}},"10":{"start":{"line":25,"column":4},"end":{"line":32,"column":5}},"11":{"start":{"line":26,"column":6},"end":{"line":26,"column":44}},"12":{"start":{"line":27,"column":6},"end":{"line":27,"column":52}},"13":{"start":{"line":29,"column":6},"end":{"line":31,"column":7}},"14":{"start":{"line":30,"column":8},"end":{"line":30,"column":77}},"15":{"start":{"line":36,"column":4},"end":{"line":36,"column":21}},"16":{"start":{"line":39,"column":4},"end":{"line":39,"column":78}},"17":{"start":{"line":39,"column":52},"end":{"line":39,"column":78}},"18":{"start":{"line":41,"column":4},"end":{"line":41,"column":38}},"19":{"start":{"line":42,"column":4},"end":{"line":42,"column":50}},"20":{"start":{"line":44,"column":4},"end":{"line":44,"column":70}},"21":{"start":{"line":44,"column":44},"end":{"line":44,"column":70}},"22":{"start":{"line":46,"column":4},"end":{"line":55,"column":7}},"23":{"start":{"line":47,"column":6},"end":{"line":51,"column":9}},"24":{"start":{"line":48,"column":8},"end":{"line":48,"column":32}},"25":{"start":{"line":48,"column":17},"end":{"line":48,"column":32}},"26":{"start":{"line":49,"column":8},"end":{"line":49,"column":26}},"27":{"start":{"line":50,"column":8},"end":{"line":50,"column":13}},"28":{"start":{"line":53,"column":6},"end":{"line":53,"column":30}},"29":{"start":{"line":53,"column":15},"end":{"line":53,"column":30}},"30":{"start":{"line":54,"column":6},"end":{"line":54,"column":24}},"31":{"start":{"line":60,"column":4},"end":{"line":60,"column":20}},"32":{"start":{"line":61,"column":4},"end":{"line":61,"column":17}},"33":{"start":{"line":62,"column":4},"end":{"line":62,"column":16}},"34":{"start":{"line":65,"column":4},"end":{"line":65,"column":32}},"35":{"start":{"line":67,"column":4},"end":{"line":67,"column":30}},"36":{"start":{"line":69,"column":4},"end":{"line":75,"column":5}},"37":{"start":{"line":70,"column":6},"end":{"line":73,"column":7}},"38":{"start":{"line":72,"column":8},"end":{"line":72,"column":103}},"39":{"start":{"line":74,"column":6},"end":{"line":74,"column":27}},"40":{"start":{"line":78,"column":4},"end":{"line":78,"column":51}},"41":{"start":{"line":79,"column":4},"end":{"line":79,"column":37}},"42":{"start":{"line":82,"column":4},"end":{"line":89,"column":5}},"43":{"start":{"line":83,"column":6},"end":{"line":83,"column":50}},"44":{"start":{"line":84,"column":6},"end":{"line":84,"column":52}},"45":{"start":{"line":86,"column":6},"end":{"line":88,"column":7}},"46":{"start":{"line":87,"column":8},"end":{"line":87,"column":83}},"47":{"start":{"line":92,"column":4},"end":{"line":92,"column":20}},"48":{"start":{"line":93,"column":4},"end":{"line":93,"column":14}},"49":{"start":{"line":95,"column":4},"end":{"line":129,"column":7}},"50":{"start":{"line":96,"column":6},"end":{"line":96,"column":105}},"51":{"start":{"line":96,"column":31},"end":{"line":96,"column":105}},"52":{"start":{"line":99,"column":6},"end":{"line":99,"column":24}},"53":{"start":{"line":101,"column":6},"end":{"line":116,"column":7}},"54":{"start":{"line":102,"column":8},"end":{"line":111,"column":9}},"55":{"start":{"line":103,"column":10},"end":{"line":105,"column":13}},"56":{"start":{"line":104,"column":12},"end":{"line":104,"column":50}},"57":{"start":{"line":106,"column":10},"end":{"line":108,"column":11}},"58":{"start":{"line":107,"column":12},"end":{"line":107,"column":16}},"59":{"start":{"line":110,"column":10},"end":{"line":110,"column":109}},"60":{"start":{"line":113,"column":8},"end":{"line":115,"column":11}},"61":{"start":{"line":114,"column":10},"end":{"line":114,"column":48}},"62":{"start":{"line":118,"column":6},"end":{"line":125,"column":9}},"63":{"start":{"line":119,"column":8},"end":{"line":119,"column":32}},"64":{"start":{"line":119,"column":17},"end":{"line":119,"column":32}},"65":{"start":{"line":122,"column":8},"end":{"line":122,"column":38}},"66":{"start":{"line":122,"column":19},"end":{"line":122,"column":38}},"67":{"start":{"line":124,"column":8},"end":{"line":124,"column":24}},"68":{"start":{"line":127,"column":6},"end":{"line":127,"column":30}},"69":{"start":{"line":127,"column":15},"end":{"line":127,"column":30}},"70":{"start":{"line":128,"column":6},"end":{"line":128,"column":23}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]},"2":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":6},"end":{"line":29,"column":6}},{"start":{"line":29,"column":6},"end":{"line":29,"column":6}}]},"3":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":4},"end":{"line":39,"column":4}},{"start":{"line":39,"column":4},"end":{"line":39,"column":4}}]},"4":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]},"5":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":8},"end":{"line":48,"column":8}},{"start":{"line":48,"column":8},"end":{"line":48,"column":8}}]},"6":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":6},"end":{"line":53,"column":6}},{"start":{"line":53,"column":6},"end":{"line":53,"column":6}}]},"7":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":4},"end":{"line":69,"column":4}},{"start":{"line":69,"column":4},"end":{"line":69,"column":4}}]},"8":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":6},"end":{"line":70,"column":6}},{"start":{"line":70,"column":6},"end":{"line":70,"column":6}}]},"9":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":10},"end":{"line":70,"column":38}},{"start":{"line":71,"column":8},"end":{"line":71,"column":54}}]},"10":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":4},"end":{"line":82,"column":4}},{"start":{"line":82,"column":4},"end":{"line":82,"column":4}}]},"11":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":6},"end":{"line":86,"column":6}},{"start":{"line":86,"column":6},"end":{"line":86,"column":6}}]},"12":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":6},"end":{"line":96,"column":6}},{"start":{"line":96,"column":6},"end":{"line":96,"column":6}}]},"13":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":6},"end":{"line":101,"column":6}},{"start":{"line":101,"column":6},"end":{"line":101,"column":6}}]},"14":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":8},"end":{"line":102,"column":8}},{"start":{"line":102,"column":8},"end":{"line":102,"column":8}}]},"15":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":10},"end":{"line":106,"column":10}},{"start":{"line":106,"column":10},"end":{"line":106,"column":10}}]},"16":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":8},"end":{"line":119,"column":8}},{"start":{"line":119,"column":8},"end":{"line":119,"column":8}}]},"17":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":8},"end":{"line":122,"column":8}},{"start":{"line":122,"column":8},"end":{"line":122,"column":8}}]},"18":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":6},"end":{"line":127,"column":6}},{"start":{"line":127,"column":6},"end":{"line":127,"column":6}}]}},"code":["/**"," * Aggregate Queries Adapter Normalization"," */","","var _ = require('lodash');","var async = require('async');","var normalize = require('../utils/normalize');","var hasOwnProperty = require('../utils/helpers').object.hasOwnProperty;","","module.exports = {","","  // If an optimized createEach exists, use it, otherwise use an asynchronous loop with create()","  createEach: function(valuesList, cb) {","    var self = this;","    var connName,","        adapter;","","    // Normalize Arguments","    cb = normalize.callback(cb);","","    // Build Default Error Message","    var err = 'No createEach() or create() method defined in adapter!';","","    // Custom user adapter behavior","    if (hasOwnProperty(this.dictionary, 'createEach')) {","      connName = this.dictionary.createEach;","      adapter = this.connections[connName]._adapter;","","      if (hasOwnProperty(adapter, 'createEach')) {","        return adapter.createEach(connName, this.collection, valuesList, cb);","      }","    }","","    // Default behavior","    // WARNING: Not transactional!  (unless your data adapter is)","    var results = [];","","    // Find the connection to run this on","    if (!hasOwnProperty(this.dictionary, 'create')) return cb(new Error(err));","","    connName = this.dictionary.create;","    adapter = this.connections[connName]._adapter;","","    if (!hasOwnProperty(adapter, 'create')) return cb(new Error(err));","","    async.eachSeries(valuesList, function(values, cb) {","      adapter.create(connName, self.collection, values, function(err, row) {","        if (err) return cb(err);","        results.push(row);","        cb();","      });","    }, function(err) {","      if (err) return cb(err);","      cb(null, results);","    });","  },","","  // If an optimized findOrCreateEach exists, use it, otherwise use an asynchronous loop with create()","  findOrCreateEach: function(attributesToCheck, valuesList, cb) {","    var self = this;","    var connName;","    var adapter;","","    // Normalize Arguments","    cb = normalize.callback(cb);","","    var isObjectArray = false;","","    if (_.isObject(attributesToCheck[0])) {","      if (attributesToCheck.length > 1 &&","        attributesToCheck.length !== valuesList.length) {","        return cb(new Error('findOrCreateEach: The two passed arrays have to be of the same length.'));","      }","      isObjectArray = true;","    }","","    // Clone sensitive data","    attributesToCheck = _.clone(attributesToCheck);","    valuesList = _.clone(valuesList);","","    // Custom user adapter behavior","    if (hasOwnProperty(this.dictionary, 'findOrCreateEach')) {","      connName = this.dictionary.findOrCreateEach;","      adapter = this.connections[connName]._adapter;","","      if (hasOwnProperty(adapter, 'findOrCreateEach')) {","        return adapter.findOrCreateEach(connName, this.collection, valuesList, cb);","      }","    }","","    // Build a list of models","    var models = [];","    var i = 0;","","    async.eachSeries(valuesList, function(values, cb) {","      if (!_.isObject(values)) return cb(new Error('findOrCreateEach: Unexpected value in valuesList.'));","      // Check that each of the criteria keys match:","      // build a criteria query","      var criteria = {};","","      if (isObjectArray) {","        if (_.isObject(attributesToCheck[i])) {","          Object.keys(attributesToCheck[i]).forEach(function(attrName) {","            criteria[attrName] = values[attrName];","          });","          if (attributesToCheck.length > 1) {","            i++;","          }","        } else {","          return cb(new Error('findOrCreateEach: Element ' + i + ' in attributesToCheck is not an object.'));","        }","      } else {","        attributesToCheck.forEach(function(attrName) {","          criteria[attrName] = values[attrName];","        });","      }","","      return self.findOrCreate.call(self, criteria, values, function(err, model) {","        if (err) return cb(err);","","        // Add model to list","        if (model) models.push(model);","","        cb(null, model);","      });","    }, function(err) {","      if (err) return cb(err);","      cb(null, models);","    });","  }","","};",""],"l":{"5":1,"6":1,"7":1,"8":1,"10":1,"14":0,"15":0,"19":0,"22":0,"25":0,"26":0,"27":0,"29":0,"30":0,"36":0,"39":0,"41":0,"42":0,"44":0,"46":0,"47":0,"48":0,"49":0,"50":0,"53":0,"54":0,"60":0,"61":0,"62":0,"65":0,"67":0,"69":0,"70":0,"72":0,"74":0,"78":0,"79":0,"82":0,"83":0,"84":0,"86":0,"87":0,"92":0,"93":0,"95":0,"96":0,"99":0,"101":0,"102":0,"103":0,"104":0,"106":0,"107":0,"110":0,"113":0,"114":0,"118":0,"119":0,"122":0,"124":0,"127":0,"128":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/adapter/setupTeardown.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/adapter/setupTeardown.js","s":{"1":1,"2":0,"3":0,"4":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":11,"loc":{"start":{"line":11,"column":12},"end":{"line":11,"column":25}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":19,"column":2}},"2":{"start":{"line":12,"column":4},"end":{"line":14,"column":5}},"3":{"start":{"line":13,"column":6},"end":{"line":13,"column":58}},"4":{"start":{"line":16,"column":4},"end":{"line":16,"column":9}}},"branchMap":{"1":{"line":12,"type":"if","locations":[{"start":{"line":12,"column":4},"end":{"line":12,"column":4}},{"start":{"line":12,"column":4},"end":{"line":12,"column":4}}]}},"code":["/**"," * Setup and Teardown Adapter Normalization"," */","","module.exports = {","","  // Teardown is fired once-per-adapter","  // Should tear down any open connections, etc. for each collection","  // (i.e. tear down any remaining connections to the underlying data model)","  // (i.e. flush data to disk before the adapter shuts down)","  teardown: function(cb) {","    if (this.adapter.teardown) {","      return this.adapter.teardown.apply(this, arguments);","    };","","    cb();","  }","","};",""],"l":{"5":1,"12":0,"13":0,"16":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/adapter/sync/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/adapter/sync/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":7,"column":2}}},"branchMap":{},"code":["// TODO: probably can eliminate this file","module.exports = {","  migrateDrop: require('./strategies/drop.js'),","  migrateAlter: require('./strategies/alter.js'),","  migrateCreate: require('./strategies/create.js'),","  migrateSafe: require('./strategies/safe.js')","};",""],"l":{"2":1}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/adapter/sync/strategies/drop.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/adapter/sync/strategies/drop.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"drop","line":15,"loc":{"start":{"line":15,"column":17},"end":{"line":15,"column":35}}},"2":{"name":"afterDrop","line":31,"loc":{"start":{"line":31,"column":12},"end":{"line":31,"column":42}}},"3":{"name":"(anonymous_3)","line":34,"loc":{"start":{"line":34,"column":16},"end":{"line":34,"column":27}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":58}},"3":{"start":{"line":15,"column":0},"end":{"line":38,"column":2}},"4":{"start":{"line":16,"column":2},"end":{"line":16,"column":18}},"5":{"start":{"line":19,"column":2},"end":{"line":21,"column":3}},"6":{"start":{"line":20,"column":4},"end":{"line":20,"column":123}},"7":{"start":{"line":31,"column":2},"end":{"line":37,"column":5}},"8":{"start":{"line":32,"column":4},"end":{"line":32,"column":28}},"9":{"start":{"line":32,"column":13},"end":{"line":32,"column":28}},"10":{"start":{"line":34,"column":4},"end":{"line":36,"column":7}},"11":{"start":{"line":35,"column":6},"end":{"line":35,"column":60}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":2},"end":{"line":19,"column":2}},{"start":{"line":19,"column":2},"end":{"line":19,"column":2}}]},"2":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":4},"end":{"line":32,"column":4}},{"start":{"line":32,"column":4},"end":{"line":32,"column":4}}]}},"code":["/**"," * Module dependencies"," */","","var _ = require('lodash');","var getRelations = require('../../../utils/getRelations');","","","/**"," * Drop and recreate collection"," *"," * @param  {Function} cb"," */","","module.exports = function drop(cb) {","  var self = this;","","  // Refuse to run this migration strategy in production.","  if (process.env.NODE_ENV === 'production') {","    return cb(new Error('`migrate: \"drop\"` strategy is not supported in production, please change to `migrate: \"safe\"`.'));","  }","","  // Find any junctionTables that reference this collection","  // var relations = getRelations({","  //   schema: self.query.waterline.schema,","  //   parentCollection: self.collection","  // });","","  // Pass along relations to the drop method","  // console.log('Dropping ' + self.collection);","  this.drop(function afterDrop(err, data) {","    if (err) return cb(err);","","    self.define(function() {","      cb.apply(null, Array.prototype.slice.call(arguments));","    });","  });","};",""],"l":{"5":1,"6":1,"15":1,"16":0,"19":0,"20":0,"31":0,"32":0,"34":0,"35":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/adapter/sync/strategies/alter.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/adapter/sync/strategies/alter.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":1,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":17},"end":{"line":16,"column":30}}},"2":{"name":"afterDescribe","line":33,"loc":{"start":{"line":33,"column":16},"end":{"line":33,"column":51}}},"3":{"name":"(anonymous_3)","line":43,"loc":{"start":{"line":43,"column":90},"end":{"line":43,"column":115}}},"4":{"name":"(anonymous_4)","line":56,"loc":{"start":{"line":56,"column":40},"end":{"line":56,"column":54}}},"5":{"name":"(anonymous_5)","line":101,"loc":{"start":{"line":101,"column":29},"end":{"line":101,"column":57}}},"6":{"name":"dealWithBuffers","line":115,"loc":{"start":{"line":115,"column":45},"end":{"line":115,"column":75}}},"7":{"name":"(anonymous_7)","line":128,"loc":{"start":{"line":128,"column":54},"end":{"line":128,"column":88}}},"8":{"name":"(anonymous_8)","line":134,"loc":{"start":{"line":134,"column":30},"end":{"line":134,"column":60}}},"9":{"name":"(anonymous_9)","line":138,"loc":{"start":{"line":138,"column":58},"end":{"line":138,"column":72}}},"10":{"name":"(anonymous_10)","line":143,"loc":{"start":{"line":143,"column":54},"end":{"line":143,"column":68}}},"11":{"name":"(anonymous_11)","line":163,"loc":{"start":{"line":163,"column":30},"end":{"line":163,"column":53}}},"12":{"name":"(anonymous_12)","line":176,"loc":{"start":{"line":176,"column":48},"end":{"line":176,"column":64}}},"13":{"name":"afterAsyncEach","line":186,"loc":{"start":{"line":186,"column":9},"end":{"line":186,"column":38}}},"14":{"name":"(anonymous_14)","line":190,"loc":{"start":{"line":190,"column":29},"end":{"line":190,"column":43}}},"15":{"name":"(anonymous_15)","line":194,"loc":{"start":{"line":194,"column":22},"end":{"line":194,"column":36}}},"16":{"name":"(anonymous_16)","line":204,"loc":{"start":{"line":204,"column":40},"end":{"line":204,"column":54}}},"17":{"name":"uhoh","line":250,"loc":{"start":{"line":250,"column":0},"end":{"line":250,"column":35}}},"18":{"name":"(anonymous_18)","line":262,"loc":{"start":{"line":262,"column":13},"end":{"line":262,"column":24}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":29}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":58}},"4":{"start":{"line":16,"column":0},"end":{"line":231,"column":2}},"5":{"start":{"line":17,"column":2},"end":{"line":17,"column":18}},"6":{"start":{"line":20,"column":2},"end":{"line":22,"column":3}},"7":{"start":{"line":21,"column":4},"end":{"line":21,"column":124}},"8":{"start":{"line":25,"column":2},"end":{"line":28,"column":5}},"9":{"start":{"line":30,"column":2},"end":{"line":30,"column":17}},"10":{"start":{"line":33,"column":2},"end":{"line":230,"column":5}},"11":{"start":{"line":35,"column":4},"end":{"line":35,"column":28}},"12":{"start":{"line":35,"column":13},"end":{"line":35,"column":28}},"13":{"start":{"line":38,"column":4},"end":{"line":38,"column":39}},"14":{"start":{"line":38,"column":16},"end":{"line":38,"column":39}},"15":{"start":{"line":40,"column":4},"end":{"line":40,"column":100}},"16":{"start":{"line":43,"column":4},"end":{"line":52,"column":11}},"17":{"start":{"line":45,"column":6},"end":{"line":50,"column":7}},"18":{"start":{"line":46,"column":8},"end":{"line":46,"column":35}},"19":{"start":{"line":49,"column":8},"end":{"line":49,"column":24}},"20":{"start":{"line":51,"column":6},"end":{"line":51,"column":18}},"21":{"start":{"line":56,"column":4},"end":{"line":58,"column":8}},"22":{"start":{"line":57,"column":6},"end":{"line":57,"column":33}},"23":{"start":{"line":84,"column":4},"end":{"line":84,"column":41}},"24":{"start":{"line":93,"column":4},"end":{"line":93,"column":22}},"25":{"start":{"line":95,"column":4},"end":{"line":99,"column":5}},"26":{"start":{"line":96,"column":6},"end":{"line":96,"column":38}},"27":{"start":{"line":98,"column":6},"end":{"line":98,"column":25}},"28":{"start":{"line":101,"column":4},"end":{"line":214,"column":7}},"29":{"start":{"line":103,"column":6},"end":{"line":110,"column":7}},"30":{"start":{"line":109,"column":8},"end":{"line":109,"column":23}},"31":{"start":{"line":115,"column":6},"end":{"line":119,"column":9}},"32":{"start":{"line":116,"column":8},"end":{"line":118,"column":9}},"33":{"start":{"line":117,"column":10},"end":{"line":117,"column":29}},"34":{"start":{"line":126,"column":6},"end":{"line":126,"column":78}},"35":{"start":{"line":127,"column":6},"end":{"line":127,"column":74}},"36":{"start":{"line":128,"column":6},"end":{"line":132,"column":13}},"37":{"start":{"line":129,"column":8},"end":{"line":129,"column":32}},"38":{"start":{"line":130,"column":8},"end":{"line":130,"column":27}},"39":{"start":{"line":131,"column":8},"end":{"line":131,"column":20}},"40":{"start":{"line":133,"column":6},"end":{"line":133,"column":62}},"41":{"start":{"line":134,"column":6},"end":{"line":213,"column":9}},"42":{"start":{"line":135,"column":8},"end":{"line":135,"column":72}},"43":{"start":{"line":138,"column":8},"end":{"line":140,"column":11}},"44":{"start":{"line":139,"column":10},"end":{"line":139,"column":69}},"45":{"start":{"line":143,"column":8},"end":{"line":145,"column":11}},"46":{"start":{"line":144,"column":10},"end":{"line":144,"column":52}},"47":{"start":{"line":147,"column":8},"end":{"line":185,"column":32}},"48":{"start":{"line":149,"column":10},"end":{"line":149,"column":41}},"49":{"start":{"line":150,"column":10},"end":{"line":150,"column":25}},"50":{"start":{"line":151,"column":10},"end":{"line":155,"column":54}},"51":{"start":{"line":156,"column":10},"end":{"line":156,"column":24}},"52":{"start":{"line":157,"column":10},"end":{"line":157,"column":68}},"53":{"start":{"line":158,"column":10},"end":{"line":158,"column":24}},"54":{"start":{"line":159,"column":10},"end":{"line":159,"column":96}},"55":{"start":{"line":163,"column":10},"end":{"line":184,"column":13}},"56":{"start":{"line":165,"column":12},"end":{"line":165,"column":41}},"57":{"start":{"line":165,"column":21},"end":{"line":165,"column":41}},"58":{"start":{"line":166,"column":12},"end":{"line":166,"column":93}},"59":{"start":{"line":167,"column":12},"end":{"line":183,"column":131}},"60":{"start":{"line":171,"column":14},"end":{"line":171,"column":98}},"61":{"start":{"line":173,"column":14},"end":{"line":173,"column":39}},"62":{"start":{"line":174,"column":14},"end":{"line":174,"column":54}},"63":{"start":{"line":176,"column":14},"end":{"line":178,"column":17}},"64":{"start":{"line":177,"column":16},"end":{"line":177,"column":67}},"65":{"start":{"line":179,"column":14},"end":{"line":179,"column":31}},"66":{"start":{"line":183,"column":19},"end":{"line":183,"column":131}},"67":{"start":{"line":185,"column":15},"end":{"line":185,"column":32}},"68":{"start":{"line":187,"column":8},"end":{"line":187,"column":32}},"69":{"start":{"line":187,"column":17},"end":{"line":187,"column":32}},"70":{"start":{"line":190,"column":8},"end":{"line":212,"column":11}},"71":{"start":{"line":191,"column":10},"end":{"line":191,"column":52}},"72":{"start":{"line":191,"column":19},"end":{"line":191,"column":52}},"73":{"start":{"line":194,"column":10},"end":{"line":211,"column":13}},"74":{"start":{"line":195,"column":12},"end":{"line":195,"column":54}},"75":{"start":{"line":195,"column":21},"end":{"line":195,"column":54}},"76":{"start":{"line":204,"column":12},"end":{"line":209,"column":15}},"77":{"start":{"line":205,"column":14},"end":{"line":205,"column":56}},"78":{"start":{"line":205,"column":23},"end":{"line":205,"column":56}},"79":{"start":{"line":208,"column":14},"end":{"line":208,"column":26}},"80":{"start":{"line":250,"column":0},"end":{"line":271,"column":1}},"81":{"start":{"line":252,"column":2},"end":{"line":252,"column":115}},"82":{"start":{"line":253,"column":2},"end":{"line":253,"column":97}},"83":{"start":{"line":254,"column":2},"end":{"line":254,"column":74}},"84":{"start":{"line":255,"column":2},"end":{"line":255,"column":18}},"85":{"start":{"line":256,"column":2},"end":{"line":256,"column":56}},"86":{"start":{"line":257,"column":2},"end":{"line":257,"column":18}},"87":{"start":{"line":258,"column":2},"end":{"line":258,"column":21}},"88":{"start":{"line":259,"column":2},"end":{"line":259,"column":18}},"89":{"start":{"line":260,"column":2},"end":{"line":260,"column":18}},"90":{"start":{"line":262,"column":2},"end":{"line":269,"column":11}},"91":{"start":{"line":263,"column":4},"end":{"line":263,"column":54}},"92":{"start":{"line":264,"column":4},"end":{"line":264,"column":34}},"93":{"start":{"line":265,"column":4},"end":{"line":265,"column":54}},"94":{"start":{"line":266,"column":4},"end":{"line":266,"column":22}},"95":{"start":{"line":267,"column":4},"end":{"line":267,"column":28}},"96":{"start":{"line":268,"column":4},"end":{"line":268,"column":19}}},"branchMap":{"1":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":2},"end":{"line":20,"column":2}},{"start":{"line":20,"column":2},"end":{"line":20,"column":2}}]},"2":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":4},"end":{"line":35,"column":4}},{"start":{"line":35,"column":4},"end":{"line":35,"column":4}}]},"3":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":4},"end":{"line":38,"column":4}},{"start":{"line":38,"column":4},"end":{"line":38,"column":4}}]},"4":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":6},"end":{"line":45,"column":6}},{"start":{"line":45,"column":6},"end":{"line":45,"column":6}}]},"5":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":4},"end":{"line":95,"column":4}},{"start":{"line":95,"column":4},"end":{"line":95,"column":4}}]},"6":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":6},"end":{"line":103,"column":6}},{"start":{"line":103,"column":6},"end":{"line":103,"column":6}}]},"7":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":8},"end":{"line":116,"column":8}},{"start":{"line":116,"column":8},"end":{"line":116,"column":8}}]},"8":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":8},"end":{"line":147,"column":8}},{"start":{"line":147,"column":8},"end":{"line":147,"column":8}}]},"9":{"line":165,"type":"if","locations":[{"start":{"line":165,"column":12},"end":{"line":165,"column":12}},{"start":{"line":165,"column":12},"end":{"line":165,"column":12}}]},"10":{"line":166,"type":"binary-expr","locations":[{"start":{"line":166,"column":37},"end":{"line":166,"column":63}},{"start":{"line":166,"column":67},"end":{"line":166,"column":92}}]},"11":{"line":167,"type":"if","locations":[{"start":{"line":167,"column":12},"end":{"line":167,"column":12}},{"start":{"line":167,"column":12},"end":{"line":167,"column":12}}]},"12":{"line":187,"type":"if","locations":[{"start":{"line":187,"column":8},"end":{"line":187,"column":8}},{"start":{"line":187,"column":8},"end":{"line":187,"column":8}}]},"13":{"line":191,"type":"if","locations":[{"start":{"line":191,"column":10},"end":{"line":191,"column":10}},{"start":{"line":191,"column":10},"end":{"line":191,"column":10}}]},"14":{"line":195,"type":"if","locations":[{"start":{"line":195,"column":12},"end":{"line":195,"column":12}},{"start":{"line":195,"column":12},"end":{"line":195,"column":12}}]},"15":{"line":205,"type":"if","locations":[{"start":{"line":205,"column":14},"end":{"line":205,"column":14}},{"start":{"line":205,"column":14},"end":{"line":205,"column":14}}]}},"code":["/**"," * Module dependencies"," */","","var _ = require('lodash');","var async = require('async');","var getRelations = require('../../../utils/getRelations');","","","/**"," * Try and synchronize the underlying physical-layer schema"," * to work with our app's collections. (i.e. models)"," *"," * @param  {Function} cb"," */","module.exports = function(cb) {","  var self = this;","","  // Refuse to run this migration strategy in production.","  if (process.env.NODE_ENV === 'production') {","    return cb(new Error('`migrate: \"alter\"` strategy is not supported in production, please change to `migrate: \"safe\"`.'));","  }","","  // Find any junctionTables that reference this collection","  var relations = getRelations({","    schema: self.query.waterline.schema,","    parentCollection: self.collection","  });","","  var backupData;","","  // Check that collection exists--","  self.describe(function afterDescribe(err, attrs) {","","    if (err) return cb(err);","","    // if it doesn't go ahead and add it and get out","    if (!attrs) return self.define(cb);","","    var collectionName = _.find(self.query.waterline.schema, {tableName: self.collection}).identity;","","    // Create a mapping of column names -> attribute names","    var columnNamesMap = _.reduce(self.query.waterline.schema[collectionName].attributes, function(memo, val, key) {","      // If the attribute has a custom column name, use it as the key for the mapping","      if (val.columnName) {","        memo[val.columnName] = key;","      // Otherwise just use the attribute name","      } else {","        memo[key] = key;","      }","      return memo;","    }, {});","","    // Transform column names into attribute names using the columnNamesMap,","    // removing attributes that no longer exist (they will be dropped)","    attrs = _.compact(_.keys(attrs).map(function(key) {","      return columnNamesMap[key];","    }));","","    //","    // TODO:","    // Take a look and see if anything important has changed.","    // If it has (at all), we still have to follow the naive strategy below,","    // but it will at least save time in the general case.","    // (because it really sucks to have to wait for all of this to happen","    //  every time you initialize Waterline.)","    //","","","    //","    // OK so we have to fix up the schema and migrate the data...","    //","    // ... we'll let Waterline do it for us.","    //","    // Load all data from this collection into memory.","    // If this doesn't work, crash to avoid corrupting any data.","    // (see `waterline/lib/adapter/ddl/README.md` for more info about this)","    //","    // Make sure we only select the existing keys for the schema.","    // The default \"find all\" will select each attribute in the schema, which","    // now includes attributes that haven't been added to the table yet, so","    // on SQL databases the query will fail with \"unknown field\" error.","    //","    var hasSchema = self.query.hasSchema;","","    // If we have a schema, make sure we only select the existing keys for the schema.","    // The default \"find all\" will select each attribute in the schema, which","    // now includes attributes that haven't been added to the table yet, so","    // on SQL databases the query will fail with \"unknown field\" error.","    //","    // If we don't have a schema then we need to select all the values to make","    // sure we don't lose data in the process.","    var queryCriteria;","","    if (hasSchema) {","      queryCriteria = {select: attrs};","    } else {","      queryCriteria = {};","    }","","    self.find(queryCriteria, function(err, existingData) {","","      if (err) {","        //","        // TODO:","        // If this was a memory error, log a more useful error","        // explaining what happened.","        //","        return cb(err);","      }","","      //","      // From this point forward, we must be very careful.","      //","      backupData = _.cloneDeep(existingData, function dealWithBuffers(val) {","        if (val instanceof Buffer) {","          return val.slice();","        }","      });","","","      // Check to see if there is anything obviously troublesome","      // that will cause the drop and redefinition of our schemaful","      // collections to fail.","      // (i.e. violation of uniqueness constraints)","      var attrs = self.query.waterline.collections[self.identity]._attributes;","      var pk = self.query.waterline.collections[self.identity].primaryKey;","      var attrsAsArray = _.reduce(_.cloneDeep(attrs), function(memo, attrDef, attrName) {","        attrDef.name = attrName;","        memo.push(attrDef);","        return memo;","      }, []);","      var uniqueAttrs = _.where(attrsAsArray, {unique: true});","      async.each(uniqueAttrs, function(uniqueAttr, each_cb) {","        var uniqueData = _.uniq(_.pluck(existingData, uniqueAttr.name));","","        // Remove any unique values who have their values set to undefined or null","        var cleansedExistingData = _.filter(existingData, function(val) {","          return [undefined, null].indexOf(val[uniqueAttr.name]) < 0;","        });","","        // Remove any undefined or null values from the unique data","        var cleansedUniqueData = _.filter(uniqueData, function(val) {","          return [undefined, null].indexOf(val) < 0;","        });","","        if (cleansedUniqueData.length < cleansedExistingData.length) {","          // Some existing data violates a new uniqueness constraint","          var prompt = require('prompt');","          prompt.start();","          console.log(","            'One or more existing records in your database violate ' +","            'a new uniqueness constraint\\n' +","            'on `' + uniqueAttr.name + '` ' +","            'in your `' + self.identity + '` model.');","          console.log();","          console.log('Should we automatically remove duplicates?');","          console.log();","          console.log('** WARNING: DO NOT TYPE \"y\" IF YOU ARE WORKING WITH PRODUCTION DATA **');","          // var laptimer = setInterval(function beepbeepbeepbeep(){","          //   process.stdout.write('\\u0007');","          // }, 1500);","          prompt.get(['y/n'], function(err, results) {","            // clearInterval(laptimer);","            if (err) return each_cb(err);","            var wasConfirmedByUser = _.isString(results['y/n']) && results['y/n'].match(/y/);","            if (wasConfirmedByUser) {","","              // Wipe out duplicate records in `backupData` and continue","              // to perform the automigration","              var diff = _.difference(existingData, _.uniq(existingData, false, uniqueAttr.name));","","              var destroyCriteria = {};","              destroyCriteria[pk] = _.pluck(diff, pk);","              // console.log(diff, '\\n', destroyCriteria);","              backupData = _.remove(backupData, function(datum) {","                return !_.contains(destroyCriteria[pk], datum[pk]);","              });","              return each_cb();","              // console.log(backupData);","              // throw new Error();","              // self.query.waterline.collections[self.collection].destroy(destroyCriteria).exec(each_cb);","            } else return each_cb(new Error('Auto-migration aborted. Please migrate your data manually and then try this again.'));","          });","        } else return each_cb();","      }, function afterAsyncEach(err) {","        if (err) return cb(err);","","        // Now we'll drop the collection.","        self.drop(relations, function(err) {","          if (err) return uhoh(err, backupData, cb);","","          // Now we'll redefine the collection.","          self.define(function(err) {","            if (err) return uhoh(err, backupData, cb);","","            // Now we'll create the `backupData` again,","            // being careful not to run any lifecycle callbacks","            // and disable automatic updating of `createdAt` and","            // `updatedAt` attributes:","            //","            // ((((TODO: actually be careful about said things))))","            //","            self.createEach(backupData, function(err) {","              if (err) return uhoh(err, backupData, cb);","","              // Done.","              return cb();","            });","","          }); // </define>","        }); // </drop>","      }); // </find>","    });","","","    //","    // The old way-- (doesn't always work, and is way more","    // complex than we should spend time on for now)","    //","    //   ||      ||      ||      ||      ||      ||","    //   \\/      \\/      \\/      \\/      \\/      \\/","    //","    // Otherwise, if it *DOES* exist, we'll try and guess what changes need to be made","    // self.alter(function(err) {","    //   if (err) return cb(err);","    //   cb();","    // });","","  });","};","","","/**"," * uh oh."," *"," * If we can't persist the data again, we'll log an error message, then"," * stream the data to stdout as JSON to make sure that it gets persisted"," * SOMEWHERE at least."," *"," * (this is another reason this automigration strategy cannot be used in"," * production currently..)"," *"," * @param  {[type]}   err        [description]"," * @param  {[type]}   backupData [description]"," * @param  {Function} cb         [description]"," * @return {[type]}              [description]"," */","","function uhoh(err, backupData, cb) {","","  console.error('Waterline encountered a fatal error when trying to perform the `alter` auto-migration strategy.');","  console.error('In a couple of seconds, the data (cached in memory) will be logged to stdout.');","  console.error('(a failsafe put in place to preserve development data)');","  console.error();","  console.error('In the mean time, here\\'s the error:');","  console.error();","  console.error(err);","  console.error();","  console.error();","","  setTimeout(function() {","    console.error('================================');","    console.error('Data backup:');","    console.error('================================');","    console.error('');","    console.log(backupData);","    return cb(err);","  }, 1200);","","}",""],"l":{"5":1,"6":1,"7":1,"16":1,"17":0,"20":0,"21":0,"25":0,"30":0,"33":0,"35":0,"38":0,"40":0,"43":0,"45":0,"46":0,"49":0,"51":0,"56":0,"57":0,"84":0,"93":0,"95":0,"96":0,"98":0,"101":0,"103":0,"109":0,"115":0,"116":0,"117":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"133":0,"134":0,"135":0,"138":0,"139":0,"143":0,"144":0,"147":0,"149":0,"150":0,"151":0,"156":0,"157":0,"158":0,"159":0,"163":0,"165":0,"166":0,"167":0,"171":0,"173":0,"174":0,"176":0,"177":0,"179":0,"183":0,"185":0,"187":0,"190":0,"191":0,"194":0,"195":0,"204":0,"205":0,"208":0,"250":1,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/adapter/sync/strategies/create.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/adapter/sync/strategies/create.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":17},"end":{"line":17,"column":30}}},"2":{"name":"afterDescribe","line":22,"loc":{"start":{"line":22,"column":16},"end":{"line":22,"column":51}}},"3":{"name":"(anonymous_3)","line":48,"loc":{"start":{"line":48,"column":32},"end":{"line":48,"column":46}}},"4":{"name":"checkAttribute","line":56,"loc":{"start":{"line":56,"column":41},"end":{"line":56,"column":101}}},"5":{"name":"(anonymous_5)","line":64,"loc":{"start":{"line":64,"column":44},"end":{"line":64,"column":69}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":29}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":77}},"4":{"start":{"line":17,"column":0},"end":{"line":70,"column":2}},"5":{"start":{"line":18,"column":2},"end":{"line":18,"column":18}},"6":{"start":{"line":22,"column":2},"end":{"line":69,"column":5}},"7":{"start":{"line":24,"column":4},"end":{"line":24,"column":28}},"8":{"start":{"line":24,"column":13},"end":{"line":24,"column":28}},"9":{"start":{"line":27,"column":4},"end":{"line":27,"column":39}},"10":{"start":{"line":27,"column":16},"end":{"line":27,"column":39}},"11":{"start":{"line":30,"column":4},"end":{"line":32,"column":5}},"12":{"start":{"line":31,"column":6},"end":{"line":31,"column":18}},"13":{"start":{"line":35,"column":4},"end":{"line":35,"column":48}},"14":{"start":{"line":36,"column":4},"end":{"line":36,"column":54}},"15":{"start":{"line":39,"column":4},"end":{"line":41,"column":5}},"16":{"start":{"line":40,"column":6},"end":{"line":40,"column":18}},"17":{"start":{"line":44,"column":4},"end":{"line":44,"column":39}},"18":{"start":{"line":47,"column":4},"end":{"line":47,"column":58}},"19":{"start":{"line":48,"column":4},"end":{"line":51,"column":7}},"20":{"start":{"line":49,"column":6},"end":{"line":49,"column":35}},"21":{"start":{"line":49,"column":28},"end":{"line":49,"column":35}},"22":{"start":{"line":50,"column":6},"end":{"line":50,"column":25}},"23":{"start":{"line":56,"column":4},"end":{"line":61,"column":11}},"24":{"start":{"line":57,"column":6},"end":{"line":59,"column":7}},"25":{"start":{"line":58,"column":8},"end":{"line":58,"column":44}},"26":{"start":{"line":60,"column":6},"end":{"line":60,"column":27}},"27":{"start":{"line":64,"column":4},"end":{"line":67,"column":11}},"28":{"start":{"line":65,"column":6},"end":{"line":65,"column":44}},"29":{"start":{"line":66,"column":6},"end":{"line":66,"column":76}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]},"2":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]},"3":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":30,"column":4}},{"start":{"line":30,"column":4},"end":{"line":30,"column":4}}]},"4":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":4},"end":{"line":39,"column":4}},{"start":{"line":39,"column":4},"end":{"line":39,"column":4}}]},"5":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":17},"end":{"line":47,"column":51}},{"start":{"line":47,"column":55},"end":{"line":47,"column":57}}]},"6":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":6},"end":{"line":49,"column":6}},{"start":{"line":49,"column":6},"end":{"line":49,"column":6}}]},"7":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":6},"end":{"line":57,"column":6}},{"start":{"line":57,"column":6},"end":{"line":57,"column":6}}]}},"code":["/**"," * Module dependencies"," */","","var _ = require('lodash');","var async = require('async');","var hasOwnProperty = require('../../../utils/helpers').object.hasOwnProperty;","","","/**"," * Try and synchronize the underlying physical-layer schema"," * in safely manner by only adding new collections and new attributes"," * to work with our app's collections. (i.e. models)"," *"," * @param  {Function} cb"," */","module.exports = function(cb) {","  var self = this;","","","  // Check that collection exists","  self.describe(function afterDescribe(err, attrs) {","","    if (err) return cb(err);","","    // if it doesn't go ahead and add it and get out","    if (!attrs) return self.define(cb);","","    // Check if an addAttribute adapter method is defined","    if (!hasOwnProperty(self.dictionary, 'addAttribute')) {","      return cb();","    }","","    // Find the relevant connections to run this on","    var connName = self.dictionary.addAttribute;","    var adapter = self.connections[connName]._adapter;","","    // Check if adapter has addAttribute method","    if (!hasOwnProperty(adapter, 'addAttribute')) {","      return cb();","    }","","    // The collection we're working with","    var collectionID = self.collection;","","    // Remove hasMany association keys before sending down to adapter","    var schema = _.clone(self.query._schema.schema) || {};","    Object.keys(schema).forEach(function(key) {","      if (schema[key].type) return;","      delete schema[key];","    });","","    // Iterate through each attribute in the new definition","    // Used for keeping track of previously undefined attributes","    // when updating the data stored at the physical layer.","    var newAttributes = _.reduce(schema, function checkAttribute(newAttributes, attribute, attrName) {","      if (!attrs[attrName]) {","        newAttributes[attrName] = attribute;","      }","      return newAttributes;","    }, {});","","    // Add new attributes","    async.eachSeries(_.keys(newAttributes), function(attrName, next) {","      var attrDef = newAttributes[attrName];","      adapter.addAttribute(connName, collectionID, attrName, attrDef, next);","    }, cb);","","  });","};",""],"l":{"5":1,"6":1,"7":1,"17":1,"18":0,"22":0,"24":0,"27":0,"30":0,"31":0,"35":0,"36":0,"39":0,"40":0,"44":0,"47":0,"48":0,"49":0,"50":0,"56":0,"57":0,"58":0,"60":0,"64":0,"65":0,"66":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/adapter/sync/strategies/safe.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/adapter/sync/strategies/safe.js","s":{"1":1,"2":1,"3":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":13,"loc":{"start":{"line":13,"column":17},"end":{"line":13,"column":30}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":13,"column":0},"end":{"line":15,"column":2}},"3":{"start":{"line":14,"column":2},"end":{"line":14,"column":7}}},"branchMap":{},"code":["/**"," * Module dependencies"," */","","var _ = require('lodash');","","","/**"," * Do absolutely nothing to the schema of the underlying datastore."," *"," * @param  {Function} cb"," */","module.exports = function(cb) {","  cb();","};",""],"l":{"5":1,"13":1,"14":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/adapter/stream.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/adapter/stream.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":10},"end":{"line":16,"column":37}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":46}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":71}},"3":{"start":{"line":12,"column":0},"end":{"line":34,"column":2}},"4":{"start":{"line":19,"column":4},"end":{"line":19,"column":44}},"5":{"start":{"line":22,"column":4},"end":{"line":22,"column":55}},"6":{"start":{"line":25,"column":4},"end":{"line":25,"column":86}},"7":{"start":{"line":25,"column":52},"end":{"line":25,"column":86}},"8":{"start":{"line":27,"column":4},"end":{"line":27,"column":42}},"9":{"start":{"line":28,"column":4},"end":{"line":28,"column":54}},"10":{"start":{"line":30,"column":4},"end":{"line":30,"column":78}},"11":{"start":{"line":30,"column":44},"end":{"line":30,"column":78}},"12":{"start":{"line":31,"column":4},"end":{"line":31,"column":64}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]},"2":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":30,"column":4}},{"start":{"line":30,"column":4},"end":{"line":30,"column":4}}]}},"code":["/**"," * Module Dependencies"," */","","var normalize = require('../utils/normalize');","var hasOwnProperty = require('../utils/helpers').object.hasOwnProperty;","","/**"," * Stream Normalization"," */","","module.exports = {","","  // stream.write() is used to send data","  // Must call stream.end() to complete stream","  stream: function(criteria, stream) {","","    // Normalize Arguments","    criteria = normalize.criteria(criteria);","","    // Build Default Error Message","    var err = 'No stream() method defined in adapter!';","","    // Find the connection to run this on","    if (!hasOwnProperty(this.dictionary, 'stream')) return stream.end(new Error(err));","","    var connName = this.dictionary.stream;","    var adapter = this.connections[connName]._adapter;","","    if (!hasOwnProperty(adapter, 'stream')) return stream.end(new Error(err));","    adapter.stream(connName, this.collection, criteria, stream);","  }","","};",""],"l":{"5":1,"6":1,"12":1,"19":0,"22":0,"25":0,"27":0,"28":0,"30":0,"31":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/adapters.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/adapters.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":17},"end":{"line":5,"column":28}}},"2":{"name":"(anonymous_2)","line":8,"loc":{"start":{"line":8,"column":40},"end":{"line":8,"column":55}}},"3":{"name":"(anonymous_3)","line":12,"loc":{"start":{"line":12,"column":33},"end":{"line":12,"column":47}}},"4":{"name":"(anonymous_4)","line":28,"loc":{"start":{"line":28,"column":18},"end":{"line":28,"column":29}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":44,"column":2}},"2":{"start":{"line":6,"column":2},"end":{"line":6,"column":18}},"3":{"start":{"line":8,"column":2},"end":{"line":42,"column":5}},"4":{"start":{"line":10,"column":4},"end":{"line":10,"column":56}},"5":{"start":{"line":12,"column":4},"end":{"line":41,"column":7}},"6":{"start":{"line":15,"column":6},"end":{"line":15,"column":62}},"7":{"start":{"line":15,"column":55},"end":{"line":15,"column":62}},"8":{"start":{"line":18,"column":6},"end":{"line":18,"column":28}},"9":{"start":{"line":18,"column":21},"end":{"line":18,"column":28}},"10":{"start":{"line":21,"column":6},"end":{"line":24,"column":7}},"11":{"start":{"line":22,"column":8},"end":{"line":22,"column":33}},"12":{"start":{"line":23,"column":8},"end":{"line":23,"column":15}},"13":{"start":{"line":28,"column":6},"end":{"line":40,"column":8}},"14":{"start":{"line":30,"column":8},"end":{"line":30,"column":56}},"15":{"start":{"line":34,"column":8},"end":{"line":34,"column":74}},"16":{"start":{"line":38,"column":8},"end":{"line":38,"column":77}},"17":{"start":{"line":39,"column":8},"end":{"line":39,"column":46}}},"branchMap":{"1":{"line":10,"type":"binary-expr","locations":[{"start":{"line":10,"column":18},"end":{"line":10,"column":49}},{"start":{"line":10,"column":53},"end":{"line":10,"column":55}}]},"2":{"line":15,"type":"if","locations":[{"start":{"line":15,"column":6},"end":{"line":15,"column":6}},{"start":{"line":15,"column":6},"end":{"line":15,"column":6}}]},"3":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":6},"end":{"line":18,"column":6}},{"start":{"line":18,"column":6},"end":{"line":18,"column":6}}]},"4":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":6},"end":{"line":21,"column":6}},{"start":{"line":21,"column":6},"end":{"line":21,"column":6}}]},"5":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":24},"end":{"line":30,"column":38}},{"start":{"line":30,"column":42},"end":{"line":30,"column":55}}]},"6":{"line":34,"type":"cond-expr","locations":[{"start":{"line":34,"column":47},"end":{"line":34,"column":53}},{"start":{"line":34,"column":56},"end":{"line":34,"column":73}}]}},"code":["/**"," * Mixes Custom Non-CRUD Adapter Methods into the prototype."," */","","module.exports = function() {","  var self = this;","","  Object.keys(this.connections).forEach(function(conn) {","","    var adapter = self.connections[conn]._adapter || {};","","    Object.keys(adapter).forEach(function(key) {","","      // Ignore the Identity Property","      if (['identity', 'tableName'].indexOf(key) >= 0) return;","","      // Don't override keys that already exists","      if (self[key]) return;","","      // Don't override a property, only functions","      if (typeof adapter[key] != 'function') {","        self[key] = adapter[key];","        return;","      }","","      // Apply the Function with passed in args and set this.identity as","      // the first argument","      self[key] = function() {","","        var tableName = self.tableName || self.identity;","","        // If this is the teardown method, just pass in the connection name,","        // otherwise pass the connection and the tableName","        var defaultArgs = key === 'teardown' ? [conn] : [conn, tableName];","","        // Concat self.identity with args (must massage arguments into a proper array)","        // Use a normalized _tableName set in the core module.","        var args = defaultArgs.concat(Array.prototype.slice.call(arguments));","        return adapter[key].apply(self, args);","      };","    });","  });","","};",""],"l":{"5":1,"6":0,"8":0,"10":0,"12":0,"15":0,"18":0,"21":0,"22":0,"23":0,"28":0,"30":0,"34":0,"38":0,"39":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/validate.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/validate.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":14,"loc":{"start":{"line":14,"column":12},"end":{"line":14,"column":46}}},"2":{"name":"(anonymous_2)","line":26,"loc":{"start":{"line":26,"column":6},"end":{"line":26,"column":19}}},"3":{"name":"(anonymous_3)","line":27,"loc":{"start":{"line":27,"column":21},"end":{"line":27,"column":46}}},"4":{"name":"(anonymous_4)","line":28,"loc":{"start":{"line":28,"column":34},"end":{"line":28,"column":48}}},"5":{"name":"(anonymous_5)","line":34,"loc":{"start":{"line":34,"column":65},"end":{"line":34,"column":79}}},"6":{"name":"(anonymous_6)","line":41,"loc":{"start":{"line":41,"column":6},"end":{"line":41,"column":19}}},"7":{"name":"_afterValidating","line":42,"loc":{"start":{"line":42,"column":54},"end":{"line":42,"column":104}}},"8":{"name":"(anonymous_8)","line":64,"loc":{"start":{"line":64,"column":6},"end":{"line":64,"column":19}}},"9":{"name":"(anonymous_9)","line":65,"loc":{"start":{"line":65,"column":21},"end":{"line":65,"column":46}}},"10":{"name":"(anonymous_10)","line":66,"loc":{"start":{"line":66,"column":23},"end":{"line":66,"column":37}}},"11":{"name":"(anonymous_11)","line":72,"loc":{"start":{"line":72,"column":64},"end":{"line":72,"column":78}}},"12":{"name":"(anonymous_12)","line":78,"loc":{"start":{"line":78,"column":7},"end":{"line":78,"column":21}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":26}},"2":{"start":{"line":9,"column":0},"end":{"line":9,"column":62}},"3":{"start":{"line":10,"column":0},"end":{"line":10,"column":29}},"4":{"start":{"line":12,"column":0},"end":{"line":84,"column":2}},"5":{"start":{"line":15,"column":4},"end":{"line":15,"column":20}},"6":{"start":{"line":18,"column":4},"end":{"line":21,"column":5}},"7":{"start":{"line":19,"column":6},"end":{"line":19,"column":23}},"8":{"start":{"line":20,"column":6},"end":{"line":20,"column":26}},"9":{"start":{"line":23,"column":4},"end":{"line":81,"column":7}},"10":{"start":{"line":27,"column":8},"end":{"line":32,"column":10}},"11":{"start":{"line":28,"column":10},"end":{"line":31,"column":13}},"12":{"start":{"line":29,"column":12},"end":{"line":29,"column":42}},"13":{"start":{"line":29,"column":21},"end":{"line":29,"column":42}},"14":{"start":{"line":30,"column":12},"end":{"line":30,"column":23}},"15":{"start":{"line":34,"column":8},"end":{"line":37,"column":11}},"16":{"start":{"line":35,"column":10},"end":{"line":35,"column":34}},"17":{"start":{"line":35,"column":19},"end":{"line":35,"column":34}},"18":{"start":{"line":36,"column":10},"end":{"line":36,"column":15}},"19":{"start":{"line":42,"column":8},"end":{"line":60,"column":11}},"20":{"start":{"line":44,"column":10},"end":{"line":46,"column":11}},"21":{"start":{"line":45,"column":12},"end":{"line":45,"column":27}},"22":{"start":{"line":52,"column":10},"end":{"line":57,"column":11}},"23":{"start":{"line":53,"column":12},"end":{"line":56,"column":16}},"24":{"start":{"line":59,"column":10},"end":{"line":59,"column":15}},"25":{"start":{"line":65,"column":8},"end":{"line":70,"column":10}},"26":{"start":{"line":66,"column":10},"end":{"line":69,"column":13}},"27":{"start":{"line":67,"column":12},"end":{"line":67,"column":42}},"28":{"start":{"line":67,"column":21},"end":{"line":67,"column":42}},"29":{"start":{"line":68,"column":12},"end":{"line":68,"column":23}},"30":{"start":{"line":72,"column":8},"end":{"line":75,"column":11}},"31":{"start":{"line":73,"column":10},"end":{"line":73,"column":34}},"32":{"start":{"line":73,"column":19},"end":{"line":73,"column":34}},"33":{"start":{"line":74,"column":10},"end":{"line":74,"column":15}},"34":{"start":{"line":79,"column":6},"end":{"line":79,"column":30}},"35":{"start":{"line":79,"column":15},"end":{"line":79,"column":30}},"36":{"start":{"line":80,"column":6},"end":{"line":80,"column":11}}},"branchMap":{"1":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":4},"end":{"line":18,"column":4}},{"start":{"line":18,"column":4},"end":{"line":18,"column":4}}]},"2":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":12},"end":{"line":29,"column":12}},{"start":{"line":29,"column":12},"end":{"line":29,"column":12}}]},"3":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":10},"end":{"line":35,"column":10}},{"start":{"line":35,"column":10},"end":{"line":35,"column":10}}]},"4":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":10},"end":{"line":44,"column":10}},{"start":{"line":44,"column":10},"end":{"line":44,"column":10}}]},"5":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":10},"end":{"line":52,"column":10}},{"start":{"line":52,"column":10},"end":{"line":52,"column":10}}]},"6":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":21},"end":{"line":55,"column":34}},{"start":{"line":55,"column":38},"end":{"line":55,"column":59}}]},"7":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":12},"end":{"line":67,"column":12}},{"start":{"line":67,"column":12},"end":{"line":67,"column":12}}]},"8":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":10},"end":{"line":73,"column":10}},{"start":{"line":73,"column":10},"end":{"line":73,"column":10}}]},"9":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":6},"end":{"line":79,"column":6}},{"start":{"line":79,"column":6},"end":{"line":79,"column":6}}]}},"code":["/**"," * Validation"," *"," * Used in create and update methods validate a model"," * Can also be used independently"," */","","var _ = require('lodash');","var WLValidationError = require('../error/WLValidationError');","var async = require('async');","","module.exports = {","","  validate: function(values, presentOnly, cb) {","    var self = this;","","    // Handle optional second arg","    if (typeof presentOnly === 'function') {","      cb = presentOnly;","      presentOnly = false;","    }","","    async.series([","","      // Run Before Validate Lifecycle Callbacks","      function(cb) {","        var runner = function(item, callback) {","          item.call(self, values, function(err) {","            if (err) return callback(err);","            callback();","          });","        };","","        async.eachSeries(self._callbacks.beforeValidate, runner, function(err) {","          if (err) return cb(err);","          cb();","        });","      },","","      // Run Validation","      function(cb) {","        self._validator.validate(values, presentOnly, function _afterValidating(err, invalidAttributes) {","          // If fatal error occurred, handle it accordingly.","          if (err) {","            return cb(err);","          }","","          // Otherwise, check out the invalid attributes that were sent back.","          //","          // Create validation error here","          // (pass in the invalid attributes as well as the collection's globalId)","          if (invalidAttributes) {","            return cb(new WLValidationError({","              invalidAttributes: invalidAttributes,","              model: self.globalId || self.adapter.identity","            }));","          }","","          cb();","        });","      },","","      // Run After Validate Lifecycle Callbacks","      function(cb) {","        var runner = function(item, callback) {","          item(values, function(err) {","            if (err) return callback(err);","            callback();","          });","        };","","        async.eachSeries(self._callbacks.afterValidate, runner, function(err) {","          if (err) return cb(err);","          cb();","        });","      }","","    ], function(err) {","      if (err) return cb(err);","      cb();","    });","  }","","};",""],"l":{"8":1,"9":1,"10":1,"12":1,"15":0,"18":0,"19":0,"20":0,"23":0,"27":0,"28":0,"29":0,"30":0,"34":0,"35":0,"36":0,"42":0,"44":0,"45":0,"52":0,"53":0,"59":0,"65":0,"66":0,"67":0,"68":0,"72":0,"73":0,"74":0,"79":0,"80":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/ddl.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/ddl.js","s":{"1":1,"2":0,"3":0,"4":0},"b":{},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":11,"loc":{"start":{"line":11,"column":12},"end":{"line":11,"column":25}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":9},"end":{"line":19,"column":34}}},"3":{"name":"(anonymous_3)","line":27,"loc":{"start":{"line":27,"column":8},"end":{"line":27,"column":21}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":31,"column":2}},"2":{"start":{"line":12,"column":4},"end":{"line":12,"column":30}},"3":{"start":{"line":20,"column":4},"end":{"line":20,"column":39}},"4":{"start":{"line":28,"column":4},"end":{"line":28,"column":26}}},"branchMap":{},"code":["/**"," * DDL Queries"," */","","module.exports = {","","  /**","   * Describe a collection","   */","","  describe: function(cb) {","    this.adapter.describe(cb);","  },","","  /**","   * Alter a table/set/etc","   */","","  alter: function(attributes, cb) {","    this.adapter.alter(attributes, cb);","  },","","  /**","   * Drop a table/set/etc","   */","","  drop: function(cb) {","    this.adapter.drop(cb);","  }","","};",""],"l":{"5":1,"12":0,"20":0,"28":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/dql/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/dql/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":12,"column":2}}},"branchMap":{},"code":["","/**"," * Export DQL Methods"," */","","module.exports = {","  create: require('./create'),","  update: require('./update'),","  destroy: require('./destroy'),","  count: require('./count'),","  join: require('./join')","};",""],"l":{"6":1}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/dql/create.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/dql/create.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":1,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":1,"74":0,"75":0,"76":0,"77":0,"78":1,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":1,"105":0,"106":0,"107":0,"108":0,"109":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":17},"end":{"line":22,"column":38}}},"2":{"name":"(anonymous_2)","line":36,"loc":{"start":{"line":36,"column":25},"end":{"line":36,"column":39}}},"3":{"name":"(anonymous_3)","line":45,"loc":{"start":{"line":45,"column":31},"end":{"line":45,"column":45}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":43},"end":{"line":69,"column":57}}},"5":{"name":"(anonymous_5)","line":72,"loc":{"start":{"line":72,"column":45},"end":{"line":72,"column":59}}},"6":{"name":"processValues","line":87,"loc":{"start":{"line":87,"column":0},"end":{"line":87,"column":31}}},"7":{"name":"createBelongsTo","line":116,"loc":{"start":{"line":116,"column":0},"end":{"line":116,"column":43}}},"8":{"name":"(anonymous_8)","line":119,"loc":{"start":{"line":119,"column":47},"end":{"line":119,"column":68}}},"9":{"name":"(anonymous_9)","line":148,"loc":{"start":{"line":148,"column":15},"end":{"line":148,"column":34}}},"10":{"name":"beforeCallbacks","line":168,"loc":{"start":{"line":168,"column":0},"end":{"line":168,"column":43}}},"11":{"name":"(anonymous_11)","line":174,"loc":{"start":{"line":174,"column":4},"end":{"line":174,"column":17}}},"12":{"name":"(anonymous_12)","line":179,"loc":{"start":{"line":179,"column":4},"end":{"line":179,"column":17}}},"13":{"name":"createValues","line":194,"loc":{"start":{"line":194,"column":0},"end":{"line":194,"column":40}}},"14":{"name":"(anonymous_14)","line":220,"loc":{"start":{"line":220,"column":43},"end":{"line":220,"column":65}}},"15":{"name":"(anonymous_15)","line":233,"loc":{"start":{"line":233,"column":120},"end":{"line":233,"column":134}}},"16":{"name":"after","line":240,"loc":{"start":{"line":240,"column":4},"end":{"line":240,"column":27}}},"17":{"name":"(anonymous_17)","line":243,"loc":{"start":{"line":243,"column":42},"end":{"line":243,"column":56}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":29}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":26}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":43}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":38}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":55}},"6":{"start":{"line":10,"column":0},"end":{"line":10,"column":63}},"7":{"start":{"line":11,"column":0},"end":{"line":11,"column":38}},"8":{"start":{"line":22,"column":0},"end":{"line":77,"column":2}},"9":{"start":{"line":24,"column":2},"end":{"line":24,"column":18}},"10":{"start":{"line":27,"column":2},"end":{"line":31,"column":3}},"11":{"start":{"line":28,"column":4},"end":{"line":28,"column":53}},"12":{"start":{"line":29,"column":4},"end":{"line":29,"column":20}},"13":{"start":{"line":30,"column":4},"end":{"line":30,"column":24}},"14":{"start":{"line":34,"column":2},"end":{"line":34,"column":24}},"15":{"start":{"line":36,"column":2},"end":{"line":40,"column":5}},"16":{"start":{"line":37,"column":4},"end":{"line":39,"column":5}},"17":{"start":{"line":38,"column":6},"end":{"line":38,"column":38}},"18":{"start":{"line":42,"column":2},"end":{"line":42,"column":37}},"19":{"start":{"line":45,"column":2},"end":{"line":47,"column":5}},"20":{"start":{"line":46,"column":4},"end":{"line":46,"column":36}},"21":{"start":{"line":50,"column":2},"end":{"line":52,"column":3}},"22":{"start":{"line":51,"column":4},"end":{"line":51,"column":41}},"23":{"start":{"line":55,"column":2},"end":{"line":57,"column":3}},"24":{"start":{"line":56,"column":4},"end":{"line":56,"column":55}},"25":{"start":{"line":61,"column":2},"end":{"line":63,"column":3}},"26":{"start":{"line":62,"column":4},"end":{"line":62,"column":39}},"27":{"start":{"line":66,"column":2},"end":{"line":66,"column":54}},"28":{"start":{"line":69,"column":2},"end":{"line":76,"column":5}},"29":{"start":{"line":70,"column":4},"end":{"line":70,"column":28}},"30":{"start":{"line":70,"column":13},"end":{"line":70,"column":28}},"31":{"start":{"line":72,"column":4},"end":{"line":75,"column":7}},"32":{"start":{"line":73,"column":6},"end":{"line":73,"column":30}},"33":{"start":{"line":73,"column":15},"end":{"line":73,"column":30}},"34":{"start":{"line":74,"column":6},"end":{"line":74,"column":48}},"35":{"start":{"line":87,"column":0},"end":{"line":109,"column":1}},"36":{"start":{"line":90,"column":2},"end":{"line":95,"column":3}},"37":{"start":{"line":91,"column":4},"end":{"line":94,"column":5}},"38":{"start":{"line":92,"column":6},"end":{"line":92,"column":55}},"39":{"start":{"line":93,"column":6},"end":{"line":93,"column":101}},"40":{"start":{"line":98,"column":2},"end":{"line":98,"column":36}},"41":{"start":{"line":99,"column":2},"end":{"line":99,"column":108}},"42":{"start":{"line":103,"column":2},"end":{"line":103,"column":114}},"43":{"start":{"line":106,"column":2},"end":{"line":106,"column":34}},"44":{"start":{"line":108,"column":2},"end":{"line":108,"column":81}},"45":{"start":{"line":116,"column":0},"end":{"line":159,"column":1}},"46":{"start":{"line":117,"column":2},"end":{"line":117,"column":18}},"47":{"start":{"line":119,"column":2},"end":{"line":158,"column":9}},"48":{"start":{"line":122,"column":4},"end":{"line":122,"column":67}},"49":{"start":{"line":122,"column":53},"end":{"line":122,"column":67}},"50":{"start":{"line":125,"column":4},"end":{"line":125,"column":115}},"51":{"start":{"line":127,"column":4},"end":{"line":127,"column":50}},"52":{"start":{"line":128,"column":4},"end":{"line":128,"column":18}},"53":{"start":{"line":130,"column":4},"end":{"line":130,"column":71}},"54":{"start":{"line":130,"column":38},"end":{"line":130,"column":71}},"55":{"start":{"line":131,"column":4},"end":{"line":131,"column":61}},"56":{"start":{"line":131,"column":33},"end":{"line":131,"column":61}},"57":{"start":{"line":132,"column":4},"end":{"line":132,"column":34}},"58":{"start":{"line":132,"column":20},"end":{"line":132,"column":34}},"59":{"start":{"line":134,"column":4},"end":{"line":134,"column":54}},"60":{"start":{"line":135,"column":4},"end":{"line":135,"column":70}},"61":{"start":{"line":137,"column":4},"end":{"line":137,"column":22}},"62":{"start":{"line":138,"column":4},"end":{"line":138,"column":41}},"63":{"start":{"line":141,"column":4},"end":{"line":141,"column":14}},"64":{"start":{"line":142,"column":4},"end":{"line":146,"column":5}},"65":{"start":{"line":143,"column":6},"end":{"line":143,"column":70}},"66":{"start":{"line":145,"column":6},"end":{"line":145,"column":54}},"67":{"start":{"line":148,"column":4},"end":{"line":156,"column":7}},"68":{"start":{"line":149,"column":6},"end":{"line":149,"column":32}},"69":{"start":{"line":149,"column":15},"end":{"line":149,"column":32}},"70":{"start":{"line":152,"column":6},"end":{"line":152,"column":37}},"71":{"start":{"line":154,"column":6},"end":{"line":154,"column":37}},"72":{"start":{"line":155,"column":6},"end":{"line":155,"column":13}},"73":{"start":{"line":168,"column":0},"end":{"line":185,"column":1}},"74":{"start":{"line":169,"column":2},"end":{"line":169,"column":18}},"75":{"start":{"line":171,"column":2},"end":{"line":183,"column":9}},"76":{"start":{"line":175,"column":6},"end":{"line":175,"column":63}},"77":{"start":{"line":180,"column":6},"end":{"line":180,"column":60}},"78":{"start":{"line":194,"column":0},"end":{"line":253,"column":1}},"79":{"start":{"line":195,"column":2},"end":{"line":195,"column":18}},"80":{"start":{"line":196,"column":2},"end":{"line":196,"column":11}},"81":{"start":{"line":199,"column":2},"end":{"line":204,"column":3}},"82":{"start":{"line":200,"column":4},"end":{"line":203,"column":5}},"83":{"start":{"line":201,"column":6},"end":{"line":201,"column":32}},"84":{"start":{"line":202,"column":6},"end":{"line":202,"column":53}},"85":{"start":{"line":206,"column":2},"end":{"line":211,"column":3}},"86":{"start":{"line":207,"column":4},"end":{"line":210,"column":5}},"87":{"start":{"line":208,"column":6},"end":{"line":208,"column":32}},"88":{"start":{"line":209,"column":6},"end":{"line":209,"column":53}},"89":{"start":{"line":214,"column":2},"end":{"line":214,"column":73}},"90":{"start":{"line":217,"column":2},"end":{"line":217,"column":70}},"91":{"start":{"line":220,"column":2},"end":{"line":252,"column":5}},"92":{"start":{"line":221,"column":4},"end":{"line":224,"column":5}},"93":{"start":{"line":222,"column":6},"end":{"line":222,"column":72}},"94":{"start":{"line":222,"column":37},"end":{"line":222,"column":70}},"95":{"start":{"line":223,"column":6},"end":{"line":223,"column":21}},"96":{"start":{"line":227,"column":4},"end":{"line":227,"column":51}},"97":{"start":{"line":230,"column":4},"end":{"line":230,"column":81}},"98":{"start":{"line":230,"column":60},"end":{"line":230,"column":81}},"99":{"start":{"line":232,"column":4},"end":{"line":232,"column":46}},"100":{"start":{"line":233,"column":4},"end":{"line":237,"column":7}},"101":{"start":{"line":234,"column":6},"end":{"line":234,"column":30}},"102":{"start":{"line":234,"column":15},"end":{"line":234,"column":30}},"103":{"start":{"line":236,"column":6},"end":{"line":236,"column":43}},"104":{"start":{"line":240,"column":4},"end":{"line":250,"column":5}},"105":{"start":{"line":243,"column":6},"end":{"line":249,"column":9}},"106":{"start":{"line":244,"column":8},"end":{"line":244,"column":32}},"107":{"start":{"line":244,"column":17},"end":{"line":244,"column":32}},"108":{"start":{"line":247,"column":8},"end":{"line":247,"column":44}},"109":{"start":{"line":248,"column":8},"end":{"line":248,"column":24}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":2},"end":{"line":27,"column":2}},{"start":{"line":27,"column":2},"end":{"line":27,"column":2}}]},"2":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":4},"end":{"line":37,"column":4}},{"start":{"line":37,"column":4},"end":{"line":37,"column":4}}]},"3":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":11},"end":{"line":42,"column":30}},{"start":{"line":42,"column":34},"end":{"line":42,"column":36}}]},"4":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":2},"end":{"line":50,"column":2}},{"start":{"line":50,"column":2},"end":{"line":50,"column":2}}]},"5":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":2},"end":{"line":55,"column":2}},{"start":{"line":55,"column":2},"end":{"line":55,"column":2}}]},"6":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":2},"end":{"line":61,"column":2}},{"start":{"line":61,"column":2},"end":{"line":61,"column":2}}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":4},"end":{"line":70,"column":4}},{"start":{"line":70,"column":4},"end":{"line":70,"column":4}}]},"8":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":6},"end":{"line":73,"column":6}},{"start":{"line":73,"column":6},"end":{"line":73,"column":6}}]},"9":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":4},"end":{"line":91,"column":4}},{"start":{"line":91,"column":4},"end":{"line":91,"column":4}}]},"10":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":9},"end":{"line":91,"column":26}},{"start":{"line":91,"column":30},"end":{"line":91,"column":55}},{"start":{"line":91,"column":60},"end":{"line":91,"column":99}}]},"11":{"line":93,"type":"cond-expr","locations":[{"start":{"line":93,"column":55},"end":{"line":93,"column":78}},{"start":{"line":93,"column":81},"end":{"line":93,"column":100}}]},"12":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":4},"end":{"line":122,"column":4}},{"start":{"line":122,"column":4},"end":{"line":122,"column":4}}]},"13":{"line":125,"type":"cond-expr","locations":[{"start":{"line":125,"column":67},"end":{"line":125,"column":107}},{"start":{"line":125,"column":110},"end":{"line":125,"column":114}}]},"14":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":4},"end":{"line":130,"column":4}},{"start":{"line":130,"column":4},"end":{"line":130,"column":4}}]},"15":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":4},"end":{"line":131,"column":4}},{"start":{"line":131,"column":4},"end":{"line":131,"column":4}}]},"16":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":4},"end":{"line":132,"column":4}},{"start":{"line":132,"column":4},"end":{"line":132,"column":4}}]},"17":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":4},"end":{"line":142,"column":4}},{"start":{"line":142,"column":4},"end":{"line":142,"column":4}}]},"18":{"line":149,"type":"if","locations":[{"start":{"line":149,"column":6},"end":{"line":149,"column":6}},{"start":{"line":149,"column":6},"end":{"line":149,"column":6}}]},"19":{"line":199,"type":"if","locations":[{"start":{"line":199,"column":2},"end":{"line":199,"column":2}},{"start":{"line":199,"column":2},"end":{"line":199,"column":2}}]},"20":{"line":200,"type":"if","locations":[{"start":{"line":200,"column":4},"end":{"line":200,"column":4}},{"start":{"line":200,"column":4},"end":{"line":200,"column":4}}]},"21":{"line":201,"type":"binary-expr","locations":[{"start":{"line":201,"column":13},"end":{"line":201,"column":17}},{"start":{"line":201,"column":21},"end":{"line":201,"column":31}}]},"22":{"line":206,"type":"if","locations":[{"start":{"line":206,"column":2},"end":{"line":206,"column":2}},{"start":{"line":206,"column":2},"end":{"line":206,"column":2}}]},"23":{"line":207,"type":"if","locations":[{"start":{"line":207,"column":4},"end":{"line":207,"column":4}},{"start":{"line":207,"column":4},"end":{"line":207,"column":4}}]},"24":{"line":208,"type":"binary-expr","locations":[{"start":{"line":208,"column":13},"end":{"line":208,"column":17}},{"start":{"line":208,"column":21},"end":{"line":208,"column":31}}]},"25":{"line":221,"type":"if","locations":[{"start":{"line":221,"column":4},"end":{"line":221,"column":4}},{"start":{"line":221,"column":4},"end":{"line":221,"column":4}}]},"26":{"line":222,"type":"if","locations":[{"start":{"line":222,"column":6},"end":{"line":222,"column":6}},{"start":{"line":222,"column":6},"end":{"line":222,"column":6}}]},"27":{"line":230,"type":"if","locations":[{"start":{"line":230,"column":4},"end":{"line":230,"column":4}},{"start":{"line":230,"column":4},"end":{"line":230,"column":4}}]},"28":{"line":234,"type":"if","locations":[{"start":{"line":234,"column":6},"end":{"line":234,"column":6}},{"start":{"line":234,"column":6},"end":{"line":234,"column":6}}]},"29":{"line":244,"type":"if","locations":[{"start":{"line":244,"column":8},"end":{"line":244,"column":8}},{"start":{"line":244,"column":8},"end":{"line":244,"column":8}}]}},"code":["/**"," * Module Dependencies"," */","","var async = require('async');","var _ = require('lodash');","var utils = require('../../utils/helpers');","var Deferred = require('../deferred');","var callbacks = require('../../utils/callbacksRunner');","var nestedOperations = require('../../utils/nestedOperations');","var hop = utils.object.hasOwnProperty;","","","/**"," * Create a new record"," *"," * @param {Object || Array} values for single model or array of multiple values"," * @param {Function} callback"," * @return Deferred object if no callback"," */","","module.exports = function(values, cb) {","","  var self = this;","","  // Handle Deferred where it passes criteria first","  if (arguments.length === 3) {","    var args = Array.prototype.slice.call(arguments);","    cb = args.pop();","    values = args.pop();","  }","","  // Loop through values and pull out any buffers before cloning","  var bufferValues = {};","","  _.each(_.keys(values), function(key) {","    if (Buffer.isBuffer(values[key])) {","      bufferValues[key] = values[key];","    }","  });","","  values = _.cloneDeep(values) || {};","","  // Replace clone keys with the buffer values","  _.each(_.keys(bufferValues), function(key) {","    values[key] = bufferValues[key];","  });","","  // Remove all undefined values","  if (_.isArray(values)) {","    values = _.remove(values, undefined);","  }","","  // Return Deferred or pass to adapter","  if (typeof cb !== 'function') {","    return new Deferred(this, this.create, {}, values);","  }","","","  // Handle Array of values","  if (Array.isArray(values)) {","    return this.createEach(values, cb);","  }","","  // Process Values","  var valuesObject = processValues.call(this, values);","","  // Create any of the belongsTo associations and set the foreign key values","  createBelongsTo.call(this, valuesObject, function(err) {","    if (err) return cb(err);","","    beforeCallbacks.call(self, valuesObject, function(err) {","      if (err) return cb(err);","      createValues.call(self, valuesObject, cb);","    });","  });","};","","","/**"," * Process Values"," *"," * @param {Object} values"," * @return {Object}"," */","","function processValues(values) {","","  // Set Default Values if available","  for (var key in this.attributes) {","    if ((!hop(values, key) || values[key] === undefined) && hop(this.attributes[key], 'defaultsTo')) {","      var defaultsTo = this.attributes[key].defaultsTo;","      values[key] = typeof defaultsTo === 'function' ? defaultsTo.call(values) : _.clone(defaultsTo);","    }","  }","","  // Pull out any associations in the values","  var _values = _.cloneDeep(values);","  var associations = nestedOperations.valuesParser.call(this, this.identity, this.waterline.schema, values);","","  // Replace associated models with their foreign key values if available.","  // Unless the association has a custom primary key (we want to create the object)","  values = nestedOperations.reduceAssociations.call(this, this.identity, this.waterline.schema, values, 'create');","","  // Cast values to proper types (handle numbers as strings)","  values = this._cast.run(values);","","  return { values: values, originalValues: _values, associations: associations };","}","","/**"," * Create BelongsTo Records"," *"," */","","function createBelongsTo(valuesObject, cb) {","  var self = this;","","  async.each(valuesObject.associations.models, function(item, next) {","","    // Check if value is an object. If not don't try and create it.","    if (!_.isPlainObject(valuesObject.values[item])) return next();","","    // Check for any transformations","    var attrName = hop(self._transformer._transformations, item) ? self._transformer._transformations[item] : item;","","    var attribute = self._schema.schema[attrName];","    var modelName;","","    if (hop(attribute, 'collection')) modelName = attribute.collection;","    if (hop(attribute, 'model')) modelName = attribute.model;","    if (!modelName) return next();","","    var model = self.waterline.collections[modelName];","    var pkValue = valuesObject.originalValues[item][model.primaryKey];","","    var criteria = {};","    criteria[model.primaryKey] = pkValue;","","    // If a pkValue if found, do a findOrCreate and look for a record matching the pk.","    var query;","    if (pkValue) {","      query = model.findOrCreate(criteria, valuesObject.values[item]);","    } else {","      query = model.create(valuesObject.values[item]);","    }","","    query.exec(function(err, val) {","      if (err) return next(err);","","      // attach the new model's pk value to the original value's key","      var pk = val[model.primaryKey];","","      valuesObject.values[item] = pk;","      next();","    });","","  }, cb);","}","","/**"," * Run Before* Lifecycle Callbacks"," *"," * @param {Object} valuesObject"," * @param {Function} cb"," */","","function beforeCallbacks(valuesObject, cb) {","  var self = this;","","  async.series([","","    // Run Validation with Validation LifeCycle Callbacks","    function(cb) {","      callbacks.validate(self, valuesObject.values, false, cb);","    },","","    // Before Create Lifecycle Callback","    function(cb) {","      callbacks.beforeCreate(self, valuesObject.values, cb);","    }","","  ], cb);","","}","","/**"," * Create Parent Record and any associated values"," *"," * @param {Object} valuesObject"," * @param {Function} cb"," */","","function createValues(valuesObject, cb) {","  var self = this;","  var date;","","  // Automatically add updatedAt and createdAt (if enabled)","  if (self.autoCreatedAt) {","    if (!valuesObject.values[self.autoCreatedAt]) {","      date = date || new Date();","      valuesObject.values[self.autoCreatedAt] = date;","    }","  }","","  if (self.autoUpdatedAt) {","    if (!valuesObject.values[self.autoUpdatedAt]) {","      date = date || new Date();","      valuesObject.values[self.autoUpdatedAt] = date;","    }","  }","","  // Transform Values","  valuesObject.values = self._transformer.serialize(valuesObject.values);","","  // Clean attributes","  valuesObject.values = self._schema.cleanValues(valuesObject.values);","","  // Pass to adapter here","  self.adapter.create(valuesObject.values, function(err, values) {","    if (err) {","      if (typeof err === 'object') { err.model = self._model.globalId; }","      return cb(err);","    }","","    // Unserialize values","    values = self._transformer.unserialize(values);","","    // If no associations were used, run after","    if (valuesObject.associations.collections.length === 0) return after(values);","","    var parentModel = new self._model(values);","    nestedOperations.create.call(self, parentModel, valuesObject.originalValues, valuesObject.associations.collections, function(err) {","      if (err) return cb(err);","","      return after(parentModel.toObject());","    });","","","    function after(values) {","","      // Run After Create Callbacks","      callbacks.afterCreate(self, values, function(err) {","        if (err) return cb(err);","","        // Return an instance of Model","        var model = new self._model(values);","        cb(null, model);","      });","    }","","  });","}",""],"l":{"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"22":1,"24":0,"27":0,"28":0,"29":0,"30":0,"34":0,"36":0,"37":0,"38":0,"42":0,"45":0,"46":0,"50":0,"51":0,"55":0,"56":0,"61":0,"62":0,"66":0,"69":0,"70":0,"72":0,"73":0,"74":0,"87":1,"90":0,"91":0,"92":0,"93":0,"98":0,"99":0,"103":0,"106":0,"108":0,"116":1,"117":0,"119":0,"122":0,"125":0,"127":0,"128":0,"130":0,"131":0,"132":0,"134":0,"135":0,"137":0,"138":0,"141":0,"142":0,"143":0,"145":0,"148":0,"149":0,"152":0,"154":0,"155":0,"168":1,"169":0,"171":0,"175":0,"180":0,"194":1,"195":0,"196":0,"199":0,"200":0,"201":0,"202":0,"206":0,"207":0,"208":0,"209":0,"214":0,"217":0,"220":0,"221":0,"222":0,"223":0,"227":0,"230":0,"232":0,"233":0,"234":0,"236":0,"240":1,"243":0,"244":0,"247":0,"248":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/deferred.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/deferred.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":1,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":1,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":1,"103":0,"104":0,"105":1,"106":0,"107":0,"108":1,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":1,"122":0,"123":0,"124":1,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":1,"134":0,"135":0,"136":1,"137":0,"138":0,"139":1,"140":0,"141":0,"142":1,"143":0,"144":0,"145":1,"146":0,"147":0,"148":1,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":1,"158":0,"159":0,"160":0,"161":1,"162":0,"163":1,"164":0,"165":1,"166":0,"167":1,"168":1,"169":0,"170":0,"171":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},"fnMap":{"1":{"name":"(anonymous_1)","line":19,"loc":{"start":{"line":19,"column":32},"end":{"line":19,"column":76}}},"2":{"name":"(anonymous_2)","line":48,"loc":{"start":{"line":48,"column":34},"end":{"line":48,"column":62}}},"3":{"name":"(anonymous_3)","line":73,"loc":{"start":{"line":73,"column":33},"end":{"line":73,"column":52}}},"4":{"name":"(anonymous_4)","line":75,"loc":{"start":{"line":75,"column":37},"end":{"line":75,"column":59}}},"5":{"name":"(anonymous_5)","line":92,"loc":{"start":{"line":92,"column":30},"end":{"line":92,"column":58}}},"6":{"name":"(anonymous_6)","line":103,"loc":{"start":{"line":103,"column":20},"end":{"line":103,"column":39}}},"7":{"name":"(anonymous_7)","line":139,"loc":{"start":{"line":139,"column":51},"end":{"line":139,"column":65}}},"8":{"name":"(anonymous_8)","line":199,"loc":{"start":{"line":199,"column":84},"end":{"line":199,"column":98}}},"9":{"name":"(anonymous_9)","line":217,"loc":{"start":{"line":217,"column":44},"end":{"line":217,"column":64}}},"10":{"name":"(anonymous_10)","line":231,"loc":{"start":{"line":231,"column":99},"end":{"line":231,"column":114}}},"11":{"name":"(anonymous_11)","line":280,"loc":{"start":{"line":280,"column":27},"end":{"line":280,"column":46}}},"12":{"name":"(anonymous_12)","line":285,"loc":{"start":{"line":285,"column":49},"end":{"line":285,"column":64}}},"13":{"name":"(anonymous_13)","line":304,"loc":{"start":{"line":304,"column":38},"end":{"line":304,"column":52}}},"14":{"name":"(anonymous_14)","line":320,"loc":{"start":{"line":320,"column":27},"end":{"line":320,"column":43}}},"15":{"name":"(anonymous_15)","line":333,"loc":{"start":{"line":333,"column":26},"end":{"line":333,"column":41}}},"16":{"name":"(anonymous_16)","line":348,"loc":{"start":{"line":348,"column":30},"end":{"line":348,"column":48}}},"17":{"name":"(anonymous_17)","line":373,"loc":{"start":{"line":373,"column":29},"end":{"line":373,"column":40}}},"18":{"name":"(anonymous_18)","line":386,"loc":{"start":{"line":386,"column":26},"end":{"line":386,"column":45}}},"19":{"name":"(anonymous_19)","line":395,"loc":{"start":{"line":395,"column":37},"end":{"line":395,"column":51}}},"20":{"name":"(anonymous_20)","line":410,"loc":{"start":{"line":410,"column":25},"end":{"line":410,"column":36}}},"21":{"name":"(anonymous_21)","line":421,"loc":{"start":{"line":421,"column":29},"end":{"line":421,"column":40}}},"22":{"name":"(anonymous_22)","line":432,"loc":{"start":{"line":432,"column":25},"end":{"line":432,"column":36}}},"23":{"name":"(anonymous_23)","line":443,"loc":{"start":{"line":443,"column":25},"end":{"line":443,"column":36}}},"24":{"name":"(anonymous_24)","line":456,"loc":{"start":{"line":456,"column":25},"end":{"line":456,"column":42}}},"25":{"name":"(anonymous_25)","line":470,"loc":{"start":{"line":470,"column":26},"end":{"line":470,"column":39}}},"26":{"name":"(anonymous_26)","line":492,"loc":{"start":{"line":492,"column":31},"end":{"line":492,"column":42}}},"27":{"name":"(anonymous_27)","line":504,"loc":{"start":{"line":504,"column":26},"end":{"line":504,"column":43}}},"28":{"name":"(anonymous_28)","line":512,"loc":{"start":{"line":512,"column":28},"end":{"line":512,"column":41}}},"29":{"name":"(anonymous_29)","line":520,"loc":{"start":{"line":520,"column":27},"end":{"line":520,"column":40}}},"30":{"name":"buildAggregate","line":537,"loc":{"start":{"line":537,"column":0},"end":{"line":537,"column":35}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":27}},"2":{"start":{"line":8,"column":0},"end":{"line":8,"column":34}},"3":{"start":{"line":9,"column":0},"end":{"line":9,"column":26}},"4":{"start":{"line":10,"column":0},"end":{"line":10,"column":46}},"5":{"start":{"line":11,"column":0},"end":{"line":11,"column":40}},"6":{"start":{"line":12,"column":0},"end":{"line":12,"column":60}},"7":{"start":{"line":13,"column":0},"end":{"line":13,"column":49}},"8":{"start":{"line":17,"column":0},"end":{"line":17,"column":49}},"9":{"start":{"line":19,"column":0},"end":{"line":32,"column":2}},"10":{"start":{"line":21,"column":2},"end":{"line":21,"column":131}},"11":{"start":{"line":21,"column":16},"end":{"line":21,"column":131}},"12":{"start":{"line":22,"column":2},"end":{"line":22,"column":129}},"13":{"start":{"line":22,"column":15},"end":{"line":22,"column":129}},"14":{"start":{"line":24,"column":2},"end":{"line":24,"column":26}},"15":{"start":{"line":25,"column":2},"end":{"line":25,"column":24}},"16":{"start":{"line":26,"column":2},"end":{"line":26,"column":28}},"17":{"start":{"line":27,"column":2},"end":{"line":27,"column":32}},"18":{"start":{"line":29,"column":2},"end":{"line":29,"column":24}},"19":{"start":{"line":31,"column":2},"end":{"line":31,"column":14}},"20":{"start":{"line":48,"column":0},"end":{"line":65,"column":2}},"21":{"start":{"line":51,"column":2},"end":{"line":51,"column":40}},"22":{"start":{"line":54,"column":2},"end":{"line":54,"column":46}},"23":{"start":{"line":57,"column":2},"end":{"line":57,"column":57}},"24":{"start":{"line":64,"column":2},"end":{"line":64,"column":14}},"25":{"start":{"line":73,"column":0},"end":{"line":80,"column":2}},"26":{"start":{"line":74,"column":2},"end":{"line":74,"column":18}},"27":{"start":{"line":75,"column":2},"end":{"line":77,"column":5}},"28":{"start":{"line":76,"column":4},"end":{"line":76,"column":47}},"29":{"start":{"line":78,"column":2},"end":{"line":78,"column":14}},"30":{"start":{"line":92,"column":0},"end":{"line":271,"column":2}},"31":{"start":{"line":94,"column":2},"end":{"line":94,"column":18}},"32":{"start":{"line":95,"column":2},"end":{"line":95,"column":17}},"33":{"start":{"line":96,"column":2},"end":{"line":96,"column":16}},"34":{"start":{"line":97,"column":2},"end":{"line":97,"column":11}},"35":{"start":{"line":98,"column":2},"end":{"line":98,"column":11}},"36":{"start":{"line":102,"column":2},"end":{"line":107,"column":3}},"37":{"start":{"line":103,"column":4},"end":{"line":105,"column":7}},"38":{"start":{"line":104,"column":6},"end":{"line":104,"column":40}},"39":{"start":{"line":106,"column":4},"end":{"line":106,"column":16}},"40":{"start":{"line":110,"column":2},"end":{"line":131,"column":3}},"41":{"start":{"line":111,"column":4},"end":{"line":111,"column":44}},"42":{"start":{"line":121,"column":4},"end":{"line":121,"column":79}},"43":{"start":{"line":125,"column":4},"end":{"line":130,"column":6}},"44":{"start":{"line":133,"column":2},"end":{"line":270,"column":3}},"45":{"start":{"line":136,"column":4},"end":{"line":136,"column":86}},"46":{"start":{"line":139,"column":4},"end":{"line":143,"column":7}},"47":{"start":{"line":140,"column":6},"end":{"line":142,"column":7}},"48":{"start":{"line":141,"column":8},"end":{"line":141,"column":62}},"49":{"start":{"line":145,"column":4},"end":{"line":150,"column":5}},"50":{"start":{"line":146,"column":6},"end":{"line":149,"column":8}},"51":{"start":{"line":181,"column":4},"end":{"line":181,"column":100}},"52":{"start":{"line":185,"column":4},"end":{"line":195,"column":6}},"53":{"start":{"line":198,"column":4},"end":{"line":198,"column":20}},"54":{"start":{"line":199,"column":4},"end":{"line":207,"column":7}},"55":{"start":{"line":200,"column":6},"end":{"line":200,"column":80}},"56":{"start":{"line":201,"column":6},"end":{"line":204,"column":7}},"57":{"start":{"line":202,"column":8},"end":{"line":202,"column":25}},"58":{"start":{"line":203,"column":8},"end":{"line":203,"column":15}},"59":{"start":{"line":206,"column":6},"end":{"line":206,"column":34}},"60":{"start":{"line":209,"column":4},"end":{"line":209,"column":25}},"61":{"start":{"line":211,"column":4},"end":{"line":211,"column":65}},"62":{"start":{"line":212,"column":4},"end":{"line":212,"column":25}},"63":{"start":{"line":215,"column":4},"end":{"line":223,"column":5}},"64":{"start":{"line":216,"column":6},"end":{"line":216,"column":26}},"65":{"start":{"line":217,"column":6},"end":{"line":219,"column":9}},"66":{"start":{"line":218,"column":8},"end":{"line":218,"column":72}},"67":{"start":{"line":220,"column":11},"end":{"line":223,"column":5}},"68":{"start":{"line":221,"column":6},"end":{"line":221,"column":26}},"69":{"start":{"line":222,"column":6},"end":{"line":222,"column":97}},"70":{"start":{"line":225,"column":4},"end":{"line":225,"column":21}},"71":{"start":{"line":228,"column":4},"end":{"line":250,"column":5}},"72":{"start":{"line":231,"column":6},"end":{"line":234,"column":9}},"73":{"start":{"line":232,"column":8},"end":{"line":232,"column":97}},"74":{"start":{"line":233,"column":8},"end":{"line":233,"column":47}},"75":{"start":{"line":236,"column":6},"end":{"line":247,"column":8}},"76":{"start":{"line":249,"column":6},"end":{"line":249,"column":23}},"77":{"start":{"line":253,"column":4},"end":{"line":257,"column":5}},"78":{"start":{"line":254,"column":6},"end":{"line":254,"column":35}},"79":{"start":{"line":255,"column":11},"end":{"line":257,"column":5}},"80":{"start":{"line":256,"column":6},"end":{"line":256,"column":35}},"81":{"start":{"line":260,"column":4},"end":{"line":260,"column":85}},"82":{"start":{"line":262,"column":4},"end":{"line":262,"column":16}},"83":{"start":{"line":264,"column":4},"end":{"line":269,"column":6}},"84":{"start":{"line":280,"column":0},"end":{"line":311,"column":2}},"85":{"start":{"line":282,"column":2},"end":{"line":282,"column":29}},"86":{"start":{"line":282,"column":17},"end":{"line":282,"column":29}},"87":{"start":{"line":285,"column":2},"end":{"line":287,"column":3}},"88":{"start":{"line":285,"column":65},"end":{"line":285,"column":89}},"89":{"start":{"line":286,"column":4},"end":{"line":286,"column":30}},"90":{"start":{"line":290,"column":2},"end":{"line":290,"column":42}},"91":{"start":{"line":294,"column":2},"end":{"line":296,"column":3}},"92":{"start":{"line":295,"column":4},"end":{"line":295,"column":27}},"93":{"start":{"line":298,"column":2},"end":{"line":298,"column":48}},"94":{"start":{"line":298,"column":36},"end":{"line":298,"column":48}},"95":{"start":{"line":300,"column":2},"end":{"line":300,"column":43}},"96":{"start":{"line":300,"column":23},"end":{"line":300,"column":43}},"97":{"start":{"line":301,"column":2},"end":{"line":301,"column":41}},"98":{"start":{"line":304,"column":2},"end":{"line":306,"column":5}},"99":{"start":{"line":305,"column":4},"end":{"line":305,"column":37}},"100":{"start":{"line":308,"column":2},"end":{"line":308,"column":31}},"101":{"start":{"line":310,"column":2},"end":{"line":310,"column":14}},"102":{"start":{"line":320,"column":0},"end":{"line":324,"column":2}},"103":{"start":{"line":321,"column":2},"end":{"line":321,"column":31}},"104":{"start":{"line":323,"column":2},"end":{"line":323,"column":14}},"105":{"start":{"line":333,"column":0},"end":{"line":337,"column":2}},"106":{"start":{"line":334,"column":2},"end":{"line":334,"column":29}},"107":{"start":{"line":336,"column":2},"end":{"line":336,"column":14}},"108":{"start":{"line":348,"column":0},"end":{"line":365,"column":2}},"109":{"start":{"line":349,"column":2},"end":{"line":349,"column":24}},"110":{"start":{"line":351,"column":2},"end":{"line":351,"column":72}},"111":{"start":{"line":351,"column":29},"end":{"line":351,"column":72}},"112":{"start":{"line":353,"column":2},"end":{"line":353,"column":31}},"113":{"start":{"line":354,"column":2},"end":{"line":354,"column":44}},"114":{"start":{"line":355,"column":2},"end":{"line":355,"column":15}},"115":{"start":{"line":357,"column":2},"end":{"line":357,"column":47}},"116":{"start":{"line":357,"column":31},"end":{"line":357,"column":47}},"117":{"start":{"line":358,"column":2},"end":{"line":358,"column":59}},"118":{"start":{"line":358,"column":29},"end":{"line":358,"column":59}},"119":{"start":{"line":360,"column":2},"end":{"line":362,"column":16}},"120":{"start":{"line":364,"column":2},"end":{"line":364,"column":14}},"121":{"start":{"line":373,"column":0},"end":{"line":376,"column":2}},"122":{"start":{"line":374,"column":2},"end":{"line":374,"column":78}},"123":{"start":{"line":375,"column":2},"end":{"line":375,"column":14}},"124":{"start":{"line":386,"column":0},"end":{"line":402,"column":2}},"125":{"start":{"line":388,"column":2},"end":{"line":388,"column":29}},"126":{"start":{"line":388,"column":17},"end":{"line":388,"column":29}},"127":{"start":{"line":391,"column":2},"end":{"line":391,"column":52}},"128":{"start":{"line":393,"column":2},"end":{"line":393,"column":39}},"129":{"start":{"line":395,"column":2},"end":{"line":397,"column":5}},"130":{"start":{"line":396,"column":4},"end":{"line":396,"column":35}},"131":{"start":{"line":399,"column":2},"end":{"line":399,"column":29}},"132":{"start":{"line":401,"column":2},"end":{"line":401,"column":14}},"133":{"start":{"line":410,"column":0},"end":{"line":413,"column":2}},"134":{"start":{"line":411,"column":2},"end":{"line":411,"column":74}},"135":{"start":{"line":412,"column":2},"end":{"line":412,"column":14}},"136":{"start":{"line":421,"column":0},"end":{"line":424,"column":2}},"137":{"start":{"line":422,"column":2},"end":{"line":422,"column":78}},"138":{"start":{"line":423,"column":2},"end":{"line":423,"column":14}},"139":{"start":{"line":432,"column":0},"end":{"line":435,"column":2}},"140":{"start":{"line":433,"column":2},"end":{"line":433,"column":74}},"141":{"start":{"line":434,"column":2},"end":{"line":434,"column":14}},"142":{"start":{"line":443,"column":0},"end":{"line":446,"column":2}},"143":{"start":{"line":444,"column":2},"end":{"line":444,"column":74}},"144":{"start":{"line":445,"column":2},"end":{"line":445,"column":14}},"145":{"start":{"line":456,"column":0},"end":{"line":460,"column":2}},"146":{"start":{"line":457,"column":2},"end":{"line":457,"column":24}},"147":{"start":{"line":459,"column":2},"end":{"line":459,"column":14}},"148":{"start":{"line":470,"column":0},"end":{"line":486,"column":2}},"149":{"start":{"line":472,"column":2},"end":{"line":475,"column":3}},"150":{"start":{"line":473,"column":4},"end":{"line":473,"column":95}},"151":{"start":{"line":474,"column":4},"end":{"line":474,"column":11}},"152":{"start":{"line":478,"column":2},"end":{"line":478,"column":30}},"153":{"start":{"line":481,"column":2},"end":{"line":481,"column":34}},"154":{"start":{"line":482,"column":2},"end":{"line":482,"column":52}},"155":{"start":{"line":482,"column":20},"end":{"line":482,"column":52}},"156":{"start":{"line":485,"column":2},"end":{"line":485,"column":42}},"157":{"start":{"line":492,"column":0},"end":{"line":497,"column":2}},"158":{"start":{"line":493,"column":2},"end":{"line":495,"column":3}},"159":{"start":{"line":494,"column":4},"end":{"line":494,"column":63}},"160":{"start":{"line":496,"column":2},"end":{"line":496,"column":24}},"161":{"start":{"line":504,"column":0},"end":{"line":506,"column":2}},"162":{"start":{"line":505,"column":2},"end":{"line":505,"column":39}},"163":{"start":{"line":512,"column":0},"end":{"line":514,"column":2}},"164":{"start":{"line":513,"column":2},"end":{"line":513,"column":37}},"165":{"start":{"line":520,"column":0},"end":{"line":522,"column":2}},"166":{"start":{"line":521,"column":2},"end":{"line":521,"column":36}},"167":{"start":{"line":528,"column":0},"end":{"line":528,"column":51}},"168":{"start":{"line":537,"column":0},"end":{"line":545,"column":1}},"169":{"start":{"line":540,"column":2},"end":{"line":542,"column":3}},"170":{"start":{"line":541,"column":4},"end":{"line":541,"column":19}},"171":{"start":{"line":544,"column":2},"end":{"line":544,"column":35}}},"branchMap":{"1":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":2},"end":{"line":21,"column":2}},{"start":{"line":21,"column":2},"end":{"line":21,"column":2}}]},"2":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":2},"end":{"line":22,"column":2}},{"start":{"line":22,"column":2},"end":{"line":22,"column":2}}]},"3":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":17},"end":{"line":27,"column":23}},{"start":{"line":27,"column":27},"end":{"line":27,"column":31}}]},"4":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":2},"end":{"line":102,"column":2}},{"start":{"line":102,"column":2},"end":{"line":102,"column":2}}]},"5":{"line":121,"type":"cond-expr","locations":[{"start":{"line":121,"column":48},"end":{"line":121,"column":53}},{"start":{"line":121,"column":57},"end":{"line":121,"column":77}}]},"6":{"line":121,"type":"binary-expr","locations":[{"start":{"line":121,"column":57},"end":{"line":121,"column":71}},{"start":{"line":121,"column":75},"end":{"line":121,"column":77}}]},"7":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":6},"end":{"line":140,"column":6}},{"start":{"line":140,"column":6},"end":{"line":140,"column":6}}]},"8":{"line":140,"type":"binary-expr","locations":[{"start":{"line":140,"column":10},"end":{"line":140,"column":70}},{"start":{"line":140,"column":74},"end":{"line":140,"column":115}}]},"9":{"line":141,"type":"binary-expr","locations":[{"start":{"line":141,"column":13},"end":{"line":141,"column":54}},{"start":{"line":141,"column":58},"end":{"line":141,"column":61}}]},"10":{"line":145,"type":"if","locations":[{"start":{"line":145,"column":4},"end":{"line":145,"column":4}},{"start":{"line":145,"column":4},"end":{"line":145,"column":4}}]},"11":{"line":187,"type":"binary-expr","locations":[{"start":{"line":187,"column":17},"end":{"line":187,"column":32}},{"start":{"line":187,"column":36},"end":{"line":187,"column":38}}]},"12":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":6},"end":{"line":201,"column":6}},{"start":{"line":201,"column":6},"end":{"line":201,"column":6}}]},"13":{"line":215,"type":"if","locations":[{"start":{"line":215,"column":4},"end":{"line":215,"column":4}},{"start":{"line":215,"column":4},"end":{"line":215,"column":4}}]},"14":{"line":218,"type":"binary-expr","locations":[{"start":{"line":218,"column":15},"end":{"line":218,"column":35}},{"start":{"line":218,"column":39},"end":{"line":218,"column":71}}]},"15":{"line":220,"type":"if","locations":[{"start":{"line":220,"column":11},"end":{"line":220,"column":11}},{"start":{"line":220,"column":11},"end":{"line":220,"column":11}}]},"16":{"line":220,"type":"binary-expr","locations":[{"start":{"line":220,"column":15},"end":{"line":220,"column":34}},{"start":{"line":220,"column":38},"end":{"line":220,"column":97}}]},"17":{"line":228,"type":"if","locations":[{"start":{"line":228,"column":4},"end":{"line":228,"column":4}},{"start":{"line":228,"column":4},"end":{"line":228,"column":4}}]},"18":{"line":228,"type":"binary-expr","locations":[{"start":{"line":228,"column":8},"end":{"line":228,"column":17}},{"start":{"line":228,"column":21},"end":{"line":228,"column":47}}]},"19":{"line":233,"type":"binary-expr","locations":[{"start":{"line":233,"column":15},"end":{"line":233,"column":38}},{"start":{"line":233,"column":42},"end":{"line":233,"column":46}}]},"20":{"line":253,"type":"if","locations":[{"start":{"line":253,"column":4},"end":{"line":253,"column":4}},{"start":{"line":253,"column":4},"end":{"line":253,"column":4}}]},"21":{"line":253,"type":"binary-expr","locations":[{"start":{"line":253,"column":8},"end":{"line":253,"column":16}},{"start":{"line":253,"column":20},"end":{"line":253,"column":36}}]},"22":{"line":255,"type":"if","locations":[{"start":{"line":255,"column":11},"end":{"line":255,"column":11}},{"start":{"line":255,"column":11},"end":{"line":255,"column":11}}]},"23":{"line":260,"type":"binary-expr","locations":[{"start":{"line":260,"column":50},"end":{"line":260,"column":70}},{"start":{"line":260,"column":74},"end":{"line":260,"column":76}}]},"24":{"line":282,"type":"if","locations":[{"start":{"line":282,"column":2},"end":{"line":282,"column":2}},{"start":{"line":282,"column":2},"end":{"line":282,"column":2}}]},"25":{"line":285,"type":"if","locations":[{"start":{"line":285,"column":2},"end":{"line":285,"column":2}},{"start":{"line":285,"column":2},"end":{"line":285,"column":2}}]},"26":{"line":285,"type":"binary-expr","locations":[{"start":{"line":285,"column":6},"end":{"line":285,"column":29}},{"start":{"line":285,"column":33},"end":{"line":285,"column":91}}]},"27":{"line":294,"type":"if","locations":[{"start":{"line":294,"column":2},"end":{"line":294,"column":2}},{"start":{"line":294,"column":2},"end":{"line":294,"column":2}}]},"28":{"line":298,"type":"if","locations":[{"start":{"line":298,"column":2},"end":{"line":298,"column":2}},{"start":{"line":298,"column":2},"end":{"line":298,"column":2}}]},"29":{"line":298,"type":"binary-expr","locations":[{"start":{"line":298,"column":6},"end":{"line":298,"column":15}},{"start":{"line":298,"column":19},"end":{"line":298,"column":34}}]},"30":{"line":300,"type":"if","locations":[{"start":{"line":300,"column":2},"end":{"line":300,"column":2}},{"start":{"line":300,"column":2},"end":{"line":300,"column":2}}]},"31":{"line":301,"type":"binary-expr","locations":[{"start":{"line":301,"column":14},"end":{"line":301,"column":34}},{"start":{"line":301,"column":38},"end":{"line":301,"column":40}}]},"32":{"line":351,"type":"if","locations":[{"start":{"line":351,"column":2},"end":{"line":351,"column":2}},{"start":{"line":351,"column":2},"end":{"line":351,"column":2}}]},"33":{"line":353,"type":"binary-expr","locations":[{"start":{"line":353,"column":13},"end":{"line":353,"column":25}},{"start":{"line":353,"column":29},"end":{"line":353,"column":30}}]},"34":{"line":354,"type":"binary-expr","locations":[{"start":{"line":354,"column":14},"end":{"line":354,"column":27}},{"start":{"line":354,"column":31},"end":{"line":354,"column":43}}]},"35":{"line":357,"type":"if","locations":[{"start":{"line":357,"column":2},"end":{"line":357,"column":2}},{"start":{"line":357,"column":2},"end":{"line":357,"column":2}}]},"36":{"line":357,"type":"binary-expr","locations":[{"start":{"line":357,"column":6},"end":{"line":357,"column":14}},{"start":{"line":357,"column":18},"end":{"line":357,"column":29}}]},"37":{"line":358,"type":"if","locations":[{"start":{"line":358,"column":2},"end":{"line":358,"column":2}},{"start":{"line":358,"column":2},"end":{"line":358,"column":2}}]},"38":{"line":358,"type":"binary-expr","locations":[{"start":{"line":358,"column":6},"end":{"line":358,"column":14}},{"start":{"line":358,"column":18},"end":{"line":358,"column":27}}]},"39":{"line":388,"type":"if","locations":[{"start":{"line":388,"column":2},"end":{"line":388,"column":2}},{"start":{"line":388,"column":2},"end":{"line":388,"column":2}}]},"40":{"line":393,"type":"binary-expr","locations":[{"start":{"line":393,"column":13},"end":{"line":393,"column":32}},{"start":{"line":393,"column":36},"end":{"line":393,"column":38}}]},"41":{"line":472,"type":"if","locations":[{"start":{"line":472,"column":2},"end":{"line":472,"column":2}},{"start":{"line":472,"column":2},"end":{"line":472,"column":2}}]},"42":{"line":482,"type":"if","locations":[{"start":{"line":482,"column":2},"end":{"line":482,"column":2}},{"start":{"line":482,"column":2},"end":{"line":482,"column":2}}]},"43":{"line":493,"type":"if","locations":[{"start":{"line":493,"column":2},"end":{"line":493,"column":2}},{"start":{"line":493,"column":2},"end":{"line":493,"column":2}}]},"44":{"line":540,"type":"if","locations":[{"start":{"line":540,"column":2},"end":{"line":540,"column":2}},{"start":{"line":540,"column":2},"end":{"line":540,"column":2}}]},"45":{"line":544,"type":"binary-expr","locations":[{"start":{"line":544,"column":24},"end":{"line":544,"column":28}},{"start":{"line":544,"column":32},"end":{"line":544,"column":34}}]}},"code":["/**"," * Deferred Object"," *"," * Used for building up a Query"," */","","var util = require('util');","var Promise = require('bluebird');","var _ = require('lodash');","var normalize = require('../utils/normalize');","var utils = require('../utils/helpers');","var acyclicTraversal = require('../utils/acyclicTraversal');","var hasOwnProperty = utils.object.hasOwnProperty;","","// Alias \"catch\" as \"fail\", for backwards compatibility with projects","// that were created using Q","Promise.prototype.fail = Promise.prototype.catch;","","var Deferred = module.exports = function(context, method, criteria, values) {","","  if (!context) return new Error('Must supply a context to a new Deferred object. Usage: new Deferred(context, method, criteria)');","  if (!method) return new Error('Must supply a method to a new Deferred object. Usage: new Deferred(context, method, criteria)');","","  this._context = context;","  this._method = method;","  this._criteria = criteria;","  this._values = values || null;","","  this._deferred = null; // deferred object for promises","","  return this;","};","","","/**"," * Add join clause(s) to the criteria object to populate"," * the specified alias all the way down (or at least until a"," * circular pattern is detected.)"," *"," * @param  {String} keyName  [the initial alias aka named relation]"," * @param  {Object} criteria [optional]"," * @return this"," * @chainable"," *"," * WARNING:"," * This method is not finished yet!!"," */","Deferred.prototype.populateDeep = function(keyName, criteria) {","","  // The identity of the initial model","  var identity = this._context.identity;","","  // The input schema","  var schema = this._context.waterline.schema;","","  // Kick off recursive function to traverse the schema graph.","  var plan = acyclicTraversal(schema, identity, keyName);","","  // TODO: convert populate plan into a join plan","  // this._criteria.joins = ....","","  // TODO: also merge criteria object into query","","  return this;","};","","/**"," * Populate all associations of a collection."," *"," * @return this"," * @chainable"," */","Deferred.prototype.populateAll = function(criteria) {","  var self = this;","  this._context.associations.forEach(function(association) {","    self.populate(association.alias, criteria);","  });","  return this;","","};","","/**"," * Add a `joins` clause to the criteria object."," *"," * Used for populating associations."," *"," * @param {String|Array} key, the key to populate or array of string keys"," * @return this"," * @chainable"," */","","Deferred.prototype.populate = function(keyName, criteria) {","","  var self = this;","  var joins = [];","  var pk = 'id';","  var attr;","  var join;","","  // Adds support for arrays into keyName so that a list of","  // populates can be passed","  if (_.isArray(keyName)) {","    keyName.forEach(function(populate) {","      self.populate(populate, criteria);","    });","    return this;","  }","  ","  // Normalize sub-criteria","  try {","    criteria = normalize.criteria(criteria);","","    ////////////////////////////////////////////////////////////////////////","    // TODO:","    // instead of doing this, target the relevant pieces of code","    // with weird expectations and teach them a lesson","    // e.g. `lib/waterline/query/finders/operations.js:665:12`","    // (delete userCriteria.sort)","    //","    // Except make sure `where` exists","    criteria.where = criteria.where === false ? false : (criteria.where || {});","    ////////////////////////////////////////////////////////////////////////","","  } catch (e) {","    throw new Error(","      'Could not parse sub-criteria passed to ' +","      util.format('`.populate(\"%s\")`', keyName) +","      '\\nSub-criteria:\\n' + util.inspect(criteria, false, null) +","      '\\nDetails:\\n' + util.inspect(e, false, null)","    );","  }","","  try {","","    // Set the attr value to the generated schema attribute","    attr = this._context.waterline.schema[this._context.identity].attributes[keyName];","","    // Get the current collection's primary key attribute","    Object.keys(this._context._attributes).forEach(function(key) {","      if (hasOwnProperty(self._context._attributes[key], 'primaryKey') && self._context._attributes[key].primaryKey) {","        pk = self._context._attributes[key].columnName || key;","      }","    });","","    if (!attr) {","      throw new Error(","        'In ' + util.format('`.populate(\"%s\")`', keyName) +","        ', attempting to populate an attribute that doesn\\'t exist'","      );","    }","","    //////////////////////////////////////////////////////////////////////","    // (there has been significant progress made towards both of these ///","    // goals-- contact @mikermcneil if you want to help) /////////////////","    //////////////////////////////////////////////////////////////////////","    // TODO:","    // Create synonym for `.populate()` syntax using criteria object","    // syntax.  i.e. instead of using `joins` key in criteria object","    // at the app level.","    //////////////////////////////////////////////////////////////////////","    // TODO:","    // Support Mongoose-style `foo.bar.baz` syntax for nested `populate`s.","    // (or something comparable.)","    // One solution would be:","    // .populate({","    //   friends: {","    //     where: { name: 'mike' },","    //     populate: {","    //       dentist: {","    //         where: { name: 'rob' }","    //       }","    //     }","    //   }","    // }, optionalCriteria )","    ////////////////////////////////////////////////////////////////////","","","    // Grab the key being populated to check if it is a has many to belongs to","    // If it's a belongs_to the adapter needs to know that it should replace the foreign key","    // with the associated value.","    var parentKey = this._context.waterline.collections[this._context.identity].attributes[keyName];","","    // Build the initial join object that will link this collection to either another collection","    // or to a junction table.","    join = {","      parent: this._context.identity,","      parentKey: attr.columnName || pk,","      child: attr.references,","      childKey: attr.on,","      select: Object.keys(this._context.waterline.schema[attr.references].attributes),","      alias: keyName,","      removeParentKey: !!parentKey.model,","      model: !!hasOwnProperty(parentKey, 'model'),","      collection: !!hasOwnProperty(parentKey, 'collection')","    };","","    // Build select object to use in the integrator","    var select = [];","    Object.keys(this._context.waterline.schema[attr.references].attributes).forEach(function(key) {","      var obj = self._context.waterline.schema[attr.references].attributes[key];","      if (!hasOwnProperty(obj, 'columnName')) {","        select.push(key);","        return;","      }","","      select.push(obj.columnName);","    });","","    join.select = select;","","    var schema = this._context.waterline.schema[attr.references];","    var reference = null;","","    // If linking to a junction table the attributes shouldn't be included in the return value","    if (schema.junctionTable) {","      join.select = false;","      reference = _.find(schema.attributes, function(attribute) {","        return attribute.references && attribute.columnName !== attr.on;","      });","    } else if (schema.throughTable && schema.throughTable[self._context.identity + '.' + keyName]) {","      join.select = false;","      reference = schema.attributes[schema.throughTable[self._context.identity + '.' + keyName]];","    }","","    joins.push(join);","","    // If a junction table is used add an additional join to get the data","    if (reference && hasOwnProperty(attr, 'on')) {","      // Build out the second join object that will link a junction table with the","      // values being populated","      var selects = _.map(_.keys(this._context.waterline.schema[reference.references].attributes), function(attr) {","        var expandedAttr = self._context.waterline.schema[reference.references].attributes[attr];","        return expandedAttr.columnName || attr;","      });","","      join = {","        parent: attr.references,","        parentKey: reference.columnName,","        child: reference.references,","        childKey: reference.on,","        select: selects,","        alias: keyName,","        junctionTable: true,","        removeParentKey: !!parentKey.model,","        model: false,","        collection: true","      };","","      joins.push(join);","    }","","    // Append the criteria to the correct join if available","    if (criteria && joins.length > 1) {","      joins[1].criteria = criteria;","    } else if (criteria) {","      joins[0].criteria = criteria;","    }","","    // Set the criteria joins","    this._criteria.joins = Array.prototype.concat(this._criteria.joins || [], joins);","","    return this;","  } catch (e) {","    throw new Error(","      'Encountered unexpected error while building join instructions for ' +","      util.format('`.populate(\"%s\")`', keyName) +","      '\\nDetails:\\n' +","      util.inspect(e, false, null)","    );","  }","};","","/**"," * Add a Where clause to the criteria object"," *"," * @param {Object} criteria to append"," * @return this"," */","","Deferred.prototype.where = function(criteria) {","","  if (!criteria) return this;","","  // If the criteria is an array of objects, wrap it in an \"or\"","  if (Array.isArray(criteria) && _.all(criteria, function(crit) {return _.isObject(crit);})) {","    criteria = {or: criteria};","  }","","  // Normalize criteria","  criteria = normalize.criteria(criteria);","","  // Wipe out the existing WHERE clause if the specified criteria ends up `false`","  // (since neither could match anything)","  if (criteria === false) {","    this._criteria = false;","  }","","  if (!criteria || !criteria.where) return this;","","  if (!this._criteria) this._criteria = {};","  var where = this._criteria.where || {};","","  // Merge with existing WHERE clause","  Object.keys(criteria.where).forEach(function(key) {","    where[key] = criteria.where[key];","  });","","  this._criteria.where = where;","","  return this;","};","","/**"," * Add a Limit clause to the criteria object"," *"," * @param {Integer} number to limit"," * @return this"," */","","Deferred.prototype.limit = function(limit) {","  this._criteria.limit = limit;","","  return this;","};","","/**"," * Add a Skip clause to the criteria object"," *"," * @param {Integer} number to skip"," * @return this"," */","","Deferred.prototype.skip = function(skip) {","  this._criteria.skip = skip;","","  return this;","};","","/**"," * Add a Paginate clause to the criteria object"," *"," * This is syntatical sugar that calls skip and"," * limit from a single function."," *"," * @param {Object} page and limit"," * @return this"," */","Deferred.prototype.paginate = function(options) {","  var defaultLimit = 10;","","  if (options === undefined) options = { page: 0, limit: defaultLimit };","","  var page = options.page || 0;","  var limit = options.limit || defaultLimit;","  var skip = 0;","","  if (page > 0 && limit === 0) skip = page - 1;","  if (page > 0 && limit > 0) skip = (page * limit) - limit;","","  this","  .skip(skip)","  .limit(limit);","","  return this;","};","","/**"," * Add a groupBy clause to the criteria object"," *"," * @param {Array|Arguments} Keys to group by"," * @return this"," */","Deferred.prototype.groupBy = function() {","  buildAggregate.call(this, 'groupBy', Array.prototype.slice.call(arguments));","  return this;","};","","","/**"," * Add a Sort clause to the criteria object"," *"," * @param {String|Object} key and order"," * @return this"," */","","Deferred.prototype.sort = function(criteria) {","","  if (!criteria) return this;","","  // Normalize criteria","  criteria = normalize.criteria({ sort: criteria });","","  var sort = this._criteria.sort || {};","","  Object.keys(criteria.sort).forEach(function(key) {","    sort[key] = criteria.sort[key];","  });","","  this._criteria.sort = sort;","","  return this;","};","","/**"," * Add a Sum clause to the criteria object"," *"," * @param {Array|Arguments} Keys to sum over"," * @return this"," */","Deferred.prototype.sum = function() {","  buildAggregate.call(this, 'sum', Array.prototype.slice.call(arguments));","  return this;","};","","/**"," * Add an Average clause to the criteria object"," *"," * @param {Array|Arguments} Keys to average over"," * @return this"," */","Deferred.prototype.average = function() {","  buildAggregate.call(this, 'average', Array.prototype.slice.call(arguments));","  return this;","};","","/**"," * Add a min clause to the criteria object"," *"," * @param {Array|Arguments} Keys to min over"," * @return this"," */","Deferred.prototype.min = function() {","  buildAggregate.call(this, 'min', Array.prototype.slice.call(arguments));","  return this;","};","","/**"," * Add a min clause to the criteria object"," *"," * @param {Array|Arguments} Keys to min over"," * @return this"," */","Deferred.prototype.max = function() {","  buildAggregate.call(this, 'max', Array.prototype.slice.call(arguments));","  return this;","};","","","/**"," * Add values to be used in update or create query"," *"," * @param {Object, Array} values"," * @return this"," */","","Deferred.prototype.set = function(values) {","  this._values = values;","","  return this;","};","","/**"," * Execute a Query using the method passed into the"," * constuctor."," *"," * @param {Function} callback"," * @return callback with parameters (err, results)"," */","","Deferred.prototype.exec = function(cb) {","","  if (!cb) {","    console.log(new Error('Error: No Callback supplied, you must define a callback.').message);","    return;","  }","","  // Normalize callback/switchback","  cb = normalize.callback(cb);","","  // Set up arguments + callback","  var args = [this._criteria, cb];","  if (this._values) args.splice(1, 0, this._values);","","  // Pass control to the adapter with the appropriate arguments.","  this._method.apply(this._context, args);","};","","/**"," * Executes a Query, and returns a promise"," */","","Deferred.prototype.toPromise = function() {","  if (!this._deferred) {","    this._deferred = Promise.promisify(this.exec).bind(this)();","  }","  return this._deferred;","};","","/**"," * Executes a Query, and returns a promise that applies cb/ec to the"," * result/error."," */","","Deferred.prototype.then = function(cb, ec) {","  return this.toPromise().then(cb, ec);","};","","/**"," * Applies results to function fn.apply, and returns a promise"," */","","Deferred.prototype.spread = function(cb) {","  return this.toPromise().spread(cb);","};","","/**"," * returns a promise and gets resolved with error"," */","","Deferred.prototype.catch = function(cb) {","  return this.toPromise().catch(cb);","};","","","/**"," * Alias \"catch\" as \"fail\""," */","Deferred.prototype.fail = Deferred.prototype.catch;","","/**"," * Build An Aggregate Criteria Option"," *"," * @param {String} key"," * @api private"," */","","function buildAggregate(key, args) {","","  // If passed in a list, set that as the min criteria","  if (args[0] instanceof Array) {","    args = args[0];","  }","","  this._criteria[key] = args || {};","}",""],"l":{"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"17":1,"19":1,"21":0,"22":0,"24":0,"25":0,"26":0,"27":0,"29":0,"31":0,"48":1,"51":0,"54":0,"57":0,"64":0,"73":1,"74":0,"75":0,"76":0,"78":0,"92":1,"94":0,"95":0,"96":0,"97":0,"98":0,"102":0,"103":0,"104":0,"106":0,"110":0,"111":0,"121":0,"125":0,"133":0,"136":0,"139":0,"140":0,"141":0,"145":0,"146":0,"181":0,"185":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"206":0,"209":0,"211":0,"212":0,"215":0,"216":0,"217":0,"218":0,"220":0,"221":0,"222":0,"225":0,"228":0,"231":0,"232":0,"233":0,"236":0,"249":0,"253":0,"254":0,"255":0,"256":0,"260":0,"262":0,"264":0,"280":1,"282":0,"285":0,"286":0,"290":0,"294":0,"295":0,"298":0,"300":0,"301":0,"304":0,"305":0,"308":0,"310":0,"320":1,"321":0,"323":0,"333":1,"334":0,"336":0,"348":1,"349":0,"351":0,"353":0,"354":0,"355":0,"357":0,"358":0,"360":0,"364":0,"373":1,"374":0,"375":0,"386":1,"388":0,"391":0,"393":0,"395":0,"396":0,"399":0,"401":0,"410":1,"411":0,"412":0,"421":1,"422":0,"423":0,"432":1,"433":0,"434":0,"443":1,"444":0,"445":0,"456":1,"457":0,"459":0,"470":1,"472":0,"473":0,"474":0,"478":0,"481":0,"482":0,"485":0,"492":1,"493":0,"494":0,"496":0,"504":1,"505":0,"512":1,"513":0,"520":1,"521":0,"528":1,"537":1,"540":0,"541":0,"544":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/acyclicTraversal.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/acyclicTraversal.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"acyclicTraversal","line":20,"loc":{"start":{"line":20,"column":17},"end":{"line":20,"column":82}}},"2":{"name":"traverseSchemaGraph","line":38,"loc":{"start":{"line":38,"column":2},"end":{"line":38,"column":62}}},"3":{"name":"buildSubsetOfAssociations","line":82,"loc":{"start":{"line":82,"column":40},"end":{"line":82,"column":105}}},"4":{"name":"(anonymous_4)","line":96,"loc":{"start":{"line":96,"column":31},"end":{"line":96,"column":66}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":20,"column":0},"end":{"line":110,"column":2}},"3":{"start":{"line":23,"column":2},"end":{"line":28,"column":4}},"4":{"start":{"line":30,"column":2},"end":{"line":30,"column":60}},"5":{"start":{"line":38,"column":2},"end":{"line":108,"column":3}},"6":{"start":{"line":40,"column":4},"end":{"line":40,"column":45}},"7":{"start":{"line":41,"column":4},"end":{"line":41,"column":52}},"8":{"start":{"line":43,"column":4},"end":{"line":43,"column":20}},"9":{"start":{"line":47,"column":4},"end":{"line":50,"column":7}},"10":{"start":{"line":52,"column":4},"end":{"line":52,"column":28}},"11":{"start":{"line":52,"column":21},"end":{"line":52,"column":28}},"12":{"start":{"line":55,"column":4},"end":{"line":58,"column":7}},"13":{"start":{"line":61,"column":4},"end":{"line":61,"column":53}},"14":{"start":{"line":62,"column":4},"end":{"line":62,"column":106}},"15":{"start":{"line":62,"column":19},"end":{"line":62,"column":106}},"16":{"start":{"line":63,"column":4},"end":{"line":63,"column":71}},"17":{"start":{"line":66,"column":4},"end":{"line":66,"column":54}},"18":{"start":{"line":73,"column":4},"end":{"line":78,"column":5}},"19":{"start":{"line":74,"column":6},"end":{"line":77,"column":9}},"20":{"start":{"line":81,"column":4},"end":{"line":92,"column":13}},"21":{"start":{"line":83,"column":8},"end":{"line":90,"column":9}},"22":{"start":{"line":84,"column":10},"end":{"line":88,"column":23}},"23":{"start":{"line":89,"column":10},"end":{"line":89,"column":27}},"24":{"start":{"line":91,"column":8},"end":{"line":91,"column":25}},"25":{"start":{"line":96,"column":4},"end":{"line":107,"column":11}},"26":{"start":{"line":99,"column":6},"end":{"line":99,"column":99}},"27":{"start":{"line":102,"column":6},"end":{"line":104,"column":7}},"28":{"start":{"line":103,"column":8},"end":{"line":103,"column":46}},"29":{"start":{"line":106,"column":6},"end":{"line":106,"column":28}}},"branchMap":{"1":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":4},"end":{"line":52,"column":4}},{"start":{"line":52,"column":4},"end":{"line":52,"column":4}}]},"2":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":4},"end":{"line":62,"column":4}},{"start":{"line":62,"column":4},"end":{"line":62,"column":4}}]},"3":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":33},"end":{"line":63,"column":47}},{"start":{"line":63,"column":51},"end":{"line":63,"column":70}}]},"4":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":4},"end":{"line":73,"column":4}},{"start":{"line":73,"column":4},"end":{"line":73,"column":4}}]},"5":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":8},"end":{"line":83,"column":8}},{"start":{"line":83,"column":8},"end":{"line":83,"column":8}}]},"6":{"line":83,"type":"binary-expr","locations":[{"start":{"line":83,"column":12},"end":{"line":83,"column":31}},{"start":{"line":83,"column":36},"end":{"line":83,"column":49}},{"start":{"line":83,"column":53},"end":{"line":83,"column":71}}]},"7":{"line":86,"type":"binary-expr","locations":[{"start":{"line":86,"column":22},"end":{"line":86,"column":35}},{"start":{"line":86,"column":39},"end":{"line":86,"column":57}}]},"8":{"line":87,"type":"cond-expr","locations":[{"start":{"line":87,"column":41},"end":{"line":87,"column":48}},{"start":{"line":87,"column":51},"end":{"line":87,"column":63}}]},"9":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":6},"end":{"line":102,"column":6}},{"start":{"line":102,"column":6},"end":{"line":102,"column":6}}]}},"code":["/**"," * Module dependencies"," */","","var _ = require('lodash');","","","/**"," * Traverse the shema to build a populate plan object"," * that will populate every relation, sub-relation, and so on"," * reachable from the initial model and relation at least once"," * (perhaps most notable is that this provides access to most"," * related data without getting caught in loops.)"," *"," * @param  {[type]} schema          [description]"," * @param  {[type]} initialModel    [description]"," * @param  {[type]} initialRelation [description]"," * @return {[type]}                 [description]"," */","module.exports = function acyclicTraversal(schema, initialModel, initialRelation) {","","  // Track the edges which have already been traversed","  var alreadyTraversed = [","    // {","    //   relation: initialRelation,","    //   model: initialModel","    // }","  ];","","  return traverseSchemaGraph(initialModel, initialRelation);","","  /**","   * Recursive function","   * @param  {[type]} modelIdentity  [description]","   * @param  {[type]} nameOfRelation [description]","   * @return {[type]}                [description]","   */","  function traverseSchemaGraph(modelIdentity, nameOfRelation) {","","    var currentModel = schema[modelIdentity];","    var currentAttributes = currentModel.attributes;","","    var isRedundant;","","    // If this relation has already been traversed, return.","    // (i.e. `schema.attributes.modelIdentity.nameOfRelation`)","    isRedundant = _.findWhere(alreadyTraversed, {","      alias: nameOfRelation,","      model: modelIdentity","    });","","    if (isRedundant) return;","","    // Push this relation onto the `alreadyTraversed` stack.","    alreadyTraversed.push({","      alias: nameOfRelation,","      model: modelIdentity","    });","","","    var relation = currentAttributes[nameOfRelation];","    if (!relation) throw new Error('Unknown relation in schema: ' + modelIdentity + '.' + nameOfRelation);","    var identityOfRelatedModel = relation.model || relation.collection;","","    // Get the related model","    var relatedModel = schema[identityOfRelatedModel];","","    // If this relation is a collection with a `via` back-reference,","    // push it on to the `alreadyTraversed` stack.","    // (because the information therein is probably redundant)","    // TODO: evaluate this-- it may or may not be a good idea","    // (but I think it's a nice touch)","    if (relation.via) {","      alreadyTraversed.push({","        alias: relation.via,","        model: identityOfRelatedModel","      });","    }","","    // Lookup ALL the relations OF THE RELATED model.","    var relations =","      _(relatedModel.attributes).reduce(function buildSubsetOfAssociations(relations, attrDef, attrName) {","        if (_.isObject(attrDef) && (attrDef.model || attrDef.collection)) {","          relations.push(_.merge({","            alias: attrName,","            identity: attrDef.model || attrDef.collection,","            cardinality: attrDef.model ? 'model' : 'collection'","          }, attrDef));","          return relations;","        }","        return relations;","      }, []);","","    // Return a piece of the result plan by calling `traverseSchemaGraph`","    // on each of the RELATED model's relations.","    return _.reduce(relations, function(resultPlanPart, relation) {","","      // Recursive step","      resultPlanPart[relation.alias] = traverseSchemaGraph(identityOfRelatedModel, relation.alias);","","      // Trim undefined result plan parts","      if (resultPlanPart[relation.alias] === undefined) {","        delete resultPlanPart[relation.alias];","      }","","      return resultPlanPart;","    }, {});","  }","","};",""],"l":{"5":1,"20":1,"23":0,"30":0,"38":1,"40":0,"41":0,"43":0,"47":0,"52":0,"55":0,"61":0,"62":0,"63":0,"66":0,"73":0,"74":0,"81":0,"83":0,"84":0,"89":0,"91":0,"96":0,"99":0,"102":0,"103":0,"106":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/callbacksRunner.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/callbacksRunner.js","s":{"1":1,"2":1,"3":1,"4":0,"5":1,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0,"25":1,"26":0,"27":0,"28":0},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"(anonymous_1)","line":24,"loc":{"start":{"line":24,"column":18},"end":{"line":24,"column":61}}},"2":{"name":"(anonymous_2)","line":38,"loc":{"start":{"line":38,"column":22},"end":{"line":38,"column":52}}},"3":{"name":"(anonymous_3)","line":40,"loc":{"start":{"line":40,"column":11},"end":{"line":40,"column":32}}},"4":{"name":"(anonymous_4)","line":57,"loc":{"start":{"line":57,"column":21},"end":{"line":57,"column":51}}},"5":{"name":"(anonymous_5)","line":59,"loc":{"start":{"line":59,"column":11},"end":{"line":59,"column":32}}},"6":{"name":"(anonymous_6)","line":76,"loc":{"start":{"line":76,"column":22},"end":{"line":76,"column":52}}},"7":{"name":"(anonymous_7)","line":78,"loc":{"start":{"line":78,"column":11},"end":{"line":78,"column":32}}},"8":{"name":"(anonymous_8)","line":95,"loc":{"start":{"line":95,"column":21},"end":{"line":95,"column":51}}},"9":{"name":"(anonymous_9)","line":97,"loc":{"start":{"line":97,"column":11},"end":{"line":97,"column":32}}},"10":{"name":"(anonymous_10)","line":114,"loc":{"start":{"line":114,"column":23},"end":{"line":114,"column":55}}},"11":{"name":"(anonymous_11)","line":116,"loc":{"start":{"line":116,"column":11},"end":{"line":116,"column":32}}},"12":{"name":"(anonymous_12)","line":133,"loc":{"start":{"line":133,"column":22},"end":{"line":133,"column":52}}},"13":{"name":"(anonymous_13)","line":135,"loc":{"start":{"line":135,"column":11},"end":{"line":135,"column":32}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":29}},"2":{"start":{"line":11,"column":0},"end":{"line":11,"column":33}},"3":{"start":{"line":24,"column":0},"end":{"line":26,"column":2}},"4":{"start":{"line":25,"column":2},"end":{"line":25,"column":44}},"5":{"start":{"line":38,"column":0},"end":{"line":45,"column":2}},"6":{"start":{"line":40,"column":2},"end":{"line":42,"column":4}},"7":{"start":{"line":41,"column":4},"end":{"line":41,"column":37}},"8":{"start":{"line":44,"column":2},"end":{"line":44,"column":60}},"9":{"start":{"line":57,"column":0},"end":{"line":64,"column":2}},"10":{"start":{"line":59,"column":2},"end":{"line":61,"column":4}},"11":{"start":{"line":60,"column":4},"end":{"line":60,"column":37}},"12":{"start":{"line":63,"column":2},"end":{"line":63,"column":59}},"13":{"start":{"line":76,"column":0},"end":{"line":83,"column":2}},"14":{"start":{"line":78,"column":2},"end":{"line":80,"column":4}},"15":{"start":{"line":79,"column":4},"end":{"line":79,"column":37}},"16":{"start":{"line":82,"column":2},"end":{"line":82,"column":60}},"17":{"start":{"line":95,"column":0},"end":{"line":102,"column":2}},"18":{"start":{"line":97,"column":2},"end":{"line":99,"column":4}},"19":{"start":{"line":98,"column":4},"end":{"line":98,"column":37}},"20":{"start":{"line":101,"column":2},"end":{"line":101,"column":59}},"21":{"start":{"line":114,"column":0},"end":{"line":121,"column":2}},"22":{"start":{"line":116,"column":2},"end":{"line":118,"column":4}},"23":{"start":{"line":117,"column":4},"end":{"line":117,"column":39}},"24":{"start":{"line":120,"column":2},"end":{"line":120,"column":61}},"25":{"start":{"line":133,"column":0},"end":{"line":140,"column":2}},"26":{"start":{"line":135,"column":2},"end":{"line":137,"column":4}},"27":{"start":{"line":136,"column":4},"end":{"line":136,"column":37}},"28":{"start":{"line":139,"column":2},"end":{"line":139,"column":60}}},"branchMap":{},"code":["/**"," * Module Dependencies"," */","","var async = require('async');","","/**"," * Run Lifecycle Callbacks"," */","","var runner = module.exports = {};","","","/**"," * Run Validation Callbacks"," *"," * @param {Object} context"," * @param {Object} values"," * @param {Boolean} presentOnly"," * @param {Function} cb"," * @api public"," */","","runner.validate = function(context, values, presentOnly, cb) {","  context.validate(values, presentOnly, cb);","};","","","/**"," * Run Before Create Callbacks"," *"," * @param {Object} context"," * @param {Object} values"," * @param {Function} cb"," * @api public"," */","","runner.beforeCreate = function(context, values, cb) {","","  var fn = function(item, next) {","    item.call(context, values, next);","  };","","  async.eachSeries(context._callbacks.beforeCreate, fn, cb);","};","","","/**"," * Run After Create Callbacks"," *"," * @param {Object} context"," * @param {Object} values"," * @param {Function} cb"," * @api public"," */","","runner.afterCreate = function(context, values, cb) {","","  var fn = function(item, next) {","    item.call(context, values, next);","  };","","  async.eachSeries(context._callbacks.afterCreate, fn, cb);","};","","","/**"," * Run Before Update Callbacks"," *"," * @param {Object} context"," * @param {Object} values"," * @param {Function} cb"," * @api public"," */","","runner.beforeUpdate = function(context, values, cb) {","","  var fn = function(item, next) {","    item.call(context, values, next);","  };","","  async.eachSeries(context._callbacks.beforeUpdate, fn, cb);","};","","","/**"," * Run After Update Callbacks"," *"," * @param {Object} context"," * @param {Object} values"," * @param {Function} cb"," * @api public"," */","","runner.afterUpdate = function(context, values, cb) {","","  var fn = function(item, next) {","    item.call(context, values, next);","  };","","  async.eachSeries(context._callbacks.afterUpdate, fn, cb);","};","","","/**"," * Run Before Destroy Callbacks"," *"," * @param {Object} context"," * @param {Object} criteria"," * @param {Function} cb"," * @api public"," */","","runner.beforeDestroy = function(context, criteria, cb) {","","  var fn = function(item, next) {","    item.call(context, criteria, next);","  };","","  async.eachSeries(context._callbacks.beforeDestroy, fn, cb);","};","","","/**"," * Run After Destroy Callbacks"," *"," * @param {Object} context"," * @param {Object} values"," * @param {Function} cb"," * @api public"," */","","runner.afterDestroy = function(context, values, cb) {","","  var fn = function(item, next) {","    item.call(context, values, next);","  };","","  async.eachSeries(context._callbacks.afterDestroy, fn, cb);","};",""],"l":{"5":1,"11":1,"24":1,"25":0,"38":1,"40":0,"41":0,"44":0,"57":1,"59":0,"60":0,"63":0,"76":1,"78":0,"79":0,"82":0,"95":1,"97":0,"98":0,"101":0,"114":1,"116":0,"117":0,"120":0,"133":1,"135":0,"136":0,"139":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/dql/update.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/dql/update.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":1,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":1,"70":0,"71":0,"72":0,"73":0,"74":1,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":1,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"fnMap":{"1":{"name":"(anonymous_1)","line":25,"loc":{"start":{"line":25,"column":17},"end":{"line":25,"column":48}}},"2":{"name":"(anonymous_2)","line":53,"loc":{"start":{"line":53,"column":43},"end":{"line":53,"column":57}}},"3":{"name":"(anonymous_3)","line":56,"loc":{"start":{"line":56,"column":52},"end":{"line":56,"column":66}}},"4":{"name":"prepareArguments","line":72,"loc":{"start":{"line":72,"column":0},"end":{"line":72,"column":44}}},"5":{"name":"createBelongsTo","line":105,"loc":{"start":{"line":105,"column":0},"end":{"line":105,"column":43}}},"6":{"name":"(anonymous_6)","line":108,"loc":{"start":{"line":108,"column":56},"end":{"line":108,"column":77}}},"7":{"name":"(anonymous_7)","line":140,"loc":{"start":{"line":140,"column":15},"end":{"line":140,"column":34}}},"8":{"name":"(anonymous_8)","line":149,"loc":{"start":{"line":149,"column":49},"end":{"line":149,"column":65}}},"9":{"name":"beforeCallbacks","line":163,"loc":{"start":{"line":163,"column":0},"end":{"line":163,"column":37}}},"10":{"name":"(anonymous_10)","line":169,"loc":{"start":{"line":169,"column":4},"end":{"line":169,"column":17}}},"11":{"name":"(anonymous_11)","line":174,"loc":{"start":{"line":174,"column":4},"end":{"line":174,"column":17}}},"12":{"name":"updateRecords","line":188,"loc":{"start":{"line":188,"column":0},"end":{"line":188,"column":41}}},"13":{"name":"(anonymous_13)","line":208,"loc":{"start":{"line":208,"column":66},"end":{"line":208,"column":88}}},"14":{"name":"(anonymous_14)","line":218,"loc":{"start":{"line":218,"column":39},"end":{"line":218,"column":55}}},"15":{"name":"(anonymous_15)","line":223,"loc":{"start":{"line":223,"column":74},"end":{"line":223,"column":88}}},"16":{"name":"(anonymous_16)","line":226,"loc":{"start":{"line":226,"column":36},"end":{"line":226,"column":63}}},"17":{"name":"(anonymous_17)","line":228,"loc":{"start":{"line":228,"column":9},"end":{"line":228,"column":23}}},"18":{"name":"(anonymous_18)","line":231,"loc":{"start":{"line":231,"column":43},"end":{"line":231,"column":59}}},"19":{"name":"updatedNestedAssociations","line":250,"loc":{"start":{"line":250,"column":0},"end":{"line":250,"column":61}}},"20":{"name":"(anonymous_20)","line":256,"loc":{"start":{"line":256,"column":54},"end":{"line":256,"column":70}}},"21":{"name":"(anonymous_21)","line":267,"loc":{"start":{"line":267,"column":27},"end":{"line":267,"column":41}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":29}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":26}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":51}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":43}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":49}},"6":{"start":{"line":10,"column":0},"end":{"line":10,"column":38}},"7":{"start":{"line":11,"column":0},"end":{"line":11,"column":55}},"8":{"start":{"line":12,"column":0},"end":{"line":12,"column":63}},"9":{"start":{"line":13,"column":0},"end":{"line":13,"column":38}},"10":{"start":{"line":25,"column":0},"end":{"line":61,"column":2}},"11":{"start":{"line":27,"column":2},"end":{"line":27,"column":18}},"12":{"start":{"line":29,"column":2},"end":{"line":32,"column":3}},"13":{"start":{"line":30,"column":4},"end":{"line":30,"column":18}},"14":{"start":{"line":31,"column":4},"end":{"line":31,"column":20}},"15":{"start":{"line":35,"column":2},"end":{"line":37,"column":3}},"16":{"start":{"line":36,"column":4},"end":{"line":36,"column":61}},"17":{"start":{"line":41,"column":2},"end":{"line":43,"column":3}},"18":{"start":{"line":42,"column":4},"end":{"line":42,"column":24}},"19":{"start":{"line":46,"column":2},"end":{"line":46,"column":86}},"20":{"start":{"line":47,"column":2},"end":{"line":47,"column":76}},"21":{"start":{"line":47,"column":15},"end":{"line":47,"column":76}},"22":{"start":{"line":50,"column":2},"end":{"line":50,"column":67}},"23":{"start":{"line":53,"column":2},"end":{"line":60,"column":5}},"24":{"start":{"line":54,"column":4},"end":{"line":54,"column":28}},"25":{"start":{"line":54,"column":13},"end":{"line":54,"column":28}},"26":{"start":{"line":56,"column":4},"end":{"line":59,"column":7}},"27":{"start":{"line":57,"column":6},"end":{"line":57,"column":30}},"28":{"start":{"line":57,"column":15},"end":{"line":57,"column":30}},"29":{"start":{"line":58,"column":6},"end":{"line":58,"column":49}},"30":{"start":{"line":72,"column":0},"end":{"line":98,"column":1}},"31":{"start":{"line":76,"column":2},"end":{"line":76,"column":48}},"32":{"start":{"line":79,"column":2},"end":{"line":79,"column":42}},"33":{"start":{"line":82,"column":2},"end":{"line":82,"column":36}},"34":{"start":{"line":83,"column":2},"end":{"line":83,"column":108}},"35":{"start":{"line":87,"column":2},"end":{"line":87,"column":114}},"36":{"start":{"line":90,"column":2},"end":{"line":90,"column":34}},"37":{"start":{"line":92,"column":2},"end":{"line":97,"column":4}},"38":{"start":{"line":105,"column":0},"end":{"line":154,"column":1}},"39":{"start":{"line":106,"column":2},"end":{"line":106,"column":18}},"40":{"start":{"line":108,"column":2},"end":{"line":153,"column":9}},"41":{"start":{"line":111,"column":4},"end":{"line":111,"column":67}},"42":{"start":{"line":111,"column":53},"end":{"line":111,"column":67}},"43":{"start":{"line":114,"column":4},"end":{"line":114,"column":115}},"44":{"start":{"line":116,"column":4},"end":{"line":116,"column":50}},"45":{"start":{"line":117,"column":4},"end":{"line":117,"column":18}},"46":{"start":{"line":119,"column":4},"end":{"line":119,"column":71}},"47":{"start":{"line":119,"column":38},"end":{"line":119,"column":71}},"48":{"start":{"line":120,"column":4},"end":{"line":120,"column":61}},"49":{"start":{"line":120,"column":33},"end":{"line":120,"column":61}},"50":{"start":{"line":121,"column":4},"end":{"line":121,"column":34}},"51":{"start":{"line":121,"column":20},"end":{"line":121,"column":34}},"52":{"start":{"line":123,"column":4},"end":{"line":123,"column":54}},"53":{"start":{"line":124,"column":4},"end":{"line":124,"column":70}},"54":{"start":{"line":126,"column":4},"end":{"line":126,"column":22}},"55":{"start":{"line":128,"column":4},"end":{"line":128,"column":152}},"56":{"start":{"line":130,"column":4},"end":{"line":130,"column":32}},"57":{"start":{"line":133,"column":4},"end":{"line":133,"column":14}},"58":{"start":{"line":134,"column":4},"end":{"line":138,"column":5}},"59":{"start":{"line":135,"column":6},"end":{"line":135,"column":70}},"60":{"start":{"line":137,"column":6},"end":{"line":137,"column":54}},"61":{"start":{"line":140,"column":4},"end":{"line":151,"column":7}},"62":{"start":{"line":141,"column":6},"end":{"line":141,"column":32}},"63":{"start":{"line":141,"column":15},"end":{"line":141,"column":32}},"64":{"start":{"line":144,"column":6},"end":{"line":144,"column":37}},"65":{"start":{"line":146,"column":6},"end":{"line":146,"column":37}},"66":{"start":{"line":149,"column":6},"end":{"line":149,"column":92}},"67":{"start":{"line":149,"column":67},"end":{"line":149,"column":88}},"68":{"start":{"line":150,"column":6},"end":{"line":150,"column":13}},"69":{"start":{"line":163,"column":0},"end":{"line":179,"column":1}},"70":{"start":{"line":164,"column":2},"end":{"line":164,"column":18}},"71":{"start":{"line":166,"column":2},"end":{"line":178,"column":9}},"72":{"start":{"line":170,"column":6},"end":{"line":170,"column":49}},"73":{"start":{"line":175,"column":6},"end":{"line":175,"column":47}},"74":{"start":{"line":188,"column":0},"end":{"line":240,"column":1}},"75":{"start":{"line":189,"column":2},"end":{"line":189,"column":18}},"76":{"start":{"line":192,"column":2},"end":{"line":195,"column":3}},"77":{"start":{"line":194,"column":4},"end":{"line":194,"column":57}},"78":{"start":{"line":198,"column":2},"end":{"line":198,"column":73}},"79":{"start":{"line":201,"column":2},"end":{"line":201,"column":70}},"80":{"start":{"line":204,"column":2},"end":{"line":204,"column":77}},"81":{"start":{"line":208,"column":2},"end":{"line":239,"column":5}},"82":{"start":{"line":209,"column":4},"end":{"line":212,"column":5}},"83":{"start":{"line":210,"column":6},"end":{"line":210,"column":72}},"84":{"start":{"line":210,"column":37},"end":{"line":210,"column":70}},"85":{"start":{"line":211,"column":6},"end":{"line":211,"column":21}},"86":{"start":{"line":215,"column":4},"end":{"line":215,"column":50}},"87":{"start":{"line":215,"column":32},"end":{"line":215,"column":50}},"88":{"start":{"line":218,"column":4},"end":{"line":220,"column":7}},"89":{"start":{"line":219,"column":6},"end":{"line":219,"column":50}},"90":{"start":{"line":223,"column":4},"end":{"line":237,"column":7}},"91":{"start":{"line":224,"column":6},"end":{"line":224,"column":30}},"92":{"start":{"line":224,"column":15},"end":{"line":224,"column":30}},"93":{"start":{"line":226,"column":6},"end":{"line":236,"column":9}},"94":{"start":{"line":227,"column":8},"end":{"line":227,"column":54}},"95":{"start":{"line":229,"column":8},"end":{"line":229,"column":32}},"96":{"start":{"line":229,"column":17},"end":{"line":229,"column":32}},"97":{"start":{"line":231,"column":8},"end":{"line":233,"column":11}},"98":{"start":{"line":232,"column":10},"end":{"line":232,"column":40}},"99":{"start":{"line":235,"column":8},"end":{"line":235,"column":25}},"100":{"start":{"line":250,"column":0},"end":{"line":275,"column":1}},"101":{"start":{"line":252,"column":2},"end":{"line":252,"column":18}},"102":{"start":{"line":253,"column":2},"end":{"line":253,"column":53}},"103":{"start":{"line":256,"column":2},"end":{"line":259,"column":5}},"104":{"start":{"line":257,"column":4},"end":{"line":257,"column":50}},"105":{"start":{"line":258,"column":4},"end":{"line":258,"column":56}},"106":{"start":{"line":262,"column":2},"end":{"line":264,"column":3}},"107":{"start":{"line":263,"column":4},"end":{"line":263,"column":16}},"108":{"start":{"line":267,"column":2},"end":{"line":269,"column":5}},"109":{"start":{"line":268,"column":4},"end":{"line":268,"column":32}},"110":{"start":{"line":272,"column":2},"end":{"line":272,"column":83}},"111":{"start":{"line":273,"column":2},"end":{"line":273,"column":44}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":2},"end":{"line":29,"column":2}},{"start":{"line":29,"column":2},"end":{"line":29,"column":2}}]},"2":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":2},"end":{"line":35,"column":2}},{"start":{"line":35,"column":2},"end":{"line":35,"column":2}}]},"3":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":2},"end":{"line":41,"column":2}},{"start":{"line":41,"column":2},"end":{"line":41,"column":2}}]},"4":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":2},"end":{"line":47,"column":2}},{"start":{"line":47,"column":2},"end":{"line":47,"column":2}}]},"5":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":4},"end":{"line":54,"column":4}},{"start":{"line":54,"column":4},"end":{"line":54,"column":4}}]},"6":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":6},"end":{"line":57,"column":6}},{"start":{"line":57,"column":6},"end":{"line":57,"column":6}}]},"7":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":4},"end":{"line":111,"column":4}},{"start":{"line":111,"column":4},"end":{"line":111,"column":4}}]},"8":{"line":114,"type":"cond-expr","locations":[{"start":{"line":114,"column":67},"end":{"line":114,"column":107}},{"start":{"line":114,"column":110},"end":{"line":114,"column":114}}]},"9":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":4},"end":{"line":119,"column":4}},{"start":{"line":119,"column":4},"end":{"line":119,"column":4}}]},"10":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":4},"end":{"line":120,"column":4}},{"start":{"line":120,"column":4},"end":{"line":120,"column":4}}]},"11":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":4},"end":{"line":121,"column":4}},{"start":{"line":121,"column":4},"end":{"line":121,"column":4}}]},"12":{"line":128,"type":"cond-expr","locations":[{"start":{"line":128,"column":79},"end":{"line":128,"column":132}},{"start":{"line":128,"column":135},"end":{"line":128,"column":151}}]},"13":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":4},"end":{"line":134,"column":4}},{"start":{"line":134,"column":4},"end":{"line":134,"column":4}}]},"14":{"line":141,"type":"if","locations":[{"start":{"line":141,"column":6},"end":{"line":141,"column":6}},{"start":{"line":141,"column":6},"end":{"line":141,"column":6}}]},"15":{"line":192,"type":"if","locations":[{"start":{"line":192,"column":2},"end":{"line":192,"column":2}},{"start":{"line":192,"column":2},"end":{"line":192,"column":2}}]},"16":{"line":209,"type":"if","locations":[{"start":{"line":209,"column":4},"end":{"line":209,"column":4}},{"start":{"line":209,"column":4},"end":{"line":209,"column":4}}]},"17":{"line":210,"type":"if","locations":[{"start":{"line":210,"column":6},"end":{"line":210,"column":6}},{"start":{"line":210,"column":6},"end":{"line":210,"column":6}}]},"18":{"line":215,"type":"if","locations":[{"start":{"line":215,"column":4},"end":{"line":215,"column":4}},{"start":{"line":215,"column":4},"end":{"line":215,"column":4}}]},"19":{"line":224,"type":"if","locations":[{"start":{"line":224,"column":6},"end":{"line":224,"column":6}},{"start":{"line":224,"column":6},"end":{"line":224,"column":6}}]},"20":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":8},"end":{"line":229,"column":8}},{"start":{"line":229,"column":8},"end":{"line":229,"column":8}}]},"21":{"line":253,"type":"binary-expr","locations":[{"start":{"line":253,"column":21},"end":{"line":253,"column":46}},{"start":{"line":253,"column":50},"end":{"line":253,"column":52}}]},"22":{"line":258,"type":"binary-expr","locations":[{"start":{"line":258,"column":11},"end":{"line":258,"column":32}},{"start":{"line":258,"column":36},"end":{"line":258,"column":55}}]},"23":{"line":262,"type":"if","locations":[{"start":{"line":262,"column":2},"end":{"line":262,"column":2}},{"start":{"line":262,"column":2},"end":{"line":262,"column":2}}]},"24":{"line":262,"type":"binary-expr","locations":[{"start":{"line":262,"column":6},"end":{"line":262,"column":43}},{"start":{"line":262,"column":47},"end":{"line":262,"column":79}}]}},"code":["/**"," * Module Dependencies"," */","","var async = require('async');","var _ = require('lodash');","var usageError = require('../../utils/usageError');","var utils = require('../../utils/helpers');","var normalize = require('../../utils/normalize');","var Deferred = require('../deferred');","var callbacks = require('../../utils/callbacksRunner');","var nestedOperations = require('../../utils/nestedOperations');","var hop = utils.object.hasOwnProperty;","","","/**"," * Update all records matching criteria"," *"," * @param {Object} criteria"," * @param {Object} values"," * @param {Function} cb"," * @return Deferred object if no callback"," */","","module.exports = function(criteria, values, cb) {","","  var self = this;","","  if (typeof criteria === 'function') {","    cb = criteria;","    criteria = null;","  }","","  // Return Deferred or pass to adapter","  if (typeof cb !== 'function') {","    return new Deferred(this, this.update, criteria, values);","  }","","  // If there was something defined in the criteria that would return no results, don't even","  // run the query and just return an empty result set.","  if (criteria === false) {","    return cb(null, []);","  }","","  // Ensure proper function signature","  var usage = utils.capitalize(this.identity) + '.update(criteria, values, callback)';","  if (!values) return usageError('No updated values specified!', usage, cb);","","  // Format Criteria and Values","  var valuesObject = prepareArguments.call(this, criteria, values);","","  // Create any of the belongsTo associations and set the foreign key values","  createBelongsTo.call(this, valuesObject, function(err) {","    if (err) return cb(err);","","    beforeCallbacks.call(self, valuesObject.values, function(err) {","      if (err) return cb(err);","      updateRecords.call(self, valuesObject, cb);","    });","  });","};","","","/**"," * Prepare Arguments"," *"," * @param {Object} criteria"," * @param {Object} values"," * @return {Object}"," */","","function prepareArguments(criteria, values) {","","  // Check if options is an integer or string and normalize criteria","  // to object, using the specified primary key field.","  criteria = normalize.expandPK(this, criteria);","","  // Normalize criteria","  criteria = normalize.criteria(criteria);","","  // Pull out any associations in the values","  var _values = _.cloneDeep(values);","  var associations = nestedOperations.valuesParser.call(this, this.identity, this.waterline.schema, values);","","  // Replace associated models with their foreign key values if available.","  // Unless the association has a custom primary key (we want to create the object)","  values = nestedOperations.reduceAssociations.call(this, this.identity, this.waterline.schema, values, 'update');","","  // Cast values to proper types (handle numbers as strings)","  values = this._cast.run(values);","","  return {","    criteria: criteria,","    values: values,","    originalValues: _values,","    associations: associations","  };","}","","/**"," * Create BelongsTo Records"," *"," */","","function createBelongsTo(valuesObject, cb) {","  var self = this;","","  async.each(valuesObject.associations.models.slice(0), function(item, next) {","","    // Check if value is an object. If not don't try and create it.","    if (!_.isPlainObject(valuesObject.values[item])) return next();","","    // Check for any transformations","    var attrName = hop(self._transformer._transformations, item) ? self._transformer._transformations[item] : item;","","    var attribute = self._schema.schema[attrName];","    var modelName;","","    if (hop(attribute, 'collection')) modelName = attribute.collection;","    if (hop(attribute, 'model')) modelName = attribute.model;","    if (!modelName) return next();","","    var model = self.waterline.collections[modelName];","    var pkValue = valuesObject.originalValues[item][model.primaryKey];","","    var criteria = {};","","    var pkField = hop(model._transformer._transformations, model.primaryKey) ? model._transformer._transformations[model.primaryKey] : model.primaryKey;","","    criteria[pkField] = pkValue;","","    // If a pkValue if found, do a findOrCreate and look for a record matching the pk.","    var query;","    if (pkValue) {","      query = model.findOrCreate(criteria, valuesObject.values[item]);","    } else {","      query = model.create(valuesObject.values[item]);","    }","","    query.exec(function(err, val) {","      if (err) return next(err);","","      // attach the new model's pk value to the original value's key","      var pk = val[model.primaryKey];","","      valuesObject.values[item] = pk;","","      // now we have pk value attached, remove it from models","      _.remove(valuesObject.associations.models, function(_item) { return _item == item; });","      next();","    });","","  }, cb);","}","","/**"," * Run Before* Lifecycle Callbacks"," *"," * @param {Object} values"," * @param {Function} cb"," */","","function beforeCallbacks(values, cb) {","  var self = this;","","  async.series([","","    // Run Validation with Validation LifeCycle Callbacks","    function(cb) {","      callbacks.validate(self, values, true, cb);","    },","","    // Before Update Lifecycle Callback","    function(cb) {","      callbacks.beforeUpdate(self, values, cb);","    }","","  ], cb);","}","","/**"," * Update Records"," *"," * @param {Object} valuesObjecy"," * @param {Function} cb"," */","","function updateRecords(valuesObject, cb) {","  var self = this;","","  // Automatically change updatedAt (if enabled)","  if (this.autoUpdatedAt) {","    // take into account that the autoUpdateAt attribute may be a string with a different column name","    valuesObject.values[self.autoUpdatedAt] = new Date();","  }","","  // Transform Values","  valuesObject.values = this._transformer.serialize(valuesObject.values);","","  // Clean attributes","  valuesObject.values = this._schema.cleanValues(valuesObject.values);","","  // Transform Search Criteria","  valuesObject.criteria = self._transformer.serialize(valuesObject.criteria);","","","  // Pass to adapter","  self.adapter.update(valuesObject.criteria, valuesObject.values, function(err, values) {","    if (err) {","      if (typeof err === 'object') { err.model = self._model.globalId; }","      return cb(err);","    }","","    // If values is not an array, return an array","    if (!Array.isArray(values)) values = [values];","","    // Unserialize each value","    var transformedValues = values.map(function(value) {","      return self._transformer.unserialize(value);","    });","","    // Update any nested associations and run afterUpdate lifecycle callbacks for each parent","    updatedNestedAssociations.call(self, valuesObject, transformedValues, function(err) {","      if (err) return cb(err);","","      async.each(transformedValues, function(record, callback) {","        callbacks.afterUpdate(self, record, callback);","      }, function(err) {","        if (err) return cb(err);","","        var models = transformedValues.map(function(value) {","          return new self._model(value);","        });","","        cb(null, models);","      });","    });","","  });","}","","/**"," * Update Nested Associations"," *"," * @param {Object} valuesObject"," * @param {Object} values"," * @param {Function} cb"," */","","function updatedNestedAssociations(valuesObject, values, cb) {","","  var self = this;","  var associations = valuesObject.associations || {};","","  // Only attempt nested updates if values are an object or an array","  associations.models = _.filter(associations.models, function(model) {","    var vals = valuesObject.originalValues[model];","    return _.isPlainObject(vals) || Array.isArray(vals);","  });","","  // If no associations were used, return callback","  if (associations.collections.length === 0 && associations.models.length === 0) {","    return cb();","  }","","  // Create an array of model instances for each parent","  var parents = values.map(function(val) {","    return new self._model(val);","  });","","  // Update any nested associations found in the values object","  var args = [parents, valuesObject.originalValues, valuesObject.associations, cb];","  nestedOperations.update.apply(self, args);","","}",""],"l":{"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"25":1,"27":0,"29":0,"30":0,"31":0,"35":0,"36":0,"41":0,"42":0,"46":0,"47":0,"50":0,"53":0,"54":0,"56":0,"57":0,"58":0,"72":1,"76":0,"79":0,"82":0,"83":0,"87":0,"90":0,"92":0,"105":1,"106":0,"108":0,"111":0,"114":0,"116":0,"117":0,"119":0,"120":0,"121":0,"123":0,"124":0,"126":0,"128":0,"130":0,"133":0,"134":0,"135":0,"137":0,"140":0,"141":0,"144":0,"146":0,"149":0,"150":0,"163":1,"164":0,"166":0,"170":0,"175":0,"188":1,"189":0,"192":0,"194":0,"198":0,"201":0,"204":0,"208":0,"209":0,"210":0,"211":0,"215":0,"218":0,"219":0,"223":0,"224":0,"226":0,"227":0,"229":0,"231":0,"232":0,"235":0,"250":1,"252":0,"253":0,"256":0,"257":0,"258":0,"262":0,"263":0,"267":0,"268":0,"272":0,"273":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/usageError.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/usageError.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":17},"end":{"line":5,"column":42}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":9,"column":2}},"2":{"start":{"line":6,"column":2},"end":{"line":6,"column":156}},"3":{"start":{"line":7,"column":2},"end":{"line":7,"column":29}},"4":{"start":{"line":7,"column":10},"end":{"line":7,"column":29}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":27}}},"branchMap":{"1":{"line":7,"type":"if","locations":[{"start":{"line":7,"column":2},"end":{"line":7,"column":2}},{"start":{"line":7,"column":2},"end":{"line":7,"column":2}}]}},"code":["/**"," * Create a nicely formatted usage error"," */","","module.exports = function(err, usage, cb) {","  var message = err + '\\n==============================================\\nProper usage :: \\n' + usage + '\\n==============================================\\n';","  if (cb) return cb(message);","  throw new Error(message);","};",""],"l":{"5":1,"6":0,"7":0,"8":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/dql/destroy.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/dql/destroy.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":1,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":1,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":17},"end":{"line":23,"column":40}}},"2":{"name":"(anonymous_2)","line":53,"loc":{"start":{"line":53,"column":42},"end":{"line":53,"column":56}}},"3":{"name":"(anonymous_3)","line":60,"loc":{"start":{"line":60,"column":35},"end":{"line":60,"column":57}}},"4":{"name":"destroyJoinTableRecords","line":87,"loc":{"start":{"line":87,"column":6},"end":{"line":87,"column":51}}},"5":{"name":"(anonymous_5)","line":91,"loc":{"start":{"line":91,"column":52},"end":{"line":91,"column":66}}},"6":{"name":"(anonymous_6)","line":102,"loc":{"start":{"line":102,"column":41},"end":{"line":102,"column":62}}},"7":{"name":"(anonymous_7)","line":115,"loc":{"start":{"line":115,"column":27},"end":{"line":115,"column":48}}},"8":{"name":"(anonymous_8)","line":135,"loc":{"start":{"line":135,"column":53},"end":{"line":135,"column":67}}},"9":{"name":"after","line":140,"loc":{"start":{"line":140,"column":6},"end":{"line":140,"column":23}}},"10":{"name":"(anonymous_10)","line":153,"loc":{"start":{"line":153,"column":43},"end":{"line":153,"column":59}}},"11":{"name":"(anonymous_11)","line":157,"loc":{"start":{"line":157,"column":56},"end":{"line":157,"column":70}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":29}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":26}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":51}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":43}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":49}},"6":{"start":{"line":10,"column":0},"end":{"line":10,"column":38}},"7":{"start":{"line":11,"column":0},"end":{"line":11,"column":55}},"8":{"start":{"line":12,"column":0},"end":{"line":12,"column":55}},"9":{"start":{"line":13,"column":0},"end":{"line":13,"column":49}},"10":{"start":{"line":23,"column":0},"end":{"line":165,"column":2}},"11":{"start":{"line":24,"column":2},"end":{"line":24,"column":18}},"12":{"start":{"line":25,"column":2},"end":{"line":25,"column":9}},"13":{"start":{"line":27,"column":2},"end":{"line":30,"column":3}},"14":{"start":{"line":28,"column":4},"end":{"line":28,"column":18}},"15":{"start":{"line":29,"column":4},"end":{"line":29,"column":18}},"16":{"start":{"line":34,"column":2},"end":{"line":34,"column":48}},"17":{"start":{"line":37,"column":2},"end":{"line":37,"column":42}},"18":{"start":{"line":40,"column":2},"end":{"line":42,"column":3}},"19":{"start":{"line":41,"column":4},"end":{"line":41,"column":54}},"20":{"start":{"line":44,"column":2},"end":{"line":44,"column":80}},"21":{"start":{"line":45,"column":2},"end":{"line":45,"column":92}},"22":{"start":{"line":45,"column":32},"end":{"line":45,"column":92}},"23":{"start":{"line":49,"column":2},"end":{"line":51,"column":3}},"24":{"start":{"line":50,"column":4},"end":{"line":50,"column":24}},"25":{"start":{"line":53,"column":2},"end":{"line":164,"column":5}},"26":{"start":{"line":54,"column":4},"end":{"line":54,"column":28}},"27":{"start":{"line":54,"column":13},"end":{"line":54,"column":28}},"28":{"start":{"line":57,"column":4},"end":{"line":57,"column":53}},"29":{"start":{"line":60,"column":4},"end":{"line":163,"column":7}},"30":{"start":{"line":61,"column":6},"end":{"line":61,"column":30}},"31":{"start":{"line":61,"column":15},"end":{"line":61,"column":30}},"32":{"start":{"line":64,"column":6},"end":{"line":67,"column":9}},"33":{"start":{"line":69,"column":6},"end":{"line":69,"column":49}},"34":{"start":{"line":69,"column":34},"end":{"line":69,"column":49}},"35":{"start":{"line":72,"column":6},"end":{"line":85,"column":7}},"36":{"start":{"line":73,"column":8},"end":{"line":73,"column":73}},"37":{"start":{"line":73,"column":64},"end":{"line":73,"column":73}},"38":{"start":{"line":76,"column":8},"end":{"line":76,"column":55}},"39":{"start":{"line":76,"column":46},"end":{"line":76,"column":55}},"40":{"start":{"line":78,"column":8},"end":{"line":82,"column":9}},"41":{"start":{"line":79,"column":10},"end":{"line":79,"column":47}},"42":{"start":{"line":81,"column":10},"end":{"line":81,"column":19}},"43":{"start":{"line":84,"column":8},"end":{"line":84,"column":14}},"44":{"start":{"line":87,"column":6},"end":{"line":133,"column":7}},"45":{"start":{"line":88,"column":8},"end":{"line":88,"column":58}},"46":{"start":{"line":89,"column":8},"end":{"line":89,"column":24}},"47":{"start":{"line":91,"column":8},"end":{"line":95,"column":11}},"48":{"start":{"line":92,"column":10},"end":{"line":92,"column":49}},"49":{"start":{"line":93,"column":10},"end":{"line":93,"column":56}},"50":{"start":{"line":93,"column":49},"end":{"line":93,"column":56}},"51":{"start":{"line":94,"column":10},"end":{"line":94,"column":27}},"52":{"start":{"line":99,"column":8},"end":{"line":99,"column":42}},"53":{"start":{"line":99,"column":28},"end":{"line":99,"column":42}},"54":{"start":{"line":102,"column":8},"end":{"line":107,"column":15}},"55":{"start":{"line":103,"column":10},"end":{"line":105,"column":11}},"56":{"start":{"line":104,"column":12},"end":{"line":104,"column":32}},"57":{"start":{"line":106,"column":10},"end":{"line":106,"column":22}},"58":{"start":{"line":109,"column":8},"end":{"line":109,"column":26}},"59":{"start":{"line":111,"column":8},"end":{"line":131,"column":9}},"60":{"start":{"line":113,"column":10},"end":{"line":126,"column":11}},"61":{"start":{"line":114,"column":12},"end":{"line":114,"column":32}},"62":{"start":{"line":115,"column":12},"end":{"line":119,"column":15}},"63":{"start":{"line":116,"column":14},"end":{"line":116,"column":29}},"64":{"start":{"line":117,"column":14},"end":{"line":117,"column":47}},"65":{"start":{"line":118,"column":14},"end":{"line":118,"column":37}},"66":{"start":{"line":121,"column":12},"end":{"line":123,"column":14}},"67":{"start":{"line":125,"column":12},"end":{"line":125,"column":53}},"68":{"start":{"line":128,"column":10},"end":{"line":128,"column":50}},"69":{"start":{"line":130,"column":10},"end":{"line":130,"column":24}},"70":{"start":{"line":135,"column":6},"end":{"line":138,"column":9}},"71":{"start":{"line":136,"column":8},"end":{"line":136,"column":32}},"72":{"start":{"line":136,"column":17},"end":{"line":136,"column":32}},"73":{"start":{"line":137,"column":8},"end":{"line":137,"column":16}},"74":{"start":{"line":140,"column":6},"end":{"line":161,"column":7}},"75":{"start":{"line":143,"column":8},"end":{"line":145,"column":9}},"76":{"start":{"line":144,"column":10},"end":{"line":144,"column":22}},"77":{"start":{"line":148,"column":8},"end":{"line":150,"column":9}},"78":{"start":{"line":149,"column":10},"end":{"line":149,"column":28}},"79":{"start":{"line":153,"column":8},"end":{"line":155,"column":11}},"80":{"start":{"line":154,"column":10},"end":{"line":154,"column":54}},"81":{"start":{"line":157,"column":8},"end":{"line":160,"column":11}},"82":{"start":{"line":158,"column":10},"end":{"line":158,"column":34}},"83":{"start":{"line":158,"column":19},"end":{"line":158,"column":34}},"84":{"start":{"line":159,"column":10},"end":{"line":159,"column":38}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":2},"end":{"line":27,"column":2}},{"start":{"line":27,"column":2},"end":{"line":27,"column":2}}]},"2":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":2},"end":{"line":40,"column":2}},{"start":{"line":40,"column":2},"end":{"line":40,"column":2}}]},"3":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":2},"end":{"line":45,"column":2}},{"start":{"line":45,"column":2},"end":{"line":45,"column":2}}]},"4":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":2},"end":{"line":49,"column":2}},{"start":{"line":49,"column":2},"end":{"line":49,"column":2}}]},"5":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":4},"end":{"line":54,"column":4}},{"start":{"line":54,"column":4},"end":{"line":54,"column":4}}]},"6":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":6},"end":{"line":61,"column":6}},{"start":{"line":61,"column":6},"end":{"line":61,"column":6}}]},"7":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":6},"end":{"line":69,"column":6}},{"start":{"line":69,"column":6},"end":{"line":69,"column":6}}]},"8":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":8},"end":{"line":73,"column":8}},{"start":{"line":73,"column":8},"end":{"line":73,"column":8}}]},"9":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":8},"end":{"line":76,"column":8}},{"start":{"line":76,"column":8},"end":{"line":76,"column":8}}]},"10":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":8},"end":{"line":78,"column":8}},{"start":{"line":78,"column":8},"end":{"line":78,"column":8}}]},"11":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":10},"end":{"line":93,"column":10}},{"start":{"line":93,"column":10},"end":{"line":93,"column":10}}]},"12":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":8},"end":{"line":99,"column":8}},{"start":{"line":99,"column":8},"end":{"line":99,"column":8}}]},"13":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":10},"end":{"line":103,"column":10}},{"start":{"line":103,"column":10},"end":{"line":103,"column":10}}]},"14":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":8},"end":{"line":111,"column":8}},{"start":{"line":111,"column":8},"end":{"line":111,"column":8}}]},"15":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":10},"end":{"line":113,"column":10}},{"start":{"line":113,"column":10},"end":{"line":113,"column":10}}]},"16":{"line":136,"type":"if","locations":[{"start":{"line":136,"column":8},"end":{"line":136,"column":8}},{"start":{"line":136,"column":8},"end":{"line":136,"column":8}}]},"17":{"line":143,"type":"if","locations":[{"start":{"line":143,"column":8},"end":{"line":143,"column":8}},{"start":{"line":143,"column":8},"end":{"line":143,"column":8}}]},"18":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":8},"end":{"line":148,"column":8}},{"start":{"line":148,"column":8},"end":{"line":148,"column":8}}]},"19":{"line":158,"type":"if","locations":[{"start":{"line":158,"column":10},"end":{"line":158,"column":10}},{"start":{"line":158,"column":10},"end":{"line":158,"column":10}}]}},"code":["/**"," * Module Dependencies"," */","","var async = require('async');","var _ = require('lodash');","var usageError = require('../../utils/usageError');","var utils = require('../../utils/helpers');","var normalize = require('../../utils/normalize');","var Deferred = require('../deferred');","var getRelations = require('../../utils/getRelations');","var callbacks = require('../../utils/callbacksRunner');","var hasOwnProperty = utils.object.hasOwnProperty;","","/**"," * Destroy a Record"," *"," * @param {Object} criteria to destroy"," * @param {Function} callback"," * @return Deferred object if no callback"," */","","module.exports = function(criteria, cb) {","  var self = this;","  var pk;","","  if (typeof criteria === 'function') {","    cb = criteria;","    criteria = {};","  }","","  // Check if criteria is an integer or string and normalize criteria","  // to object, using the specified primary key field.","  criteria = normalize.expandPK(self, criteria);","","  // Normalize criteria","  criteria = normalize.criteria(criteria);","","  // Return Deferred or pass to adapter","  if (typeof cb !== 'function') {","    return new Deferred(this, this.destroy, criteria);","  }","","  var usage = utils.capitalize(this.identity) + '.destroy([options], callback)';","  if (typeof cb !== 'function') return usageError('Invalid callback specified!', usage, cb);","","  // If there was something defined in the criteria that would return no results, don't even","  // run the query and just return an empty result set.","  if (criteria === false) {","    return cb(null, []);","  }","","  callbacks.beforeDestroy(self, criteria, function(err) {","    if (err) return cb(err);","","    // Transform Search Criteria","    criteria = self._transformer.serialize(criteria);","","    // Pass to adapter","    self.adapter.destroy(criteria, function(err, result) {","      if (err) return cb(err);","","      // Look for any m:m associations and destroy the value in the join table","      var relations = getRelations({","        schema: self.waterline.schema,","        parentCollection: self.identity","      });","","      if (relations.length === 0) return after();","","      // Find the collection's primary key","      for (var key in self.attributes) {","        if (!self.attributes[key].hasOwnProperty('primaryKey')) continue;","","        // Check if custom primaryKey value is falsy","        if (!self.attributes[key].primaryKey) continue;","","        if (self.attributes[key].columnName) {","          pk = self.attributes[key].columnName;","        } else {","          pk = key;","        }","","        break;","      }","","      function destroyJoinTableRecords(item, next) {","        var collection = self.waterline.collections[item];","        var refKey = [];","","        Object.keys(collection._attributes).forEach(function(key) {","          var attr = collection._attributes[key];","          if (attr.references !== self.identity) return;","          refKey.push(key);","        });","","        // If no refKey return, this could leave orphaned join table values but it's better","        // than crashing.","        if (!refKey.length) return next();","","        // Make sure we don't return any undefined pks","        var mappedValues = result.reduce(function(memo, vals) {","          if (vals[pk] !== undefined) {","            memo.push(vals[pk]);","          }","          return memo;","        }, []);","","        var criteria = {};","","        if (mappedValues.length > 0) {","          // Handle reflexive associations by building up an OR clause.","          if (refKey.length > 1) {","            var orCriteria = [];","            _.each(refKey, function(columnName) {","              var where = {};","              where[columnName] = mappedValues;","              orCriteria.push(where);","            });","","            criteria = {","              or: orCriteria","            };","          } else {","            criteria[_.first(refKey)] = mappedValues;","          }","","          collection.destroy(criteria).exec(next);","        } else {","          return next();","        }","","      }","","      async.each(relations, destroyJoinTableRecords, function(err) {","        if (err) return cb(err);","        after();","      });","","      function after() {","","        // If no result was returned, default to empty array","        if (!result) {","          result = [];","        }","","        // If values is not an array, return an array","        if (!Array.isArray(result)) {","          result = [result];","        }","","        // Unserialize each value","        var transformedValues = result.map(function(value) {","          return self._transformer.unserialize(value);","        });","","        callbacks.afterDestroy(self, transformedValues, function(err) {","          if (err) return cb(err);","          cb(null, transformedValues);","        });","      }","","    });","  });","};",""],"l":{"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"23":1,"24":0,"25":0,"27":0,"28":0,"29":0,"34":0,"37":0,"40":0,"41":0,"44":0,"45":0,"49":0,"50":0,"53":0,"54":0,"57":0,"60":0,"61":0,"64":0,"69":0,"72":0,"73":0,"76":0,"78":0,"79":0,"81":0,"84":0,"87":1,"88":0,"89":0,"91":0,"92":0,"93":0,"94":0,"99":0,"102":0,"103":0,"104":0,"106":0,"109":0,"111":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"121":0,"125":0,"128":0,"130":0,"135":0,"136":0,"137":0,"140":1,"143":0,"144":0,"148":0,"149":0,"153":0,"154":0,"157":0,"158":0,"159":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/dql/count.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/dql/count.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":20,"loc":{"start":{"line":20,"column":17},"end":{"line":20,"column":49}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":51}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":43}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":49}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":38}},"6":{"start":{"line":20,"column":0},"end":{"line":70,"column":2}},"7":{"start":{"line":21,"column":2},"end":{"line":21,"column":88}},"8":{"start":{"line":23,"column":2},"end":{"line":27,"column":3}},"9":{"start":{"line":24,"column":4},"end":{"line":24,"column":18}},"10":{"start":{"line":25,"column":4},"end":{"line":25,"column":20}},"11":{"start":{"line":26,"column":4},"end":{"line":26,"column":19}},"12":{"start":{"line":29,"column":2},"end":{"line":32,"column":3}},"13":{"start":{"line":30,"column":4},"end":{"line":30,"column":17}},"14":{"start":{"line":31,"column":4},"end":{"line":31,"column":19}},"15":{"start":{"line":35,"column":2},"end":{"line":37,"column":3}},"16":{"start":{"line":36,"column":4},"end":{"line":36,"column":52}},"17":{"start":{"line":40,"column":2},"end":{"line":40,"column":42}},"18":{"start":{"line":44,"column":2},"end":{"line":46,"column":3}},"19":{"start":{"line":45,"column":4},"end":{"line":45,"column":23}},"20":{"start":{"line":48,"column":2},"end":{"line":50,"column":3}},"21":{"start":{"line":49,"column":4},"end":{"line":49,"column":47}},"22":{"start":{"line":52,"column":2},"end":{"line":54,"column":3}},"23":{"start":{"line":53,"column":4},"end":{"line":53,"column":63}},"24":{"start":{"line":57,"column":2},"end":{"line":57,"column":51}},"25":{"start":{"line":61,"column":2},"end":{"line":63,"column":3}},"26":{"start":{"line":62,"column":4},"end":{"line":62,"column":26}},"27":{"start":{"line":65,"column":2},"end":{"line":67,"column":3}},"28":{"start":{"line":66,"column":4},"end":{"line":66,"column":32}},"29":{"start":{"line":69,"column":2},"end":{"line":69,"column":35}}},"branchMap":{"1":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":2},"end":{"line":23,"column":2}},{"start":{"line":23,"column":2},"end":{"line":23,"column":2}}]},"2":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":2},"end":{"line":29,"column":2}},{"start":{"line":29,"column":2},"end":{"line":29,"column":2}}]},"3":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":2},"end":{"line":35,"column":2}},{"start":{"line":35,"column":2},"end":{"line":35,"column":2}}]},"4":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":2},"end":{"line":44,"column":2}},{"start":{"line":44,"column":2},"end":{"line":44,"column":2}}]},"5":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":2},"end":{"line":48,"column":2}},{"start":{"line":48,"column":2},"end":{"line":48,"column":2}}]},"6":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":6},"end":{"line":48,"column":25}},{"start":{"line":48,"column":29},"end":{"line":48,"column":49}}]},"7":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":2},"end":{"line":52,"column":2}},{"start":{"line":52,"column":2},"end":{"line":52,"column":2}}]},"8":{"line":52,"type":"binary-expr","locations":[{"start":{"line":52,"column":6},"end":{"line":52,"column":28}},{"start":{"line":52,"column":32},"end":{"line":52,"column":53}}]},"9":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":2},"end":{"line":61,"column":2}},{"start":{"line":61,"column":2},"end":{"line":61,"column":2}}]},"10":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":2},"end":{"line":65,"column":2}},{"start":{"line":65,"column":2},"end":{"line":65,"column":2}}]},"11":{"line":65,"type":"binary-expr","locations":[{"start":{"line":65,"column":6},"end":{"line":65,"column":20}},{"start":{"line":65,"column":24},"end":{"line":65,"column":55}}]}},"code":["/**"," * Module Dependencies"," */","","var _ = require('lodash');","var usageError = require('../../utils/usageError');","var utils = require('../../utils/helpers');","var normalize = require('../../utils/normalize');","var Deferred = require('../deferred');","","/**"," * Count of Records"," *"," * @param {Object} criteria"," * @param {Object} options"," * @param {Function} callback"," * @return Deferred object if no callback"," */","","module.exports = function(criteria, options, cb) {","  var usage = utils.capitalize(this.identity) + '.count([criteria],[options],callback)';","","  if (typeof criteria === 'function') {","    cb = criteria;","    criteria = null;","    options = null;","  }","","  if (typeof options === 'function') {","    cb = options;","    options = null;","  }","","  // Return Deferred or pass to adapter","  if (typeof cb !== 'function') {","    return new Deferred(this, this.count, criteria);","  }","","  // Normalize criteria and fold in options","  criteria = normalize.criteria(criteria);","","  // If there was something defined in the criteria that would return no results, don't even","  // run the query and just return 0","  if (criteria === false) {","    return cb(null, 0);","  }","","  if (_.isObject(options) && _.isObject(criteria)) {","    criteria = _.extend({}, criteria, options);","  }","","  if (_.isFunction(criteria) || _.isFunction(options)) {","    return usageError('Invalid options specified!', usage, cb);","  }","","  // Transform Search Criteria","  criteria = this._transformer.serialize(criteria);","","  // Remove any joins from the count criteria. They won't have any effect on the","  // number of results found.","  if (_.isArray(criteria.joins)) {","    delete criteria.joins;","  }","","  if (criteria.where && _.isArray(criteria.where.joins)) {","    delete criteria.where.joins;","  }","","  this.adapter.count(criteria, cb);","};",""],"l":{"5":1,"6":1,"7":1,"8":1,"9":1,"20":1,"21":0,"23":0,"24":0,"25":0,"26":0,"29":0,"30":0,"31":0,"35":0,"36":0,"40":0,"44":0,"45":0,"48":0,"49":0,"52":0,"53":0,"57":0,"61":0,"62":0,"65":0,"66":0,"69":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/dql/join.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/dql/join.js","s":{"1":1,"2":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":17},"end":{"line":8,"column":50}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":10,"column":2}},"2":{"start":{"line":9,"column":2},"end":{"line":9,"column":45}}},"branchMap":{},"code":["/**"," * Join"," *"," * Join with another collection"," * (use optimized join in adapter if one was provided)"," */","","module.exports = function(collection, fk, pk, cb) {","  this._adapter.join(collection, fk, pk, cb);","};",""],"l":{"8":1,"9":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/aggregate.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/aggregate.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":1,"84":0,"85":0,"86":0,"87":0,"88":0,"89":1,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"fnMap":{"1":{"name":"(anonymous_1)","line":24,"loc":{"start":{"line":24,"column":14},"end":{"line":24,"column":39}}},"2":{"name":"(anonymous_2)","line":50,"loc":{"start":{"line":50,"column":46},"end":{"line":50,"column":62}}},"3":{"name":"(anonymous_3)","line":68,"loc":{"start":{"line":68,"column":20},"end":{"line":68,"column":55}}},"4":{"name":"(anonymous_4)","line":98,"loc":{"start":{"line":98,"column":23},"end":{"line":98,"column":44}}},"5":{"name":"(anonymous_5)","line":103,"loc":{"start":{"line":103,"column":41},"end":{"line":103,"column":55}}},"6":{"name":"(anonymous_6)","line":109,"loc":{"start":{"line":109,"column":25},"end":{"line":109,"column":41}}},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":23},"end":{"line":125,"column":39}}},"8":{"name":"(anonymous_8)","line":134,"loc":{"start":{"line":134,"column":58},"end":{"line":134,"column":80}}},"9":{"name":"(anonymous_9)","line":140,"loc":{"start":{"line":140,"column":23},"end":{"line":140,"column":39}}},"10":{"name":"(anonymous_10)","line":149,"loc":{"start":{"line":149,"column":27},"end":{"line":149,"column":48}}},"11":{"name":"(anonymous_11)","line":151,"loc":{"start":{"line":151,"column":11},"end":{"line":151,"column":25}}},"12":{"name":"(anonymous_12)","line":157,"loc":{"start":{"line":157,"column":25},"end":{"line":157,"column":41}}},"13":{"name":"_validateValues","line":177,"loc":{"start":{"line":177,"column":0},"end":{"line":177,"column":37}}},"14":{"name":"_validate","line":198,"loc":{"start":{"line":198,"column":0},"end":{"line":198,"column":31}}},"15":{"name":"(anonymous_15)","line":215,"loc":{"start":{"line":215,"column":4},"end":{"line":215,"column":19}}},"16":{"name":"(anonymous_16)","line":220,"loc":{"start":{"line":220,"column":4},"end":{"line":220,"column":19}}},"17":{"name":"(anonymous_17)","line":224,"loc":{"start":{"line":224,"column":5},"end":{"line":224,"column":19}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":29}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":26}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":48}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":40}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":46}},"6":{"start":{"line":10,"column":0},"end":{"line":10,"column":52}},"7":{"start":{"line":11,"column":0},"end":{"line":11,"column":37}},"8":{"start":{"line":12,"column":0},"end":{"line":12,"column":49}},"9":{"start":{"line":14,"column":0},"end":{"line":166,"column":2}},"10":{"start":{"line":25,"column":4},"end":{"line":25,"column":20}},"11":{"start":{"line":28,"column":4},"end":{"line":32,"column":5}},"12":{"start":{"line":29,"column":6},"end":{"line":29,"column":55}},"13":{"start":{"line":30,"column":6},"end":{"line":30,"column":22}},"14":{"start":{"line":31,"column":6},"end":{"line":31,"column":30}},"15":{"start":{"line":35,"column":4},"end":{"line":37,"column":5}},"16":{"start":{"line":36,"column":6},"end":{"line":36,"column":65}},"17":{"start":{"line":40,"column":4},"end":{"line":40,"column":86}},"18":{"start":{"line":42,"column":4},"end":{"line":42,"column":78}},"19":{"start":{"line":42,"column":21},"end":{"line":42,"column":78}},"20":{"start":{"line":43,"column":4},"end":{"line":43,"column":119}},"21":{"start":{"line":43,"column":36},"end":{"line":43,"column":119}},"22":{"start":{"line":44,"column":4},"end":{"line":44,"column":94}},"23":{"start":{"line":44,"column":34},"end":{"line":44,"column":94}},"24":{"start":{"line":46,"column":4},"end":{"line":46,"column":58}},"25":{"start":{"line":47,"column":4},"end":{"line":47,"column":53}},"26":{"start":{"line":47,"column":16},"end":{"line":47,"column":53}},"27":{"start":{"line":50,"column":4},"end":{"line":52,"column":7}},"28":{"start":{"line":51,"column":6},"end":{"line":51,"column":33}},"29":{"start":{"line":55,"column":4},"end":{"line":55,"column":58}},"30":{"start":{"line":69,"column":4},"end":{"line":69,"column":20}},"31":{"start":{"line":71,"column":4},"end":{"line":74,"column":5}},"32":{"start":{"line":72,"column":6},"end":{"line":72,"column":22}},"33":{"start":{"line":73,"column":6},"end":{"line":73,"column":24}},"34":{"start":{"line":77,"column":4},"end":{"line":77,"column":44}},"35":{"start":{"line":80,"column":4},"end":{"line":82,"column":5}},"36":{"start":{"line":81,"column":6},"end":{"line":81,"column":77}},"37":{"start":{"line":85,"column":4},"end":{"line":85,"column":102}},"38":{"start":{"line":87,"column":4},"end":{"line":87,"column":94}},"39":{"start":{"line":87,"column":34},"end":{"line":87,"column":94}},"40":{"start":{"line":88,"column":4},"end":{"line":88,"column":74}},"41":{"start":{"line":88,"column":19},"end":{"line":88,"column":74}},"42":{"start":{"line":89,"column":4},"end":{"line":89,"column":89}},"43":{"start":{"line":89,"column":34},"end":{"line":89,"column":89}},"44":{"start":{"line":90,"column":4},"end":{"line":90,"column":78}},"45":{"start":{"line":90,"column":21},"end":{"line":90,"column":78}},"46":{"start":{"line":91,"column":4},"end":{"line":91,"column":119}},"47":{"start":{"line":91,"column":36},"end":{"line":91,"column":119}},"48":{"start":{"line":93,"column":4},"end":{"line":93,"column":45}},"49":{"start":{"line":94,"column":4},"end":{"line":94,"column":53}},"50":{"start":{"line":94,"column":16},"end":{"line":94,"column":53}},"51":{"start":{"line":98,"column":4},"end":{"line":100,"column":6}},"52":{"start":{"line":99,"column":6},"end":{"line":99,"column":39}},"53":{"start":{"line":103,"column":4},"end":{"line":164,"column":7}},"54":{"start":{"line":104,"column":6},"end":{"line":104,"column":30}},"55":{"start":{"line":104,"column":15},"end":{"line":104,"column":30}},"56":{"start":{"line":107,"column":6},"end":{"line":107,"column":33}},"57":{"start":{"line":109,"column":6},"end":{"line":117,"column":9}},"58":{"start":{"line":112,"column":8},"end":{"line":112,"column":51}},"59":{"start":{"line":115,"column":8},"end":{"line":115,"column":48}},"60":{"start":{"line":116,"column":8},"end":{"line":116,"column":38}},"61":{"start":{"line":120,"column":6},"end":{"line":120,"column":37}},"62":{"start":{"line":123,"column":6},"end":{"line":123,"column":35}},"63":{"start":{"line":125,"column":6},"end":{"line":128,"column":9}},"64":{"start":{"line":126,"column":8},"end":{"line":126,"column":51}},"65":{"start":{"line":127,"column":8},"end":{"line":127,"column":40}},"66":{"start":{"line":131,"column":6},"end":{"line":131,"column":37}},"67":{"start":{"line":134,"column":6},"end":{"line":163,"column":9}},"68":{"start":{"line":135,"column":8},"end":{"line":135,"column":32}},"69":{"start":{"line":135,"column":17},"end":{"line":135,"column":32}},"70":{"start":{"line":138,"column":8},"end":{"line":138,"column":36}},"71":{"start":{"line":140,"column":8},"end":{"line":143,"column":11}},"72":{"start":{"line":141,"column":10},"end":{"line":141,"column":55}},"73":{"start":{"line":142,"column":10},"end":{"line":142,"column":41}},"74":{"start":{"line":146,"column":8},"end":{"line":146,"column":36}},"75":{"start":{"line":149,"column":8},"end":{"line":162,"column":11}},"76":{"start":{"line":150,"column":10},"end":{"line":150,"column":50}},"77":{"start":{"line":152,"column":10},"end":{"line":152,"column":34}},"78":{"start":{"line":152,"column":19},"end":{"line":152,"column":34}},"79":{"start":{"line":154,"column":10},"end":{"line":154,"column":26}},"80":{"start":{"line":157,"column":10},"end":{"line":159,"column":13}},"81":{"start":{"line":158,"column":12},"end":{"line":158,"column":48}},"82":{"start":{"line":161,"column":10},"end":{"line":161,"column":27}},"83":{"start":{"line":177,"column":0},"end":{"line":187,"column":1}},"84":{"start":{"line":178,"column":2},"end":{"line":178,"column":10}},"85":{"start":{"line":180,"column":2},"end":{"line":184,"column":3}},"86":{"start":{"line":181,"column":4},"end":{"line":183,"column":5}},"87":{"start":{"line":182,"column":6},"end":{"line":182,"column":89}},"88":{"start":{"line":186,"column":2},"end":{"line":186,"column":13}},"89":{"start":{"line":198,"column":0},"end":{"line":238,"column":1}},"90":{"start":{"line":199,"column":2},"end":{"line":199,"column":18}},"91":{"start":{"line":202,"column":2},"end":{"line":207,"column":3}},"92":{"start":{"line":203,"column":4},"end":{"line":206,"column":5}},"93":{"start":{"line":204,"column":6},"end":{"line":204,"column":55}},"94":{"start":{"line":205,"column":6},"end":{"line":205,"column":101}},"95":{"start":{"line":210,"column":2},"end":{"line":210,"column":34}},"96":{"start":{"line":212,"column":2},"end":{"line":237,"column":5}},"97":{"start":{"line":216,"column":6},"end":{"line":216,"column":51}},"98":{"start":{"line":221,"column":6},"end":{"line":221,"column":49}},"99":{"start":{"line":225,"column":4},"end":{"line":225,"column":28}},"100":{"start":{"line":225,"column":13},"end":{"line":225,"column":28}},"101":{"start":{"line":228,"column":4},"end":{"line":230,"column":5}},"102":{"start":{"line":229,"column":6},"end":{"line":229,"column":46}},"103":{"start":{"line":232,"column":4},"end":{"line":234,"column":5}},"104":{"start":{"line":233,"column":6},"end":{"line":233,"column":46}},"105":{"start":{"line":236,"column":4},"end":{"line":236,"column":9}}},"branchMap":{"1":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":4},"end":{"line":28,"column":4}},{"start":{"line":28,"column":4},"end":{"line":28,"column":4}}]},"2":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":4},"end":{"line":35,"column":4}},{"start":{"line":35,"column":4},"end":{"line":35,"column":4}}]},"3":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":4},"end":{"line":42,"column":4}},{"start":{"line":42,"column":4},"end":{"line":42,"column":4}}]},"4":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":4},"end":{"line":43,"column":4}},{"start":{"line":43,"column":4},"end":{"line":43,"column":4}}]},"5":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]},"6":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":4},"end":{"line":47,"column":4}},{"start":{"line":47,"column":4},"end":{"line":47,"column":4}}]},"7":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":4},"end":{"line":71,"column":4}},{"start":{"line":71,"column":4},"end":{"line":71,"column":4}}]},"8":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":4},"end":{"line":80,"column":4}},{"start":{"line":80,"column":4},"end":{"line":80,"column":4}}]},"9":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":4},"end":{"line":87,"column":4}},{"start":{"line":87,"column":4},"end":{"line":87,"column":4}}]},"10":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":4},"end":{"line":88,"column":4}},{"start":{"line":88,"column":4},"end":{"line":88,"column":4}}]},"11":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":4},"end":{"line":89,"column":4}},{"start":{"line":89,"column":4},"end":{"line":89,"column":4}}]},"12":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":4},"end":{"line":90,"column":4}},{"start":{"line":90,"column":4},"end":{"line":90,"column":4}}]},"13":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":4},"end":{"line":91,"column":4}},{"start":{"line":91,"column":4},"end":{"line":91,"column":4}}]},"14":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":4},"end":{"line":94,"column":4}},{"start":{"line":94,"column":4},"end":{"line":94,"column":4}}]},"15":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":6},"end":{"line":104,"column":6}},{"start":{"line":104,"column":6},"end":{"line":104,"column":6}}]},"16":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":8},"end":{"line":135,"column":8}},{"start":{"line":135,"column":8},"end":{"line":135,"column":8}}]},"17":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":10},"end":{"line":152,"column":10}},{"start":{"line":152,"column":10},"end":{"line":152,"column":10}}]},"18":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":4},"end":{"line":181,"column":4}},{"start":{"line":181,"column":4},"end":{"line":181,"column":4}}]},"19":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":4},"end":{"line":203,"column":4}},{"start":{"line":203,"column":4},"end":{"line":203,"column":4}}]},"20":{"line":203,"type":"binary-expr","locations":[{"start":{"line":203,"column":8},"end":{"line":203,"column":20}},{"start":{"line":203,"column":24},"end":{"line":203,"column":45}},{"start":{"line":203,"column":49},"end":{"line":203,"column":99}}]},"21":{"line":205,"type":"cond-expr","locations":[{"start":{"line":205,"column":55},"end":{"line":205,"column":78}},{"start":{"line":205,"column":81},"end":{"line":205,"column":100}}]},"22":{"line":225,"type":"if","locations":[{"start":{"line":225,"column":4},"end":{"line":225,"column":4}},{"start":{"line":225,"column":4},"end":{"line":225,"column":4}}]},"23":{"line":228,"type":"if","locations":[{"start":{"line":228,"column":4},"end":{"line":228,"column":4}},{"start":{"line":228,"column":4},"end":{"line":228,"column":4}}]},"24":{"line":232,"type":"if","locations":[{"start":{"line":232,"column":4},"end":{"line":232,"column":4}},{"start":{"line":232,"column":4},"end":{"line":232,"column":4}}]}},"code":["/**"," * Aggregate Queries"," */","","var async = require('async');","var _ = require('lodash');","var usageError = require('../utils/usageError');","var utils = require('../utils/helpers');","var normalize = require('../utils/normalize');","var callbacks = require('../utils/callbacksRunner');","var Deferred = require('./deferred');","var hasOwnProperty = utils.object.hasOwnProperty;","","module.exports = {","","  /**","   * Create an Array of records","   *","   * @param {Array} array of values to create","   * @param {Function} callback","   * @return Deferred object if no callback","   */","","  createEach: function(valuesList, cb) {","    var self = this;","","    // Handle Deferred where it passes criteria first","    if (arguments.length === 3) {","      var args = Array.prototype.slice.call(arguments);","      cb = args.pop();","      valuesList = args.pop();","    }","","    // Return Deferred or pass to adapter","    if (typeof cb !== 'function') {","      return new Deferred(this, this.createEach, {}, valuesList);","    }","","    // Validate Params","    var usage = utils.capitalize(this.identity) + '.createEach(valuesList, callback)';","","    if (!valuesList) return usageError('No valuesList specified!', usage, cb);","    if (!Array.isArray(valuesList)) return usageError('Invalid valuesList specified (should be an array!)', usage, cb);","    if (typeof cb !== 'function') return usageError('Invalid callback specified!', usage, cb);","","    var errStr = _validateValues(_.cloneDeep(valuesList));","    if (errStr) return usageError(errStr, usage, cb);","","    // Handle undefined values","    var filteredValues = _.filter(valuesList, function(value) {","      return value !== undefined;","    });","","    // Create will take care of cloning values so original isn't mutated","    async.map(filteredValues, self.create.bind(self), cb);","  },","","  /**","   * Iterate through a list of objects, trying to find each one","   * For any that don't exist, create them","   *","   * @param {Object} criteria","   * @param {Array} valuesList","   * @param {Function} callback","   * @return Deferred object if no callback","   */","","  findOrCreateEach: function(criteria, valuesList, cb) {","    var self = this;","","    if (typeof valuesList === 'function') {","      cb = valuesList;","      valuesList = null;","    }","","    // Normalize criteria","    criteria = normalize.criteria(criteria);","","    // Return Deferred or pass to adapter","    if (typeof cb !== 'function') {","      return new Deferred(this, this.findOrCreateEach, criteria, valuesList);","    }","","    // Validate Params","    var usage = utils.capitalize(this.identity) + '.findOrCreateEach(criteria, valuesList, callback)';","","    if (typeof cb !== 'function') return usageError('Invalid callback specified!', usage, cb);","    if (!criteria) return usageError('No criteria specified!', usage, cb);","    if (!Array.isArray(criteria)) return usageError('No criteria specified!', usage, cb);","    if (!valuesList) return usageError('No valuesList specified!', usage, cb);","    if (!Array.isArray(valuesList)) return usageError('Invalid valuesList specified (should be an array!)', usage, cb);","","    var errStr = _validateValues(valuesList);","    if (errStr) return usageError(errStr, usage, cb);","","    // Validate each record in the array and if all are valid","    // pass the array to the adapter's findOrCreateEach method","    var validateItem = function(item, next) {","      _validate.call(self, item, next);","    };","","","    async.each(valuesList, validateItem, function(err) {","      if (err) return cb(err);","","      // Transform Values","      var transformedValues = [];","","      valuesList.forEach(function(value) {","","        // Transform values","        value = self._transformer.serialize(value);","","        // Clean attributes","        value = self._schema.cleanValues(value);","        transformedValues.push(value);","      });","","      // Set values array to the transformed array","      valuesList = transformedValues;","","      // Transform Search Criteria","      var transformedCriteria = [];","","      criteria.forEach(function(value) {","        value = self._transformer.serialize(value);","        transformedCriteria.push(value);","      });","","      // Set criteria array to the transformed array","      criteria = transformedCriteria;","","      // Pass criteria and attributes to adapter definition","      self.adapter.findOrCreateEach(criteria, valuesList, function(err, values) {","        if (err) return cb(err);","","        // Unserialize Values","        var unserializedValues = [];","","        values.forEach(function(value) {","          value = self._transformer.unserialize(value);","          unserializedValues.push(value);","        });","","        // Set values array to the transformed array","        values = unserializedValues;","","        // Run AfterCreate Callbacks","        async.each(values, function(item, next) {","          callbacks.afterCreate(self, item, next);","        }, function(err) {","          if (err) return cb(err);","","          var models = [];","","          // Make each result an instance of model","          values.forEach(function(value) {","            models.push(new self._model(value));","          });","","          cb(null, models);","        });","      });","    });","  }","};","","","/**"," * Validate valuesList"," *"," * @param {Array} valuesList"," * @return {String}"," * @api private"," */","","function _validateValues(valuesList) {","  var err;","","  for (var i = 0; i < valuesList.length; i++) {","    if (valuesList[i] !== Object(valuesList[i])) {","      err = 'Invalid valuesList specified (should be an array of valid values objects!)';","    }","  }","","  return err;","}","","","/**"," * Validate values and add in default values"," *"," * @param {Object} record"," * @param {Function} cb"," * @api private"," */","","function _validate(record, cb) {","  var self = this;","","  // Set Default Values if available","  for (var key in self.attributes) {","    if (!record[key] && record[key] !== false && hasOwnProperty(self.attributes[key], 'defaultsTo')) {","      var defaultsTo = self.attributes[key].defaultsTo;","      record[key] = typeof defaultsTo === 'function' ? defaultsTo.call(record) : _.clone(defaultsTo);","    }","  }","","  // Cast values to proper types (handle numbers as strings)","  record = self._cast.run(record);","","  async.series([","","    // Run Validation with Validation LifeCycle Callbacks","    function(next) {","      callbacks.validate(self, record, true, next);","    },","","    // Before Create Lifecycle Callback","    function(next) {","      callbacks.beforeCreate(self, record, next);","    }","","  ], function(err) {","    if (err) return cb(err);","","    // Automatically add updatedAt and createdAt (if enabled)","    if (self.autoCreatedAt) {","      record[self.autoCreatedAt] = new Date();","    }","","    if (self.autoUpdatedAt) {","      record[self.autoUpdatedAt] = new Date();","    }","","    cb();","  });","}",""],"l":{"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"14":1,"25":0,"28":0,"29":0,"30":0,"31":0,"35":0,"36":0,"40":0,"42":0,"43":0,"44":0,"46":0,"47":0,"50":0,"51":0,"55":0,"69":0,"71":0,"72":0,"73":0,"77":0,"80":0,"81":0,"85":0,"87":0,"88":0,"89":0,"90":0,"91":0,"93":0,"94":0,"98":0,"99":0,"103":0,"104":0,"107":0,"109":0,"112":0,"115":0,"116":0,"120":0,"123":0,"125":0,"126":0,"127":0,"131":0,"134":0,"135":0,"138":0,"140":0,"141":0,"142":0,"146":0,"149":0,"150":0,"152":0,"154":0,"157":0,"158":0,"161":0,"177":1,"178":0,"180":0,"181":0,"182":0,"186":0,"198":1,"199":0,"202":0,"203":0,"204":0,"205":0,"210":0,"212":0,"216":0,"221":0,"225":0,"228":0,"229":0,"232":0,"233":0,"236":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/composite.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/composite.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":24,"loc":{"start":{"line":24,"column":16},"end":{"line":24,"column":47}}},"2":{"name":"(anonymous_2)","line":56,"loc":{"start":{"line":56,"column":29},"end":{"line":56,"column":52}}},"3":{"name":"(anonymous_3)","line":70,"loc":{"start":{"line":70,"column":31},"end":{"line":70,"column":53}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":29}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":26}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":48}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":40}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":46}},"6":{"start":{"line":10,"column":0},"end":{"line":10,"column":37}},"7":{"start":{"line":11,"column":0},"end":{"line":11,"column":49}},"8":{"start":{"line":13,"column":0},"end":{"line":77,"column":2}},"9":{"start":{"line":25,"column":4},"end":{"line":25,"column":20}},"10":{"start":{"line":27,"column":4},"end":{"line":30,"column":5}},"11":{"start":{"line":28,"column":6},"end":{"line":28,"column":18}},"12":{"start":{"line":29,"column":6},"end":{"line":29,"column":20}},"13":{"start":{"line":33,"column":4},"end":{"line":33,"column":96}},"14":{"start":{"line":34,"column":4},"end":{"line":36,"column":5}},"15":{"start":{"line":35,"column":6},"end":{"line":35,"column":68}},"16":{"start":{"line":39,"column":4},"end":{"line":39,"column":44}},"17":{"start":{"line":41,"column":4},"end":{"line":41,"column":69}},"18":{"start":{"line":41,"column":17},"end":{"line":41,"column":69}},"19":{"start":{"line":44,"column":4},"end":{"line":46,"column":5}},"20":{"start":{"line":45,"column":6},"end":{"line":45,"column":69}},"21":{"start":{"line":49,"column":4},"end":{"line":51,"column":5}},"22":{"start":{"line":50,"column":6},"end":{"line":50,"column":57}},"23":{"start":{"line":53,"column":4},"end":{"line":53,"column":94}},"24":{"start":{"line":53,"column":34},"end":{"line":53,"column":94}},"25":{"start":{"line":56,"column":4},"end":{"line":74,"column":7}},"26":{"start":{"line":57,"column":6},"end":{"line":57,"column":30}},"27":{"start":{"line":57,"column":15},"end":{"line":57,"column":30}},"28":{"start":{"line":59,"column":6},"end":{"line":67,"column":7}},"29":{"start":{"line":62,"column":8},"end":{"line":62,"column":60}},"30":{"start":{"line":65,"column":8},"end":{"line":65,"column":45}},"31":{"start":{"line":66,"column":8},"end":{"line":66,"column":31}},"32":{"start":{"line":70,"column":6},"end":{"line":73,"column":9}},"33":{"start":{"line":71,"column":8},"end":{"line":71,"column":32}},"34":{"start":{"line":71,"column":17},"end":{"line":71,"column":32}},"35":{"start":{"line":72,"column":8},"end":{"line":72,"column":32}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]},"2":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":4},"end":{"line":34,"column":4}},{"start":{"line":34,"column":4},"end":{"line":34,"column":4}}]},"3":{"line":34,"type":"binary-expr","locations":[{"start":{"line":34,"column":8},"end":{"line":34,"column":31}},{"start":{"line":34,"column":36},"end":{"line":34,"column":45}},{"start":{"line":34,"column":49},"end":{"line":34,"column":70}}]},"4":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":4},"end":{"line":41,"column":4}},{"start":{"line":41,"column":4},"end":{"line":41,"column":4}}]},"5":{"line":41,"type":"cond-expr","locations":[{"start":{"line":41,"column":43},"end":{"line":41,"column":57}},{"start":{"line":41,"column":60},"end":{"line":41,"column":68}}]},"6":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]},"7":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":4},"end":{"line":49,"column":4}},{"start":{"line":49,"column":4},"end":{"line":49,"column":4}}]},"8":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":8},"end":{"line":49,"column":31}},{"start":{"line":49,"column":35},"end":{"line":49,"column":56}}]},"9":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":4},"end":{"line":53,"column":4}},{"start":{"line":53,"column":4},"end":{"line":53,"column":4}}]},"10":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":6},"end":{"line":57,"column":6}},{"start":{"line":57,"column":6},"end":{"line":57,"column":6}}]},"11":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":6},"end":{"line":59,"column":6}},{"start":{"line":59,"column":6},"end":{"line":59,"column":6}}]},"12":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":10},"end":{"line":59,"column":17}},{"start":{"line":59,"column":21},"end":{"line":59,"column":41}}]},"13":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":8},"end":{"line":71,"column":8}},{"start":{"line":71,"column":8},"end":{"line":71,"column":8}}]}},"code":["/**"," * Composite Queries"," */","","var async = require('async');","var _ = require('lodash');","var usageError = require('../utils/usageError');","var utils = require('../utils/helpers');","var normalize = require('../utils/normalize');","var Deferred = require('./deferred');","var hasOwnProperty = utils.object.hasOwnProperty;","","module.exports = {","","  /**","   * Find or Create a New Record","   *","   * @param {Object} search criteria","   * @param {Object} values to create if no record found","   * @param {Function} callback","   * @return Deferred object if no callback","   */","","  findOrCreate: function(criteria, values, cb) {","    var self = this;","","    if (typeof values === 'function') {","      cb = values;","      values = null;","    }","","    // If no criteria is specified, bail out with a vengeance.","    var usage = utils.capitalize(this.identity) + '.findOrCreate([criteria], values, callback)';","    if (typeof cb == 'function' && (!criteria || criteria.length === 0)) {","      return usageError('No criteria option specified!', usage, cb);","    }","","    // Normalize criteria","    criteria = normalize.criteria(criteria);","    // If no values were specified, use criteria","    if (!values) values = criteria.where ? criteria.where : criteria;","","    // Return Deferred or pass to adapter","    if (typeof cb !== 'function') {","      return new Deferred(this, this.findOrCreate, criteria, values);","    }","","    // This is actually an implicit call to findOrCreateEach","    if (Array.isArray(criteria) && Array.isArray(values)) {","      return this.findOrCreateEach(criteria, values, cb);","    }","","    if (typeof cb !== 'function') return usageError('Invalid callback specified!', usage, cb);","","    // Try a find first.","    this.find(criteria).exec(function(err, results) {","      if (err) return cb(err);","","      if (results && results.length !== 0) {","","        // Unserialize values","        results = self._transformer.unserialize(results[0]);","","        // Return an instance of Model","        var model = new self._model(results);","        return cb(null, model);","      }","","      // Create a new record if nothing is found.","      self.create(values).exec(function(err, result) {","        if (err) return cb(err);","        return cb(null, result);","      });","    });","  }","","};",""],"l":{"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"13":1,"25":0,"27":0,"28":0,"29":0,"33":0,"34":0,"35":0,"39":0,"41":0,"44":0,"45":0,"49":0,"50":0,"53":0,"56":0,"57":0,"59":0,"62":0,"65":0,"66":0,"70":0,"71":0,"72":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/finders/basic.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/finders/basic.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":1,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":1,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0,0],"70":[0,0],"71":[0,0],"72":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0},"fnMap":{"1":{"name":"(anonymous_1)","line":28,"loc":{"start":{"line":28,"column":11},"end":{"line":28,"column":34}}},"2":{"name":"(anonymous_2)","line":37,"loc":{"start":{"line":37,"column":51},"end":{"line":37,"column":66}}},"3":{"name":"(anonymous_3)","line":58,"loc":{"start":{"line":58,"column":29},"end":{"line":58,"column":44}}},"4":{"name":"(anonymous_4)","line":78,"loc":{"start":{"line":78,"column":19},"end":{"line":78,"column":41}}},"5":{"name":"(anonymous_5)","line":98,"loc":{"start":{"line":98,"column":47},"end":{"line":98,"column":61}}},"6":{"name":"(anonymous_6)","line":106,"loc":{"start":{"line":106,"column":59},"end":{"line":106,"column":82}}},"7":{"name":"(anonymous_7)","line":117,"loc":{"start":{"line":117,"column":31},"end":{"line":117,"column":46}}},"8":{"name":"(anonymous_8)","line":122,"loc":{"start":{"line":122,"column":35},"end":{"line":122,"column":52}}},"9":{"name":"(anonymous_9)","line":136,"loc":{"start":{"line":136,"column":24},"end":{"line":136,"column":38}}},"10":{"name":"(anonymous_10)","line":139,"loc":{"start":{"line":139,"column":33},"end":{"line":139,"column":48}}},"11":{"name":"returnResults","line":152,"loc":{"start":{"line":152,"column":6},"end":{"line":152,"column":38}}},"12":{"name":"(anonymous_12)","line":161,"loc":{"start":{"line":161,"column":24},"end":{"line":161,"column":41}}},"13":{"name":"(anonymous_13)","line":175,"loc":{"start":{"line":175,"column":28},"end":{"line":175,"column":44}}},"14":{"name":"(anonymous_14)","line":193,"loc":{"start":{"line":193,"column":8},"end":{"line":193,"column":40}}},"15":{"name":"(anonymous_15)","line":210,"loc":{"start":{"line":210,"column":51},"end":{"line":210,"column":66}}},"16":{"name":"(anonymous_16)","line":251,"loc":{"start":{"line":251,"column":29},"end":{"line":251,"column":44}}},"17":{"name":"(anonymous_17)","line":263,"loc":{"start":{"line":263,"column":19},"end":{"line":263,"column":41}}},"18":{"name":"(anonymous_18)","line":283,"loc":{"start":{"line":283,"column":47},"end":{"line":283,"column":61}}},"19":{"name":"(anonymous_19)","line":290,"loc":{"start":{"line":290,"column":59},"end":{"line":290,"column":82}}},"20":{"name":"(anonymous_20)","line":301,"loc":{"start":{"line":301,"column":31},"end":{"line":301,"column":46}}},"21":{"name":"(anonymous_21)","line":306,"loc":{"start":{"line":306,"column":35},"end":{"line":306,"column":52}}},"22":{"name":"(anonymous_22)","line":322,"loc":{"start":{"line":322,"column":24},"end":{"line":322,"column":38}}},"23":{"name":"(anonymous_23)","line":325,"loc":{"start":{"line":325,"column":33},"end":{"line":325,"column":48}}},"24":{"name":"returnResults","line":353,"loc":{"start":{"line":353,"column":6},"end":{"line":353,"column":38}}},"25":{"name":"(anonymous_25)","line":364,"loc":{"start":{"line":364,"column":26},"end":{"line":364,"column":43}}},"26":{"name":"(anonymous_26)","line":385,"loc":{"start":{"line":385,"column":28},"end":{"line":385,"column":44}}},"27":{"name":"(anonymous_27)","line":396,"loc":{"start":{"line":396,"column":9},"end":{"line":396,"column":20}}},"28":{"name":"(anonymous_28)","line":400,"loc":{"start":{"line":400,"column":10},"end":{"line":400,"column":21}}},"29":{"name":"(anonymous_29)","line":413,"loc":{"start":{"line":413,"column":11},"end":{"line":413,"column":43}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":51}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":43}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":49}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":43}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":38}},"6":{"start":{"line":10,"column":0},"end":{"line":10,"column":31}},"7":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}},"8":{"start":{"line":12,"column":0},"end":{"line":12,"column":42}},"9":{"start":{"line":13,"column":0},"end":{"line":13,"column":54}},"10":{"start":{"line":14,"column":0},"end":{"line":14,"column":26}},"11":{"start":{"line":15,"column":0},"end":{"line":15,"column":29}},"12":{"start":{"line":16,"column":0},"end":{"line":16,"column":49}},"13":{"start":{"line":18,"column":0},"end":{"line":434,"column":2}},"14":{"start":{"line":29,"column":4},"end":{"line":29,"column":20}},"15":{"start":{"line":31,"column":4},"end":{"line":34,"column":5}},"16":{"start":{"line":32,"column":6},"end":{"line":32,"column":20}},"17":{"start":{"line":33,"column":6},"end":{"line":33,"column":22}},"18":{"start":{"line":37,"column":4},"end":{"line":39,"column":5}},"19":{"start":{"line":37,"column":67},"end":{"line":37,"column":91}},"20":{"start":{"line":38,"column":6},"end":{"line":38,"column":32}},"21":{"start":{"line":43,"column":4},"end":{"line":43,"column":50}},"22":{"start":{"line":46,"column":4},"end":{"line":46,"column":44}},"23":{"start":{"line":49,"column":4},"end":{"line":51,"column":5}},"24":{"start":{"line":50,"column":6},"end":{"line":50,"column":56}},"25":{"start":{"line":54,"column":4},"end":{"line":54,"column":53}},"26":{"start":{"line":57,"column":4},"end":{"line":64,"column":5}},"27":{"start":{"line":58,"column":6},"end":{"line":63,"column":9}},"28":{"start":{"line":59,"column":8},"end":{"line":62,"column":9}},"29":{"start":{"line":60,"column":10},"end":{"line":60,"column":70}},"30":{"start":{"line":61,"column":10},"end":{"line":61,"column":91}},"31":{"start":{"line":68,"column":4},"end":{"line":72,"column":5}},"32":{"start":{"line":70,"column":6},"end":{"line":70,"column":100}},"33":{"start":{"line":71,"column":6},"end":{"line":71,"column":32}},"34":{"start":{"line":75,"column":4},"end":{"line":75,"column":63}},"35":{"start":{"line":78,"column":4},"end":{"line":181,"column":7}},"36":{"start":{"line":79,"column":6},"end":{"line":79,"column":30}},"37":{"start":{"line":79,"column":15},"end":{"line":79,"column":30}},"38":{"start":{"line":80,"column":6},"end":{"line":80,"column":37}},"39":{"start":{"line":80,"column":25},"end":{"line":80,"column":37}},"40":{"start":{"line":84,"column":6},"end":{"line":87,"column":7}},"41":{"start":{"line":85,"column":8},"end":{"line":85,"column":45}},"42":{"start":{"line":86,"column":8},"end":{"line":86,"column":37}},"43":{"start":{"line":90,"column":6},"end":{"line":92,"column":7}},"44":{"start":{"line":91,"column":8},"end":{"line":91,"column":58}},"45":{"start":{"line":96,"column":6},"end":{"line":96,"column":28}},"46":{"start":{"line":98,"column":6},"end":{"line":102,"column":9}},"47":{"start":{"line":99,"column":8},"end":{"line":101,"column":9}},"48":{"start":{"line":100,"column":10},"end":{"line":100,"column":27}},"49":{"start":{"line":106,"column":6},"end":{"line":150,"column":9}},"50":{"start":{"line":107,"column":8},"end":{"line":107,"column":32}},"51":{"start":{"line":107,"column":17},"end":{"line":107,"column":32}},"52":{"start":{"line":108,"column":8},"end":{"line":108,"column":34}},"53":{"start":{"line":108,"column":22},"end":{"line":108,"column":34}},"54":{"start":{"line":114,"column":8},"end":{"line":114,"column":54}},"55":{"start":{"line":115,"column":8},"end":{"line":115,"column":43}},"56":{"start":{"line":115,"column":26},"end":{"line":115,"column":43}},"57":{"start":{"line":117,"column":8},"end":{"line":130,"column":11}},"58":{"start":{"line":118,"column":10},"end":{"line":118,"column":53}},"59":{"start":{"line":118,"column":46},"end":{"line":118,"column":53}},"60":{"start":{"line":121,"column":10},"end":{"line":126,"column":11}},"61":{"start":{"line":122,"column":12},"end":{"line":125,"column":15}},"62":{"start":{"line":123,"column":14},"end":{"line":123,"column":62}},"63":{"start":{"line":123,"column":55},"end":{"line":123,"column":62}},"64":{"start":{"line":124,"column":14},"end":{"line":124,"column":40}},"65":{"start":{"line":128,"column":10},"end":{"line":128,"column":63}},"66":{"start":{"line":128,"column":56},"end":{"line":128,"column":63}},"67":{"start":{"line":129,"column":10},"end":{"line":129,"column":41}},"68":{"start":{"line":133,"column":8},"end":{"line":133,"column":47}},"69":{"start":{"line":134,"column":8},"end":{"line":134,"column":86}},"70":{"start":{"line":136,"column":8},"end":{"line":147,"column":11}},"71":{"start":{"line":139,"column":10},"end":{"line":146,"column":13}},"72":{"start":{"line":140,"column":12},"end":{"line":140,"column":39}},"73":{"start":{"line":140,"column":32},"end":{"line":140,"column":39}},"74":{"start":{"line":141,"column":12},"end":{"line":141,"column":54}},"75":{"start":{"line":142,"column":12},"end":{"line":142,"column":32}},"76":{"start":{"line":142,"column":25},"end":{"line":142,"column":32}},"77":{"start":{"line":144,"column":12},"end":{"line":144,"column":35}},"78":{"start":{"line":145,"column":12},"end":{"line":145,"column":52}},"79":{"start":{"line":149,"column":8},"end":{"line":149,"column":31}},"80":{"start":{"line":152,"column":6},"end":{"line":180,"column":7}},"81":{"start":{"line":154,"column":8},"end":{"line":154,"column":34}},"82":{"start":{"line":154,"column":22},"end":{"line":154,"column":34}},"83":{"start":{"line":157,"column":8},"end":{"line":157,"column":68}},"84":{"start":{"line":157,"column":48},"end":{"line":157,"column":68}},"85":{"start":{"line":160,"column":8},"end":{"line":160,"column":36}},"86":{"start":{"line":161,"column":8},"end":{"line":163,"column":11}},"87":{"start":{"line":162,"column":10},"end":{"line":162,"column":73}},"88":{"start":{"line":165,"column":8},"end":{"line":165,"column":24}},"89":{"start":{"line":166,"column":8},"end":{"line":166,"column":57}},"90":{"start":{"line":167,"column":8},"end":{"line":167,"column":120}},"91":{"start":{"line":170,"column":8},"end":{"line":172,"column":9}},"92":{"start":{"line":171,"column":10},"end":{"line":171,"column":90}},"93":{"start":{"line":175,"column":8},"end":{"line":177,"column":11}},"94":{"start":{"line":176,"column":10},"end":{"line":176,"column":60}},"95":{"start":{"line":179,"column":8},"end":{"line":179,"column":28}},"96":{"start":{"line":194,"column":4},"end":{"line":194,"column":20}},"97":{"start":{"line":196,"column":4},"end":{"line":196,"column":106}},"98":{"start":{"line":198,"column":4},"end":{"line":202,"column":5}},"99":{"start":{"line":199,"column":6},"end":{"line":199,"column":20}},"100":{"start":{"line":200,"column":6},"end":{"line":200,"column":22}},"101":{"start":{"line":201,"column":6},"end":{"line":201,"column":21}},"102":{"start":{"line":204,"column":4},"end":{"line":207,"column":5}},"103":{"start":{"line":205,"column":6},"end":{"line":205,"column":19}},"104":{"start":{"line":206,"column":6},"end":{"line":206,"column":21}},"105":{"start":{"line":210,"column":4},"end":{"line":212,"column":5}},"106":{"start":{"line":210,"column":67},"end":{"line":210,"column":91}},"107":{"start":{"line":211,"column":6},"end":{"line":211,"column":32}},"108":{"start":{"line":216,"column":4},"end":{"line":216,"column":50}},"109":{"start":{"line":219,"column":4},"end":{"line":219,"column":44}},"110":{"start":{"line":222,"column":4},"end":{"line":224,"column":5}},"111":{"start":{"line":223,"column":6},"end":{"line":223,"column":65}},"112":{"start":{"line":227,"column":4},"end":{"line":229,"column":5}},"113":{"start":{"line":228,"column":6},"end":{"line":228,"column":62}},"114":{"start":{"line":233,"column":4},"end":{"line":235,"column":5}},"115":{"start":{"line":234,"column":6},"end":{"line":234,"column":26}},"116":{"start":{"line":238,"column":4},"end":{"line":240,"column":5}},"117":{"start":{"line":239,"column":6},"end":{"line":239,"column":49}},"118":{"start":{"line":243,"column":4},"end":{"line":245,"column":5}},"119":{"start":{"line":244,"column":6},"end":{"line":244,"column":117}},"120":{"start":{"line":247,"column":4},"end":{"line":247,"column":53}},"121":{"start":{"line":250,"column":4},"end":{"line":257,"column":5}},"122":{"start":{"line":251,"column":6},"end":{"line":256,"column":9}},"123":{"start":{"line":252,"column":8},"end":{"line":255,"column":9}},"124":{"start":{"line":253,"column":10},"end":{"line":253,"column":70}},"125":{"start":{"line":254,"column":10},"end":{"line":254,"column":91}},"126":{"start":{"line":260,"column":4},"end":{"line":260,"column":60}},"127":{"start":{"line":263,"column":4},"end":{"line":393,"column":7}},"128":{"start":{"line":264,"column":6},"end":{"line":264,"column":30}},"129":{"start":{"line":264,"column":15},"end":{"line":264,"column":30}},"130":{"start":{"line":265,"column":6},"end":{"line":265,"column":37}},"131":{"start":{"line":265,"column":25},"end":{"line":265,"column":37}},"132":{"start":{"line":269,"column":6},"end":{"line":272,"column":7}},"133":{"start":{"line":270,"column":8},"end":{"line":270,"column":45}},"134":{"start":{"line":271,"column":8},"end":{"line":271,"column":37}},"135":{"start":{"line":275,"column":6},"end":{"line":277,"column":7}},"136":{"start":{"line":276,"column":8},"end":{"line":276,"column":58}},"137":{"start":{"line":281,"column":6},"end":{"line":281,"column":28}},"138":{"start":{"line":283,"column":6},"end":{"line":287,"column":9}},"139":{"start":{"line":284,"column":8},"end":{"line":286,"column":9}},"140":{"start":{"line":285,"column":10},"end":{"line":285,"column":27}},"141":{"start":{"line":290,"column":6},"end":{"line":351,"column":9}},"142":{"start":{"line":291,"column":8},"end":{"line":291,"column":32}},"143":{"start":{"line":291,"column":17},"end":{"line":291,"column":32}},"144":{"start":{"line":292,"column":8},"end":{"line":292,"column":34}},"145":{"start":{"line":292,"column":22},"end":{"line":292,"column":34}},"146":{"start":{"line":298,"column":8},"end":{"line":298,"column":54}},"147":{"start":{"line":299,"column":8},"end":{"line":299,"column":43}},"148":{"start":{"line":299,"column":26},"end":{"line":299,"column":43}},"149":{"start":{"line":301,"column":8},"end":{"line":314,"column":11}},"150":{"start":{"line":302,"column":10},"end":{"line":302,"column":53}},"151":{"start":{"line":302,"column":46},"end":{"line":302,"column":53}},"152":{"start":{"line":305,"column":10},"end":{"line":310,"column":11}},"153":{"start":{"line":306,"column":12},"end":{"line":309,"column":15}},"154":{"start":{"line":307,"column":14},"end":{"line":307,"column":62}},"155":{"start":{"line":307,"column":55},"end":{"line":307,"column":62}},"156":{"start":{"line":308,"column":14},"end":{"line":308,"column":40}},"157":{"start":{"line":312,"column":10},"end":{"line":312,"column":63}},"158":{"start":{"line":312,"column":56},"end":{"line":312,"column":63}},"159":{"start":{"line":313,"column":10},"end":{"line":313,"column":41}},"160":{"start":{"line":317,"column":8},"end":{"line":317,"column":47}},"161":{"start":{"line":318,"column":8},"end":{"line":318,"column":86}},"162":{"start":{"line":321,"column":8},"end":{"line":321,"column":26}},"163":{"start":{"line":322,"column":8},"end":{"line":348,"column":11}},"164":{"start":{"line":325,"column":10},"end":{"line":347,"column":13}},"165":{"start":{"line":326,"column":12},"end":{"line":326,"column":39}},"166":{"start":{"line":326,"column":32},"end":{"line":326,"column":39}},"167":{"start":{"line":327,"column":12},"end":{"line":327,"column":54}},"168":{"start":{"line":328,"column":12},"end":{"line":328,"column":35}},"169":{"start":{"line":329,"column":12},"end":{"line":331,"column":13}},"170":{"start":{"line":330,"column":14},"end":{"line":330,"column":54}},"171":{"start":{"line":338,"column":12},"end":{"line":338,"column":44}},"172":{"start":{"line":338,"column":37},"end":{"line":338,"column":44}},"173":{"start":{"line":340,"column":12},"end":{"line":342,"column":13}},"174":{"start":{"line":341,"column":14},"end":{"line":341,"column":43}},"175":{"start":{"line":344,"column":12},"end":{"line":346,"column":13}},"176":{"start":{"line":345,"column":14},"end":{"line":345,"column":55}},"177":{"start":{"line":350,"column":8},"end":{"line":350,"column":31}},"178":{"start":{"line":353,"column":6},"end":{"line":391,"column":7}},"179":{"start":{"line":355,"column":8},"end":{"line":355,"column":42}},"180":{"start":{"line":355,"column":22},"end":{"line":355,"column":42}},"181":{"start":{"line":358,"column":8},"end":{"line":358,"column":68}},"182":{"start":{"line":358,"column":48},"end":{"line":358,"column":68}},"183":{"start":{"line":361,"column":8},"end":{"line":361,"column":36}},"184":{"start":{"line":363,"column":8},"end":{"line":367,"column":9}},"185":{"start":{"line":364,"column":10},"end":{"line":366,"column":13}},"186":{"start":{"line":365,"column":12},"end":{"line":365,"column":75}},"187":{"start":{"line":369,"column":8},"end":{"line":369,"column":24}},"188":{"start":{"line":370,"column":8},"end":{"line":370,"column":57}},"189":{"start":{"line":371,"column":8},"end":{"line":371,"column":120}},"190":{"start":{"line":380,"column":8},"end":{"line":382,"column":9}},"191":{"start":{"line":381,"column":10},"end":{"line":381,"column":90}},"192":{"start":{"line":385,"column":8},"end":{"line":387,"column":11}},"193":{"start":{"line":386,"column":10},"end":{"line":386,"column":60}},"194":{"start":{"line":390,"column":8},"end":{"line":390,"column":25}},"195":{"start":{"line":397,"column":4},"end":{"line":397,"column":65}},"196":{"start":{"line":401,"column":4},"end":{"line":401,"column":65}},"197":{"start":{"line":414,"column":4},"end":{"line":418,"column":5}},"198":{"start":{"line":415,"column":6},"end":{"line":415,"column":20}},"199":{"start":{"line":416,"column":6},"end":{"line":416,"column":22}},"200":{"start":{"line":417,"column":6},"end":{"line":417,"column":21}},"201":{"start":{"line":420,"column":4},"end":{"line":423,"column":5}},"202":{"start":{"line":421,"column":6},"end":{"line":421,"column":19}},"203":{"start":{"line":422,"column":6},"end":{"line":422,"column":21}},"204":{"start":{"line":426,"column":4},"end":{"line":428,"column":5}},"205":{"start":{"line":427,"column":6},"end":{"line":427,"column":56}},"206":{"start":{"line":430,"column":4},"end":{"line":431,"column":97}}},"branchMap":{"1":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":4},"end":{"line":31,"column":4}},{"start":{"line":31,"column":4},"end":{"line":31,"column":4}}]},"2":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":4},"end":{"line":37,"column":4}},{"start":{"line":37,"column":4},"end":{"line":37,"column":4}}]},"3":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":8},"end":{"line":37,"column":31}},{"start":{"line":37,"column":35},"end":{"line":37,"column":93}}]},"4":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":4},"end":{"line":49,"column":4}},{"start":{"line":49,"column":4},"end":{"line":49,"column":4}}]},"5":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":4},"end":{"line":57,"column":4}},{"start":{"line":57,"column":4},"end":{"line":57,"column":4}}]},"6":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":8},"end":{"line":59,"column":8}},{"start":{"line":59,"column":8},"end":{"line":59,"column":8}}]},"7":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":12},"end":{"line":59,"column":25}},{"start":{"line":59,"column":29},"end":{"line":59,"column":48}}]},"8":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":4},"end":{"line":68,"column":4}},{"start":{"line":68,"column":4},"end":{"line":68,"column":4}}]},"9":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":8},"end":{"line":68,"column":26}},{"start":{"line":68,"column":30},"end":{"line":68,"column":53}}]},"10":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":6},"end":{"line":79,"column":6}},{"start":{"line":79,"column":6},"end":{"line":79,"column":6}}]},"11":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":6},"end":{"line":80,"column":6}},{"start":{"line":80,"column":6},"end":{"line":80,"column":6}}]},"12":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":6},"end":{"line":84,"column":6}},{"start":{"line":84,"column":6},"end":{"line":84,"column":6}}]},"13":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":6},"end":{"line":90,"column":6}},{"start":{"line":90,"column":6},"end":{"line":90,"column":6}}]},"14":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":8},"end":{"line":99,"column":8}},{"start":{"line":99,"column":8},"end":{"line":99,"column":8}}]},"15":{"line":99,"type":"binary-expr","locations":[{"start":{"line":99,"column":12},"end":{"line":99,"column":65}},{"start":{"line":99,"column":69},"end":{"line":99,"column":104}}]},"16":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":8},"end":{"line":107,"column":8}},{"start":{"line":107,"column":8},"end":{"line":107,"column":8}}]},"17":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":8},"end":{"line":108,"column":8}},{"start":{"line":108,"column":8},"end":{"line":108,"column":8}}]},"18":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":8},"end":{"line":115,"column":8}},{"start":{"line":115,"column":8},"end":{"line":115,"column":8}}]},"19":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":10},"end":{"line":118,"column":10}},{"start":{"line":118,"column":10},"end":{"line":118,"column":10}}]},"20":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":10},"end":{"line":121,"column":10}},{"start":{"line":121,"column":10},"end":{"line":121,"column":10}}]},"21":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":14},"end":{"line":123,"column":14}},{"start":{"line":123,"column":14},"end":{"line":123,"column":14}}]},"22":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":10},"end":{"line":128,"column":10}},{"start":{"line":128,"column":10},"end":{"line":128,"column":10}}]},"23":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":12},"end":{"line":140,"column":12}},{"start":{"line":140,"column":12},"end":{"line":140,"column":12}}]},"24":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":12},"end":{"line":142,"column":12}},{"start":{"line":142,"column":12},"end":{"line":142,"column":12}}]},"25":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":8},"end":{"line":154,"column":8}},{"start":{"line":154,"column":8},"end":{"line":154,"column":8}}]},"26":{"line":157,"type":"if","locations":[{"start":{"line":157,"column":8},"end":{"line":157,"column":8}},{"start":{"line":157,"column":8},"end":{"line":157,"column":8}}]},"27":{"line":157,"type":"binary-expr","locations":[{"start":{"line":157,"column":12},"end":{"line":157,"column":35}},{"start":{"line":157,"column":39},"end":{"line":157,"column":46}}]},"28":{"line":166,"type":"cond-expr","locations":[{"start":{"line":166,"column":37},"end":{"line":166,"column":51}},{"start":{"line":166,"column":54},"end":{"line":166,"column":56}}]},"29":{"line":170,"type":"if","locations":[{"start":{"line":170,"column":8},"end":{"line":170,"column":8}},{"start":{"line":170,"column":8},"end":{"line":170,"column":8}}]},"30":{"line":170,"type":"binary-expr","locations":[{"start":{"line":170,"column":12},"end":{"line":170,"column":17}},{"start":{"line":170,"column":21},"end":{"line":170,"column":33}},{"start":{"line":170,"column":37},"end":{"line":170,"column":57}}]},"31":{"line":198,"type":"if","locations":[{"start":{"line":198,"column":4},"end":{"line":198,"column":4}},{"start":{"line":198,"column":4},"end":{"line":198,"column":4}}]},"32":{"line":204,"type":"if","locations":[{"start":{"line":204,"column":4},"end":{"line":204,"column":4}},{"start":{"line":204,"column":4},"end":{"line":204,"column":4}}]},"33":{"line":210,"type":"if","locations":[{"start":{"line":210,"column":4},"end":{"line":210,"column":4}},{"start":{"line":210,"column":4},"end":{"line":210,"column":4}}]},"34":{"line":210,"type":"binary-expr","locations":[{"start":{"line":210,"column":8},"end":{"line":210,"column":31}},{"start":{"line":210,"column":35},"end":{"line":210,"column":93}}]},"35":{"line":222,"type":"if","locations":[{"start":{"line":222,"column":4},"end":{"line":222,"column":4}},{"start":{"line":222,"column":4},"end":{"line":222,"column":4}}]},"36":{"line":222,"type":"binary-expr","locations":[{"start":{"line":222,"column":8},"end":{"line":222,"column":38}},{"start":{"line":222,"column":42},"end":{"line":222,"column":71}}]},"37":{"line":227,"type":"if","locations":[{"start":{"line":227,"column":4},"end":{"line":227,"column":4}},{"start":{"line":227,"column":4},"end":{"line":227,"column":4}}]},"38":{"line":233,"type":"if","locations":[{"start":{"line":233,"column":4},"end":{"line":233,"column":4}},{"start":{"line":233,"column":4},"end":{"line":233,"column":4}}]},"39":{"line":238,"type":"if","locations":[{"start":{"line":238,"column":4},"end":{"line":238,"column":4}},{"start":{"line":238,"column":4},"end":{"line":238,"column":4}}]},"40":{"line":238,"type":"binary-expr","locations":[{"start":{"line":238,"column":8},"end":{"line":238,"column":35}},{"start":{"line":238,"column":39},"end":{"line":238,"column":68}}]},"41":{"line":243,"type":"if","locations":[{"start":{"line":243,"column":4},"end":{"line":243,"column":4}},{"start":{"line":243,"column":4},"end":{"line":243,"column":4}}]},"42":{"line":250,"type":"if","locations":[{"start":{"line":250,"column":4},"end":{"line":250,"column":4}},{"start":{"line":250,"column":4},"end":{"line":250,"column":4}}]},"43":{"line":252,"type":"if","locations":[{"start":{"line":252,"column":8},"end":{"line":252,"column":8}},{"start":{"line":252,"column":8},"end":{"line":252,"column":8}}]},"44":{"line":252,"type":"binary-expr","locations":[{"start":{"line":252,"column":12},"end":{"line":252,"column":25}},{"start":{"line":252,"column":29},"end":{"line":252,"column":48}}]},"45":{"line":264,"type":"if","locations":[{"start":{"line":264,"column":6},"end":{"line":264,"column":6}},{"start":{"line":264,"column":6},"end":{"line":264,"column":6}}]},"46":{"line":265,"type":"if","locations":[{"start":{"line":265,"column":6},"end":{"line":265,"column":6}},{"start":{"line":265,"column":6},"end":{"line":265,"column":6}}]},"47":{"line":269,"type":"if","locations":[{"start":{"line":269,"column":6},"end":{"line":269,"column":6}},{"start":{"line":269,"column":6},"end":{"line":269,"column":6}}]},"48":{"line":275,"type":"if","locations":[{"start":{"line":275,"column":6},"end":{"line":275,"column":6}},{"start":{"line":275,"column":6},"end":{"line":275,"column":6}}]},"49":{"line":284,"type":"if","locations":[{"start":{"line":284,"column":8},"end":{"line":284,"column":8}},{"start":{"line":284,"column":8},"end":{"line":284,"column":8}}]},"50":{"line":284,"type":"binary-expr","locations":[{"start":{"line":284,"column":12},"end":{"line":284,"column":65}},{"start":{"line":284,"column":69},"end":{"line":284,"column":104}}]},"51":{"line":291,"type":"if","locations":[{"start":{"line":291,"column":8},"end":{"line":291,"column":8}},{"start":{"line":291,"column":8},"end":{"line":291,"column":8}}]},"52":{"line":292,"type":"if","locations":[{"start":{"line":292,"column":8},"end":{"line":292,"column":8}},{"start":{"line":292,"column":8},"end":{"line":292,"column":8}}]},"53":{"line":299,"type":"if","locations":[{"start":{"line":299,"column":8},"end":{"line":299,"column":8}},{"start":{"line":299,"column":8},"end":{"line":299,"column":8}}]},"54":{"line":302,"type":"if","locations":[{"start":{"line":302,"column":10},"end":{"line":302,"column":10}},{"start":{"line":302,"column":10},"end":{"line":302,"column":10}}]},"55":{"line":305,"type":"if","locations":[{"start":{"line":305,"column":10},"end":{"line":305,"column":10}},{"start":{"line":305,"column":10},"end":{"line":305,"column":10}}]},"56":{"line":307,"type":"if","locations":[{"start":{"line":307,"column":14},"end":{"line":307,"column":14}},{"start":{"line":307,"column":14},"end":{"line":307,"column":14}}]},"57":{"line":312,"type":"if","locations":[{"start":{"line":312,"column":10},"end":{"line":312,"column":10}},{"start":{"line":312,"column":10},"end":{"line":312,"column":10}}]},"58":{"line":326,"type":"if","locations":[{"start":{"line":326,"column":12},"end":{"line":326,"column":12}},{"start":{"line":326,"column":12},"end":{"line":326,"column":12}}]},"59":{"line":329,"type":"if","locations":[{"start":{"line":329,"column":12},"end":{"line":329,"column":12}},{"start":{"line":329,"column":12},"end":{"line":329,"column":12}}]},"60":{"line":338,"type":"if","locations":[{"start":{"line":338,"column":12},"end":{"line":338,"column":12}},{"start":{"line":338,"column":12},"end":{"line":338,"column":12}}]},"61":{"line":340,"type":"if","locations":[{"start":{"line":340,"column":12},"end":{"line":340,"column":12}},{"start":{"line":340,"column":12},"end":{"line":340,"column":12}}]},"62":{"line":344,"type":"if","locations":[{"start":{"line":344,"column":12},"end":{"line":344,"column":12}},{"start":{"line":344,"column":12},"end":{"line":344,"column":12}}]},"63":{"line":355,"type":"if","locations":[{"start":{"line":355,"column":8},"end":{"line":355,"column":8}},{"start":{"line":355,"column":8},"end":{"line":355,"column":8}}]},"64":{"line":358,"type":"if","locations":[{"start":{"line":358,"column":8},"end":{"line":358,"column":8}},{"start":{"line":358,"column":8},"end":{"line":358,"column":8}}]},"65":{"line":358,"type":"binary-expr","locations":[{"start":{"line":358,"column":12},"end":{"line":358,"column":35}},{"start":{"line":358,"column":39},"end":{"line":358,"column":46}}]},"66":{"line":363,"type":"if","locations":[{"start":{"line":363,"column":8},"end":{"line":363,"column":8}},{"start":{"line":363,"column":8},"end":{"line":363,"column":8}}]},"67":{"line":370,"type":"cond-expr","locations":[{"start":{"line":370,"column":37},"end":{"line":370,"column":51}},{"start":{"line":370,"column":54},"end":{"line":370,"column":56}}]},"68":{"line":380,"type":"if","locations":[{"start":{"line":380,"column":8},"end":{"line":380,"column":8}},{"start":{"line":380,"column":8},"end":{"line":380,"column":8}}]},"69":{"line":380,"type":"binary-expr","locations":[{"start":{"line":380,"column":12},"end":{"line":380,"column":17}},{"start":{"line":380,"column":21},"end":{"line":380,"column":33}},{"start":{"line":380,"column":37},"end":{"line":380,"column":57}}]},"70":{"line":414,"type":"if","locations":[{"start":{"line":414,"column":4},"end":{"line":414,"column":4}},{"start":{"line":414,"column":4},"end":{"line":414,"column":4}}]},"71":{"line":420,"type":"if","locations":[{"start":{"line":420,"column":4},"end":{"line":420,"column":4}},{"start":{"line":420,"column":4},"end":{"line":420,"column":4}}]},"72":{"line":426,"type":"if","locations":[{"start":{"line":426,"column":4},"end":{"line":426,"column":4}},{"start":{"line":426,"column":4},"end":{"line":426,"column":4}}]}},"code":["/**"," * Basic Finder Queries"," */","","var usageError = require('../../utils/usageError');","var utils = require('../../utils/helpers');","var normalize = require('../../utils/normalize');","var sorter = require('../../utils/sorter');","var Deferred = require('../deferred');","var Joins = require('./joins');","var Operations = require('./operations');","var Integrator = require('../integrator');","var waterlineCriteria = require('waterline-criteria');","var _ = require('lodash');","var async = require('async');","var hasOwnProperty = utils.object.hasOwnProperty;","","module.exports = {","","  /**","   * Find a single record that meets criteria","   *","   * @param {Object} criteria to search","   * @param {Function} callback","   * @return Deferred object if no callback","   */","","  findOne: function(criteria, cb) {","    var self = this;","","    if (typeof criteria === 'function') {","      cb = criteria;","      criteria = null;","    }","","    // If the criteria is an array of objects, wrap it in an \"or\"","    if (Array.isArray(criteria) && _.all(criteria, function(crit) {return _.isObject(crit);})) {","      criteria = {or: criteria};","    }","","    // Check if criteria is an integer or string and normalize criteria","    // to object, using the specified primary key field.","    criteria = normalize.expandPK(self, criteria);","","    // Normalize criteria","    criteria = normalize.criteria(criteria);","","    // Return Deferred or pass to adapter","    if (typeof cb !== 'function') {","      return new Deferred(this, this.findOne, criteria);","    }","","    // Transform Search Criteria","    criteria = self._transformer.serialize(criteria);","","    // serialize populated object","    if (criteria.joins) {","      criteria.joins.forEach(function(join) {","        if (join.criteria && join.criteria.where) {","          var joinCollection = self.waterline.collections[join.child];","          join.criteria.where = joinCollection._transformer.serialize(join.criteria.where);","        }","      });","    }","","    // If there was something defined in the criteria that would return no results, don't even","    // run the query and just return an empty result set.","    if (criteria === false || criteria.where === null) {","      // Build Default Error Message","      var err = '.findOne() requires a criteria. If you want the first record try .find().limit(1)';","      return cb(new Error(err));","    }","","    // Build up an operations set","    var operations = new Operations(self, criteria, 'findOne');","","    // Run the operations","    operations.run(function(err, values) {","      if (err) return cb(err);","      if (!values.cache) return cb();","","      // If no joins are used grab the only item from the cache and pass to the returnResults","      // function.","      if (!criteria.joins) {","        values = values.cache[self.identity];","        return returnResults(values);","      }","","      // If the values are already combined, return the results","      if (values.combined) {","        return returnResults(values.cache[self.identity]);","      }","","      // Find the primaryKey of the current model so it can be passed down to the integrator.","      // Use 'id' as a good general default;","      var primaryKey = 'id';","","      Object.keys(self._schema.schema).forEach(function(key) {","        if (self._schema.schema[key].hasOwnProperty('primaryKey') && self._schema.schema[key].primaryKey) {","          primaryKey = key;","        }","      });","","","      // Perform in-memory joins","      Integrator(values.cache, criteria.joins, primaryKey, function(err, results) {","        if (err) return cb(err);","        if (!results) return cb();","","        // We need to run one last check on the results using the criteria. This allows a self","        // association where we end up with two records in the cache both having each other as","        // embedded objects and we only want one result. However we need to filter any join criteria","        // out of the top level where query so that searchs by primary key still work.","        var tmpCriteria = _.cloneDeep(criteria.where);","        if (!tmpCriteria) tmpCriteria = {};","","        criteria.joins.forEach(function(join) {","          if (!hasOwnProperty(join, 'alias')) return;","","          // Check for `OR` criteria","          if (hasOwnProperty(tmpCriteria, 'or')) {","            tmpCriteria.or.forEach(function(search) {","              if (!hasOwnProperty(search, join.alias)) return;","              delete search[join.alias];","            });","          }","","          if (!hasOwnProperty(tmpCriteria, join.alias)) return;","          delete tmpCriteria[join.alias];","        });","","        // Pass results into Waterline-Criteria","        var _criteria = { where: tmpCriteria };","        results = waterlineCriteria('parent', { parent: results }, _criteria).results;","","        results.forEach(function(res) {","","          // Go Ahead and perform any sorts on the associated data","          criteria.joins.forEach(function(join) {","            if (!join.criteria) return;","            var c = normalize.criteria(join.criteria);","            if (!c.sort) return;","","            var alias = join.alias;","            res[alias] = sorter(res[alias], c.sort);","          });","        });","","        returnResults(results);","      });","","      function returnResults(results) {","","        if (!results) return cb();","","        // Normalize results to an array","        if (!Array.isArray(results) && results) results = [results];","","        // Unserialize each of the results before attempting any join logic on them","        var unserializedModels = [];","        results.forEach(function(result) {","          unserializedModels.push(self._transformer.unserialize(result));","        });","","        var models = [];","        var joins = criteria.joins ? criteria.joins : [];","        var data = new Joins(joins, unserializedModels, self.identity, self._schema.schema, self.waterline.collections);","","        // If `data.models` is invalid (not an array) return early to avoid getting into trouble.","        if (!data || !data.models || !data.models.forEach) {","          return cb(new Error('Values returned from operations set are not an array...'));","        }","","        // Create a model for the top level values","        data.models.forEach(function(model) {","          models.push(new self._model(model, data.options));","        });","","        cb(null, models[0]);","      }","    });","  },","","  /**","   * Find All Records that meet criteria","   *","   * @param {Object} search criteria","   * @param {Object} options","   * @param {Function} callback","   * @return Deferred object if no callback","   */","","  find: function(criteria, options, cb) {","    var self = this;","","    var usage = utils.capitalize(this.identity) + '.find([criteria],[options]).exec(callback|switchback)';","","    if (typeof criteria === 'function') {","      cb = criteria;","      criteria = null;","      options = null;","    }","","    if (typeof options === 'function') {","      cb = options;","      options = null;","    }","","    // If the criteria is an array of objects, wrap it in an \"or\"","    if (Array.isArray(criteria) && _.all(criteria, function(crit) {return _.isObject(crit);})) {","      criteria = {or: criteria};","    }","","    // Check if criteria is an integer or string and normalize criteria","    // to object, using the specified primary key field.","    criteria = normalize.expandPK(self, criteria);","","    // Normalize criteria","    criteria = normalize.criteria(criteria);","","    // Validate Arguments","    if (typeof criteria === 'function' || typeof options === 'function') {","      return usageError('Invalid options specified!', usage, cb);","    }","","    // Return Deferred or pass to adapter","    if (typeof cb !== 'function') {","      return new Deferred(this, this.find, criteria, options);","    }","","    // If there was something defined in the criteria that would return no results, don't even","    // run the query and just return an empty result set.","    if (criteria === false) {","      return cb(null, []);","    }","","    // Fold in options","    if (options === Object(options) && criteria === Object(criteria)) {","      criteria = _.extend({}, criteria, options);","    }","","    // Transform Search Criteria","    if (!self._transformer) {","      throw new Error('Waterline can not access transformer-- maybe the context of the method is being overridden?');","    }","","    criteria = self._transformer.serialize(criteria);","","    // serialize populated object","    if (criteria.joins) {","      criteria.joins.forEach(function(join) {","        if (join.criteria && join.criteria.where) {","          var joinCollection = self.waterline.collections[join.child];","          join.criteria.where = joinCollection._transformer.serialize(join.criteria.where);","        }","      });","    }","","    // Build up an operations set","    var operations = new Operations(self, criteria, 'find');","","    // Run the operations","    operations.run(function(err, values) {","      if (err) return cb(err);","      if (!values.cache) return cb();","","      // If no joins are used grab current collection's item from the cache and pass to the returnResults","      // function.","      if (!criteria.joins) {","        values = values.cache[self.identity];","        return returnResults(values);","      }","","      // If the values are already combined, return the results","      if (values.combined) {","        return returnResults(values.cache[self.identity]);","      }","","      // Find the primaryKey of the current model so it can be passed down to the integrator.","      // Use 'id' as a good general default;","      var primaryKey = 'id';","","      Object.keys(self._schema.schema).forEach(function(key) {","        if (self._schema.schema[key].hasOwnProperty('primaryKey') && self._schema.schema[key].primaryKey) {","          primaryKey = key;","        }","      });","","      // Perform in-memory joins","      Integrator(values.cache, criteria.joins, primaryKey, function(err, results) {","        if (err) return cb(err);","        if (!results) return cb();","","        // We need to run one last check on the results using the criteria. This allows a self","        // association where we end up with two records in the cache both having each other as","        // embedded objects and we only want one result. However we need to filter any join criteria","        // out of the top level where query so that searchs by primary key still work.","        var tmpCriteria = _.cloneDeep(criteria.where);","        if (!tmpCriteria) tmpCriteria = {};","","        criteria.joins.forEach(function(join) {","          if (!hasOwnProperty(join, 'alias')) return;","","          // Check for `OR` criteria","          if (hasOwnProperty(tmpCriteria, 'or')) {","            tmpCriteria.or.forEach(function(search) {","              if (!hasOwnProperty(search, join.alias)) return;","              delete search[join.alias];","            });","          }","","          if (!hasOwnProperty(tmpCriteria, join.alias)) return;","          delete tmpCriteria[join.alias];","        });","","        // Pass results into Waterline-Criteria","        var _criteria = { where: tmpCriteria };","        results = waterlineCriteria('parent', { parent: results }, _criteria).results;","","        // Serialize values coming from an in-memory join before modelizing","        var _results = [];","        results.forEach(function(res) {","","          // Go Ahead and perform any sorts on the associated data","          criteria.joins.forEach(function(join) {","            if (!join.criteria) return;","            var c = normalize.criteria(join.criteria);","            var alias = join.alias;","            if (c.sort) {","              res[alias] = sorter(res[alias], c.sort);","            }","","            // If a junction table was used we need to do limit and skip in-memory","            // This is where it gets nasty, paginated stuff here is a pain and needs work","            // Hopefully we can get a chance to re-do it in WL2 and not have this. Basically","            // if you need paginated populates try and have all the tables in the query on the","            // same connection so it can be done in a nice single query.","            if (!join.junctionTable) return;","","            if (c.skip) {","              res[alias].splice(0, c.skip);","            }","","            if (c.limit) {","              res[alias] = _.take(res[alias], c.limit);","            }","          });","        });","","        returnResults(results);","      });","","      function returnResults(results) {","","        if (!results) return cb(null, []);","","        // Normalize results to an array","        if (!Array.isArray(results) && results) results = [results];","","        // Unserialize each of the results before attempting any join logic on them","        var unserializedModels = [];","","        if (results) {","          results.forEach(function(result) {","            unserializedModels.push(self._transformer.unserialize(result));","          });","        }","","        var models = [];","        var joins = criteria.joins ? criteria.joins : [];","        var data = new Joins(joins, unserializedModels, self.identity, self._schema.schema, self.waterline.collections);","","        // NOTE:","        // If a \"belongsTo\" (i.e. HAS_FK) association is null, should it be transformed into","        // an empty array here?  That is not what is happening currently, and it can cause","        // unexpected problems when implementing the native join method as an adapter implementor.","        // ~Mike June 22, 2014","","        // If `data.models` is invalid (not an array) return early to avoid getting into trouble.","        if (!data || !data.models || !data.models.forEach) {","          return cb(new Error('Values returned from operations set are not an array...'));","        }","","        // Create a model for the top level values","        data.models.forEach(function(model) {","          models.push(new self._model(model, data.options));","        });","","","        cb(null, models);","      }","","    });","  },","","  where: function() {","    this.find.apply(this, Array.prototype.slice.call(arguments));","  },","","  select: function() {","    this.find.apply(this, Array.prototype.slice.call(arguments));","  },","","","  /**","   * findAll","   * [[ Deprecated! ]]","   *","   * @param  {Object}   criteria","   * @param  {Object}   options","   * @param  {Function} cb","   */","  findAll: function(criteria, options, cb) {","    if (typeof criteria === 'function') {","      cb = criteria;","      criteria = null;","      options = null;","    }","","    if (typeof options === 'function') {","      cb = options;","      options = null;","    }","","    // Return Deferred or pass to adapter","    if (typeof cb !== 'function') {","      return new Deferred(this, this.findAll, criteria);","    }","","    cb(new Error('In Waterline >= 0.9, findAll() has been deprecated in favor of find().' +","                '\\nPlease visit the migration guide at http://sailsjs.org for help upgrading.'));","  }","","};",""],"l":{"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"18":1,"29":0,"31":0,"32":0,"33":0,"37":0,"38":0,"43":0,"46":0,"49":0,"50":0,"54":0,"57":0,"58":0,"59":0,"60":0,"61":0,"68":0,"70":0,"71":0,"75":0,"78":0,"79":0,"80":0,"84":0,"85":0,"86":0,"90":0,"91":0,"96":0,"98":0,"99":0,"100":0,"106":0,"107":0,"108":0,"114":0,"115":0,"117":0,"118":0,"121":0,"122":0,"123":0,"124":0,"128":0,"129":0,"133":0,"134":0,"136":0,"139":0,"140":0,"141":0,"142":0,"144":0,"145":0,"149":0,"152":1,"154":0,"157":0,"160":0,"161":0,"162":0,"165":0,"166":0,"167":0,"170":0,"171":0,"175":0,"176":0,"179":0,"194":0,"196":0,"198":0,"199":0,"200":0,"201":0,"204":0,"205":0,"206":0,"210":0,"211":0,"216":0,"219":0,"222":0,"223":0,"227":0,"228":0,"233":0,"234":0,"238":0,"239":0,"243":0,"244":0,"247":0,"250":0,"251":0,"252":0,"253":0,"254":0,"260":0,"263":0,"264":0,"265":0,"269":0,"270":0,"271":0,"275":0,"276":0,"281":0,"283":0,"284":0,"285":0,"290":0,"291":0,"292":0,"298":0,"299":0,"301":0,"302":0,"305":0,"306":0,"307":0,"308":0,"312":0,"313":0,"317":0,"318":0,"321":0,"322":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"338":0,"340":0,"341":0,"344":0,"345":0,"350":0,"353":1,"355":0,"358":0,"361":0,"363":0,"364":0,"365":0,"369":0,"370":0,"371":0,"380":0,"381":0,"385":0,"386":0,"390":0,"397":0,"401":0,"414":0,"415":0,"416":0,"417":0,"420":0,"421":0,"422":0,"426":0,"427":0,"430":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/sorter.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/sorter.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"sortData","line":18,"loc":{"start":{"line":18,"column":17},"end":{"line":18,"column":55}}},"2":{"name":"dynamicSort","line":20,"loc":{"start":{"line":20,"column":2},"end":{"line":20,"column":33}}},"3":{"name":"(anonymous_3)","line":27,"loc":{"start":{"line":27,"column":11},"end":{"line":27,"column":26}}},"4":{"name":"dynamicSortMultiple","line":33,"loc":{"start":{"line":33,"column":2},"end":{"line":33,"column":33}}},"5":{"name":"(anonymous_5)","line":35,"loc":{"start":{"line":35,"column":11},"end":{"line":35,"column":32}}},"6":{"name":"(anonymous_6)","line":50,"loc":{"start":{"line":50,"column":31},"end":{"line":50,"column":45}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":18,"column":0},"end":{"line":57,"column":2}},"3":{"start":{"line":20,"column":2},"end":{"line":31,"column":3}},"4":{"start":{"line":21,"column":4},"end":{"line":21,"column":22}},"5":{"start":{"line":22,"column":4},"end":{"line":25,"column":5}},"6":{"start":{"line":23,"column":6},"end":{"line":23,"column":21}},"7":{"start":{"line":24,"column":6},"end":{"line":24,"column":36}},"8":{"start":{"line":27,"column":4},"end":{"line":30,"column":6}},"9":{"start":{"line":28,"column":6},"end":{"line":28,"column":90}},"10":{"start":{"line":29,"column":6},"end":{"line":29,"column":32}},"11":{"start":{"line":33,"column":2},"end":{"line":46,"column":3}},"12":{"start":{"line":34,"column":4},"end":{"line":34,"column":26}},"13":{"start":{"line":35,"column":4},"end":{"line":45,"column":6}},"14":{"start":{"line":36,"column":6},"end":{"line":36,"column":16}},"15":{"start":{"line":37,"column":6},"end":{"line":37,"column":21}},"16":{"start":{"line":38,"column":6},"end":{"line":38,"column":44}},"17":{"start":{"line":40,"column":6},"end":{"line":43,"column":7}},"18":{"start":{"line":41,"column":8},"end":{"line":41,"column":51}},"19":{"start":{"line":42,"column":8},"end":{"line":42,"column":12}},"20":{"start":{"line":44,"column":6},"end":{"line":44,"column":20}},"21":{"start":{"line":49,"column":2},"end":{"line":49,"column":21}},"22":{"start":{"line":50,"column":2},"end":{"line":53,"column":5}},"23":{"start":{"line":51,"column":4},"end":{"line":52,"column":29}},"24":{"start":{"line":51,"column":34},"end":{"line":51,"column":60}},"25":{"start":{"line":52,"column":9},"end":{"line":52,"column":29}},"26":{"start":{"line":55,"column":2},"end":{"line":55,"column":56}},"27":{"start":{"line":56,"column":2},"end":{"line":56,"column":14}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":22,"column":4}},{"start":{"line":22,"column":4},"end":{"line":22,"column":4}}]},"2":{"line":28,"type":"cond-expr","locations":[{"start":{"line":28,"column":49},"end":{"line":28,"column":51}},{"start":{"line":28,"column":54},"end":{"line":28,"column":89}}]},"3":{"line":28,"type":"cond-expr","locations":[{"start":{"line":28,"column":84},"end":{"line":28,"column":85}},{"start":{"line":28,"column":88},"end":{"line":28,"column":89}}]},"4":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":13},"end":{"line":40,"column":25}},{"start":{"line":40,"column":29},"end":{"line":40,"column":51}}]},"5":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":4},"end":{"line":51,"column":4}},{"start":{"line":51,"column":4},"end":{"line":51,"column":4}}]}},"code":["/**"," * Module Dependencies"," */","","var _ = require('lodash');","","/**"," * Sort `data` (tuples) using `sortCriteria` (comparator)"," *"," * Based on method described here:"," * http://stackoverflow.com/a/4760279/909625"," *"," * @param  { Object[] } data         [tuples]"," * @param  { Object }   sortCriteria [mongo-style comparator object]"," * @return { Object[] }"," */","","module.exports = function sortData(data, sortCriteria) {","","  function dynamicSort(property) {","    var sortOrder = 1;","    if (property[0] === '-') {","      sortOrder = -1;","      property = property.substr(1);","    }","","    return function(a, b) {","      var result = (a[property] < b[property]) ? -1 : (a[property] > b[property]) ? 1 : 0;","      return result * sortOrder;","    };","  }","","  function dynamicSortMultiple() {","    var props = arguments;","    return function(obj1, obj2) {","      var i = 0;","      var result = 0;","      var numberOfProperties = props.length;","","      while (result === 0 && i < numberOfProperties) {","        result = dynamicSort(props[i])(obj1, obj2);","        i++;","      }","      return result;","    };","  }","","  // build sort criteria in the format ['firstName', '-lastName']","  var sortArray = [];","  _.each(_.keys(sortCriteria), function(key) {","    if (sortCriteria[key] === -1) sortArray.push('-' + key);","    else sortArray.push(key);","  });","","  data.sort(dynamicSortMultiple.apply(null, sortArray));","  return data;","};",""],"l":{"5":1,"18":1,"20":1,"21":0,"22":0,"23":0,"24":0,"27":0,"28":0,"29":0,"33":1,"34":0,"35":0,"36":0,"37":0,"38":0,"40":0,"41":0,"42":0,"44":0,"49":0,"50":0,"51":0,"52":0,"55":0,"56":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/finders/joins.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/finders/joins.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":1,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":1,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":13,"loc":{"start":{"line":13,"column":29},"end":{"line":13,"column":84}}},"2":{"name":"modelOptions","line":44,"loc":{"start":{"line":44,"column":31},"end":{"line":44,"column":55}}},"3":{"name":"(anonymous_3)","line":58,"loc":{"start":{"line":58,"column":28},"end":{"line":58,"column":43}}},"4":{"name":"(anonymous_4)","line":70,"loc":{"start":{"line":70,"column":33},"end":{"line":70,"column":48}}},"5":{"name":"(anonymous_5)","line":76,"loc":{"start":{"line":76,"column":23},"end":{"line":76,"column":35}}},"6":{"name":"makeModels","line":97,"loc":{"start":{"line":97,"column":29},"end":{"line":97,"column":51}}},"7":{"name":"(anonymous_7)","line":107,"loc":{"start":{"line":107,"column":22},"end":{"line":107,"column":38}}},"8":{"name":"modelize","line":124,"loc":{"start":{"line":124,"column":27},"end":{"line":124,"column":52}}},"9":{"name":"(anonymous_9)","line":128,"loc":{"start":{"line":128,"column":29},"end":{"line":128,"column":43}}},"10":{"name":"(anonymous_10)","line":171,"loc":{"start":{"line":171,"column":25},"end":{"line":171,"column":39}}},"11":{"name":"checkForJoin","line":217,"loc":{"start":{"line":217,"column":31},"end":{"line":217,"column":58}}},"12":{"name":"(anonymous_12)","line":224,"loc":{"start":{"line":224,"column":21},"end":{"line":224,"column":36}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":43}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":38}},"4":{"start":{"line":13,"column":0},"end":{"line":36,"column":2}},"5":{"start":{"line":15,"column":2},"end":{"line":15,"column":27}},"6":{"start":{"line":18,"column":2},"end":{"line":18,"column":27}},"7":{"start":{"line":21,"column":2},"end":{"line":21,"column":29}},"8":{"start":{"line":24,"column":2},"end":{"line":24,"column":29}},"9":{"start":{"line":27,"column":2},"end":{"line":27,"column":39}},"10":{"start":{"line":30,"column":2},"end":{"line":30,"column":22}},"11":{"start":{"line":33,"column":2},"end":{"line":33,"column":34}},"12":{"start":{"line":35,"column":2},"end":{"line":35,"column":14}},"13":{"start":{"line":44,"column":0},"end":{"line":88,"column":2}},"14":{"start":{"line":46,"column":2},"end":{"line":46,"column":18}},"15":{"start":{"line":47,"column":2},"end":{"line":47,"column":12}},"16":{"start":{"line":50,"column":2},"end":{"line":52,"column":4}},"17":{"start":{"line":55,"column":2},"end":{"line":55,"column":26}},"18":{"start":{"line":55,"column":19},"end":{"line":55,"column":26}},"19":{"start":{"line":58,"column":2},"end":{"line":64,"column":5}},"20":{"start":{"line":61,"column":4},"end":{"line":61,"column":35}},"21":{"start":{"line":61,"column":22},"end":{"line":61,"column":35}},"22":{"start":{"line":63,"column":4},"end":{"line":63,"column":16}},"23":{"start":{"line":70,"column":2},"end":{"line":84,"column":5}},"24":{"start":{"line":71,"column":4},"end":{"line":71,"column":19}},"25":{"start":{"line":73,"column":4},"end":{"line":73,"column":47}},"26":{"start":{"line":73,"column":29},"end":{"line":73,"column":47}},"27":{"start":{"line":76,"column":4},"end":{"line":79,"column":7}},"28":{"start":{"line":77,"column":6},"end":{"line":77,"column":42}},"29":{"start":{"line":77,"column":35},"end":{"line":77,"column":42}},"30":{"start":{"line":78,"column":6},"end":{"line":78,"column":26}},"31":{"start":{"line":82,"column":4},"end":{"line":82,"column":28}},"32":{"start":{"line":82,"column":15},"end":{"line":82,"column":28}},"33":{"start":{"line":83,"column":4},"end":{"line":83,"column":22}},"34":{"start":{"line":87,"column":2},"end":{"line":87,"column":61}},"35":{"start":{"line":97,"column":0},"end":{"line":113,"column":2}},"36":{"start":{"line":99,"column":2},"end":{"line":99,"column":18}},"37":{"start":{"line":100,"column":2},"end":{"line":100,"column":18}},"38":{"start":{"line":101,"column":2},"end":{"line":101,"column":12}},"39":{"start":{"line":104,"column":2},"end":{"line":104,"column":63}},"40":{"start":{"line":104,"column":44},"end":{"line":104,"column":63}},"41":{"start":{"line":107,"column":2},"end":{"line":110,"column":5}},"42":{"start":{"line":108,"column":4},"end":{"line":108,"column":33}},"43":{"start":{"line":109,"column":4},"end":{"line":109,"column":23}},"44":{"start":{"line":112,"column":2},"end":{"line":112,"column":16}},"45":{"start":{"line":124,"column":0},"end":{"line":205,"column":2}},"46":{"start":{"line":125,"column":2},"end":{"line":125,"column":18}},"47":{"start":{"line":128,"column":2},"end":{"line":202,"column":5}},"48":{"start":{"line":130,"column":4},"end":{"line":130,"column":24}},"49":{"start":{"line":131,"column":4},"end":{"line":132,"column":19}},"50":{"start":{"line":135,"column":4},"end":{"line":135,"column":63}},"51":{"start":{"line":135,"column":56},"end":{"line":135,"column":63}},"52":{"start":{"line":141,"column":4},"end":{"line":141,"column":84}},"53":{"start":{"line":142,"column":4},"end":{"line":146,"column":5}},"54":{"start":{"line":143,"column":6},"end":{"line":143,"column":43}},"55":{"start":{"line":145,"column":6},"end":{"line":145,"column":30}},"56":{"start":{"line":150,"column":4},"end":{"line":150,"column":54}},"57":{"start":{"line":150,"column":47},"end":{"line":150,"column":54}},"58":{"start":{"line":153,"column":4},"end":{"line":153,"column":67}},"59":{"start":{"line":153,"column":46},"end":{"line":153,"column":67}},"60":{"start":{"line":157,"column":4},"end":{"line":157,"column":67}},"61":{"start":{"line":157,"column":60},"end":{"line":157,"column":67}},"62":{"start":{"line":160,"column":4},"end":{"line":160,"column":40}},"63":{"start":{"line":164,"column":4},"end":{"line":164,"column":33}},"64":{"start":{"line":164,"column":26},"end":{"line":164,"column":33}},"65":{"start":{"line":167,"column":4},"end":{"line":195,"column":5}},"66":{"start":{"line":169,"column":6},"end":{"line":169,"column":23}},"67":{"start":{"line":171,"column":6},"end":{"line":190,"column":9}},"68":{"start":{"line":172,"column":8},"end":{"line":173,"column":18}},"69":{"start":{"line":177,"column":8},"end":{"line":182,"column":9}},"70":{"start":{"line":178,"column":10},"end":{"line":178,"column":49}},"71":{"start":{"line":179,"column":10},"end":{"line":179,"column":57}},"72":{"start":{"line":180,"column":10},"end":{"line":180,"column":67}},"73":{"start":{"line":181,"column":10},"end":{"line":181,"column":37}},"74":{"start":{"line":186,"column":8},"end":{"line":186,"column":61}},"75":{"start":{"line":187,"column":8},"end":{"line":187,"column":55}},"76":{"start":{"line":188,"column":8},"end":{"line":188,"column":65}},"77":{"start":{"line":189,"column":8},"end":{"line":189,"column":35}},"78":{"start":{"line":193,"column":6},"end":{"line":193,"column":27}},"79":{"start":{"line":194,"column":6},"end":{"line":194,"column":13}},"80":{"start":{"line":199,"column":4},"end":{"line":199,"column":43}},"81":{"start":{"line":200,"column":4},"end":{"line":200,"column":65}},"82":{"start":{"line":201,"column":4},"end":{"line":201,"column":73}},"83":{"start":{"line":204,"column":2},"end":{"line":204,"column":15}},"84":{"start":{"line":217,"column":0},"end":{"line":231,"column":2}},"85":{"start":{"line":219,"column":2},"end":{"line":219,"column":19}},"86":{"start":{"line":220,"column":2},"end":{"line":220,"column":25}},"87":{"start":{"line":221,"column":2},"end":{"line":221,"column":18}},"88":{"start":{"line":224,"column":2},"end":{"line":228,"column":5}},"89":{"start":{"line":225,"column":4},"end":{"line":225,"column":35}},"90":{"start":{"line":225,"column":28},"end":{"line":225,"column":35}},"91":{"start":{"line":226,"column":4},"end":{"line":226,"column":22}},"92":{"start":{"line":227,"column":4},"end":{"line":227,"column":23}},"93":{"start":{"line":230,"column":2},"end":{"line":230,"column":49}}},"branchMap":{"1":{"line":18,"type":"binary-expr","locations":[{"start":{"line":18,"column":15},"end":{"line":18,"column":20}},{"start":{"line":18,"column":24},"end":{"line":18,"column":26}}]},"2":{"line":21,"type":"binary-expr","locations":[{"start":{"line":21,"column":16},"end":{"line":21,"column":22}},{"start":{"line":21,"column":26},"end":{"line":21,"column":28}}]},"3":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":16},"end":{"line":24,"column":22}},{"start":{"line":24,"column":26},"end":{"line":24,"column":28}}]},"4":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":21},"end":{"line":27,"column":32}},{"start":{"line":27,"column":36},"end":{"line":27,"column":38}}]},"5":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":2},"end":{"line":55,"column":2}},{"start":{"line":55,"column":2},"end":{"line":55,"column":2}}]},"6":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":4},"end":{"line":61,"column":4}},{"start":{"line":61,"column":4},"end":{"line":61,"column":4}}]},"7":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":4},"end":{"line":73,"column":4}},{"start":{"line":73,"column":4},"end":{"line":73,"column":4}}]},"8":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":6},"end":{"line":77,"column":6}},{"start":{"line":77,"column":6},"end":{"line":77,"column":6}}]},"9":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":4},"end":{"line":82,"column":4}},{"start":{"line":82,"column":4},"end":{"line":82,"column":4}}]},"10":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":2},"end":{"line":104,"column":2}},{"start":{"line":104,"column":2},"end":{"line":104,"column":2}}]},"11":{"line":104,"type":"binary-expr","locations":[{"start":{"line":104,"column":6},"end":{"line":104,"column":18}},{"start":{"line":104,"column":22},"end":{"line":104,"column":42}}]},"12":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":4},"end":{"line":135,"column":4}},{"start":{"line":135,"column":4},"end":{"line":135,"column":4}}]},"13":{"line":135,"type":"binary-expr","locations":[{"start":{"line":135,"column":8},"end":{"line":135,"column":31}},{"start":{"line":135,"column":35},"end":{"line":135,"column":54}}]},"14":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":4},"end":{"line":142,"column":4}},{"start":{"line":142,"column":4},"end":{"line":142,"column":4}}]},"15":{"line":150,"type":"if","locations":[{"start":{"line":150,"column":4},"end":{"line":150,"column":4}},{"start":{"line":150,"column":4},"end":{"line":150,"column":4}}]},"16":{"line":150,"type":"binary-expr","locations":[{"start":{"line":150,"column":8},"end":{"line":150,"column":12}},{"start":{"line":150,"column":16},"end":{"line":150,"column":45}}]},"17":{"line":153,"type":"if","locations":[{"start":{"line":153,"column":4},"end":{"line":153,"column":4}},{"start":{"line":153,"column":4},"end":{"line":153,"column":4}}]},"18":{"line":153,"type":"binary-expr","locations":[{"start":{"line":153,"column":8},"end":{"line":153,"column":12}},{"start":{"line":153,"column":16},"end":{"line":153,"column":44}}]},"19":{"line":157,"type":"if","locations":[{"start":{"line":157,"column":4},"end":{"line":157,"column":4}},{"start":{"line":157,"column":4},"end":{"line":157,"column":4}}]},"20":{"line":157,"type":"binary-expr","locations":[{"start":{"line":157,"column":8},"end":{"line":157,"column":15}},{"start":{"line":157,"column":19},"end":{"line":157,"column":58}}]},"21":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":4},"end":{"line":164,"column":4}},{"start":{"line":164,"column":4},"end":{"line":164,"column":4}}]},"22":{"line":167,"type":"if","locations":[{"start":{"line":167,"column":4},"end":{"line":167,"column":4}},{"start":{"line":167,"column":4},"end":{"line":167,"column":4}}]},"23":{"line":177,"type":"if","locations":[{"start":{"line":177,"column":8},"end":{"line":177,"column":8}},{"start":{"line":177,"column":8},"end":{"line":177,"column":8}}]},"24":{"line":225,"type":"if","locations":[{"start":{"line":225,"column":4},"end":{"line":225,"column":4}},{"start":{"line":225,"column":4},"end":{"line":225,"column":4}}]}},"code":["/**"," * Module Dependencies"," */","","var _ = require('lodash');","var utils = require('../../utils/helpers');","var hop = utils.object.hasOwnProperty;","","/**"," * Logic For Handling Joins inside a Query Results Object"," */","","var Joins = module.exports = function(joins, values, identity, schema, collections) {","","  this.identity = identity;","","  // Hold Joins specified in the criteria","  this.joins = joins || [];","","  // Hold the result values","  this.values = values || [];","","  // Hold the overall schema","  this.schema = schema || {};","","  // Hold all the Waterline collections so we can make models","  this.collections = collections || {};","","  // Build up modelOptions","  this.modelOptions();","","  // Modelize values","  this.models = this.makeModels();","","  return this;","};","","/**"," * Build up Join Options that will be passed down to a Model instance."," *"," * @api private"," */","","Joins.prototype.modelOptions = function modelOptions() {","","  var self = this;","  var joins;","","  // Build Model Options, determines what associations to render in toObject","  this.options = {","    showJoins: !!this.joins","  };","","  // If no joins were used, just return","  if (!this.joins) return;","","  // Map out join names to pass down to the model instance","  joins = this.joins.filter(function(join) {","","    // If the value is not being selected, don't add it to the array","    if (!join.select) return false;","","    return join;","  });","","  // Map out join key names and attach to the options object.","  // For normal assoiciations, use the child table name that is being joined. For many-to-many","  // associations the child table name won't work so grab the alias used and use that for the","  // join name. It will be the one that is transformed.","  this.options.joins = joins.map(function(join) {","    var child = [];","    // If a junctionTable was not used, return the child table","    if (!join.junctionTable) return join.child;","","    // Find the original alias for the join","    self.joins.forEach(function(j) {","      if (j.child !== join.parent) return;","      child.push(j.alias);","    });","","    // If a child was found, return it otherwise just return the original child join","    if (child) return child;","    return join.child;","  });","","  // Flatten joins","  this.options.joins = _.uniq(_.flatten(this.options.joins));","};","","/**"," * Transform Values into instantiated Models."," *"," * @return {Array}"," * @api private"," */","","Joins.prototype.makeModels = function makeModels() {","","  var self = this;","  var models = [];","  var model;","","  // If values are invalid (not an array), return them early.","  if (!this.values || !this.values.forEach) return this.values;","","  // Make each result an instance of model","  this.values.forEach(function(value) {","    model = self.modelize(value);","    models.push(model);","  });","","  return models;","};","","/**"," * Handle a single Result and inspect it's values for anything"," * that needs to become a Model instance."," *"," * @param {Object} value"," * @return {Object}"," * @api private"," */","","Joins.prototype.modelize = function modelize(value) {","  var self = this;","","  // Look at each key in the object and see if it was used in a join","  Object.keys(value).forEach(function(key) {","","    var joinKey = false;","    var attr,","        usedInJoin;","","    // If showJoins wasn't set or no joins were found there is nothing to modelize","    if (!self.options.showJoins || !self.options.joins) return;","","    // Look at the schema for an attribute and check if it's a foreign key","    // or a virtual hasMany collection attribute","","    // Check if there is a transformation on this attribute","    var transformer = self.collections[self.identity]._transformer._transformations;","    if (hop(transformer, key)) {","      attr = self.schema[transformer[key]];","    } else {","      attr = self.schema[key];","    }","","    // If an attribute was found but it's not a model, this means it's a normal","    // key/value attribute and not an association so there is no need to modelize it.","    if (attr && !attr.hasOwnProperty('model')) return;","","    // If the attribute has a `model` property, the joinKey is the collection of the model","    if (attr && attr.hasOwnProperty('model')) joinKey = attr.model;","","    // If the attribute is a foreign key but it was not populated, just leave the foreign key","    // as it is and don't try and modelize it.","    if (joinKey && self.options.joins.indexOf(joinKey) < 0) return;","","    // Check if the key was used in a join","    usedInJoin = self.checkForJoin(key);","","    // If the attribute wasn't used in the join, don't turn it into a model instance.","    // NOTE: Not sure if this is correct or not?","    if (!usedInJoin.used) return;","","    // If the attribute is an array of child values, for each one make a model out of it.","    if (Array.isArray(value[key])) {","","      var records = [];","","      value[key].forEach(function(val) {","        var collection,","            model;","","        // If there is a joinKey this means it's a belongsTo association so the collection","        // containing the proper model will be the name of the joinKey model.","        if (joinKey) {","          collection = self.collections[joinKey];","          val = collection._transformer.unserialize(val);","          model = new collection._model(val, { showJoins: false });","          return records.push(model);","        }","","        // Otherwise look at the join used and determine which key should be used to get","        // the proper model from the collections.","        collection = self.collections[usedInJoin.join.child];","        val = collection._transformer.unserialize(val);","        model = new collection._model(val, { showJoins: false });","        return records.push(model);","      });","","      // Set the value to the array of model values","      value[key] = records;","      return;","    }","","    // If the value isn't an array it's a populated foreign key so modelize it and attach","    // it directly on the attribute","    collection = self.collections[joinKey];","    value[key] = collection._transformer.unserialize(value[key]);","    value[key] = new collection._model(value[key], { showJoins: false });","  });","","  return value;","};","","/**"," * Test if an attribute was used in a join."," * Requires generating a key to test against an attribute because the model process"," * will be run before any transformations have taken place."," *"," * @param {String} key"," * @return {Object}"," * @api private"," */","","Joins.prototype.checkForJoin = function checkForJoin(key) {","","  var generatedKey;","  var usedInJoin = false;","  var relatedJoin;","","  // Loop through each join and see if the given key matches a join used","  this.joins.forEach(function(join) {","    if (join.alias !== key) return;","    usedInJoin = true;","    relatedJoin = join;","  });","","  return { used: usedInJoin, join: relatedJoin };","};",""],"l":{"5":1,"6":1,"7":1,"13":1,"15":0,"18":0,"21":0,"24":0,"27":0,"30":0,"33":0,"35":0,"44":1,"46":0,"47":0,"50":0,"55":0,"58":0,"61":0,"63":0,"70":0,"71":0,"73":0,"76":0,"77":0,"78":0,"82":0,"83":0,"87":0,"97":1,"99":0,"100":0,"101":0,"104":0,"107":0,"108":0,"109":0,"112":0,"124":1,"125":0,"128":0,"130":0,"131":0,"135":0,"141":0,"142":0,"143":0,"145":0,"150":0,"153":0,"157":0,"160":0,"164":0,"167":0,"169":0,"171":0,"172":0,"177":0,"178":0,"179":0,"180":0,"181":0,"186":0,"187":0,"188":0,"189":0,"193":0,"194":0,"199":0,"200":0,"201":0,"204":0,"217":1,"219":0,"220":0,"221":0,"224":0,"225":0,"226":0,"227":0,"230":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/finders/operations.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/finders/operations.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1,"29":0,"30":0,"31":0,"32":1,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":1,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":1,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":1,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":1,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":1,"129":0,"130":0,"131":0,"132":0,"133":1,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":1,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":1,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":1,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":1,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0},"fnMap":{"1":{"name":"(anonymous_1)","line":19,"loc":{"start":{"line":19,"column":34},"end":{"line":19,"column":70}}},"2":{"name":"run","line":62,"loc":{"start":{"line":62,"column":27},"end":{"line":62,"column":44}}},"3":{"name":"(anonymous_3)","line":70,"loc":{"start":{"line":70,"column":78},"end":{"line":70,"column":101}}},"4":{"name":"(anonymous_4)","line":81,"loc":{"start":{"line":81,"column":33},"end":{"line":81,"column":47}}},"5":{"name":"_seedCache","line":105,"loc":{"start":{"line":105,"column":34},"end":{"line":105,"column":56}}},"6":{"name":"(anonymous_6)","line":109,"loc":{"start":{"line":109,"column":53},"end":{"line":109,"column":67}}},"7":{"name":"_buildOperations","line":121,"loc":{"start":{"line":121,"column":40},"end":{"line":121,"column":68}}},"8":{"name":"_stageOperations","line":167,"loc":{"start":{"line":167,"column":40},"end":{"line":167,"column":79}}},"9":{"name":"(anonymous_9)","line":182,"loc":{"start":{"line":182,"column":35},"end":{"line":182,"column":56}}},"10":{"name":"(anonymous_10)","line":198,"loc":{"start":{"line":198,"column":42},"end":{"line":198,"column":62}}},"11":{"name":"(anonymous_11)","line":218,"loc":{"start":{"line":218,"column":24},"end":{"line":218,"column":43}}},"12":{"name":"_createParentOperation","line":242,"loc":{"start":{"line":242,"column":46},"end":{"line":242,"column":91}}},"13":{"name":"(anonymous_13)","line":260,"loc":{"start":{"line":260,"column":29},"end":{"line":260,"column":44}}},"14":{"name":"_getConnections","line":312,"loc":{"start":{"line":312,"column":39},"end":{"line":312,"column":66}}},"15":{"name":"(anonymous_15)","line":327,"loc":{"start":{"line":327,"column":30},"end":{"line":327,"column":45}}},"16":{"name":"getConnection","line":332,"loc":{"start":{"line":332,"column":4},"end":{"line":332,"column":37}}},"17":{"name":"(anonymous_17)","line":347,"loc":{"start":{"line":347,"column":51},"end":{"line":347,"column":71}}},"18":{"name":"_runOperation","line":400,"loc":{"start":{"line":400,"column":37},"end":{"line":400,"column":98}}},"19":{"name":"_execChildOpts","line":426,"loc":{"start":{"line":426,"column":38},"end":{"line":426,"column":81}}},"20":{"name":"(anonymous_20)","line":432,"loc":{"start":{"line":432,"column":38},"end":{"line":432,"column":58}}},"21":{"name":"(anonymous_21)","line":436,"loc":{"start":{"line":436,"column":21},"end":{"line":436,"column":42}}},"22":{"name":"_buildChildOpts","line":458,"loc":{"start":{"line":458,"column":39},"end":{"line":458,"column":83}}},"23":{"name":"(anonymous_23)","line":464,"loc":{"start":{"line":464,"column":30},"end":{"line":464,"column":51}}},"24":{"name":"(anonymous_24)","line":472,"loc":{"start":{"line":472,"column":26},"end":{"line":472,"column":43}}},"25":{"name":"(anonymous_25)","line":522,"loc":{"start":{"line":522,"column":22},"end":{"line":522,"column":39}}},"26":{"name":"(anonymous_26)","line":573,"loc":{"start":{"line":573,"column":5},"end":{"line":573,"column":19}}},"27":{"name":"_collectChildResults","line":589,"loc":{"start":{"line":589,"column":44},"end":{"line":589,"column":84}}},"28":{"name":"(anonymous_28)","line":599,"loc":{"start":{"line":599,"column":25},"end":{"line":599,"column":45}}},"29":{"name":"(anonymous_29)","line":600,"loc":{"start":{"line":600,"column":55},"end":{"line":600,"column":77}}},"30":{"name":"_runChildOperations","line":636,"loc":{"start":{"line":636,"column":43},"end":{"line":636,"column":102}}},"31":{"name":"(anonymous_31)","line":644,"loc":{"start":{"line":644,"column":72},"end":{"line":644,"column":94}}},"32":{"name":"(anonymous_32)","line":658,"loc":{"start":{"line":658,"column":14},"end":{"line":658,"column":31}}},"33":{"name":"(anonymous_33)","line":688,"loc":{"start":{"line":688,"column":59},"end":{"line":688,"column":81}}},"34":{"name":"(anonymous_34)","line":692,"loc":{"start":{"line":692,"column":19},"end":{"line":692,"column":33}}},"35":{"name":"(anonymous_35)","line":693,"loc":{"start":{"line":693,"column":24},"end":{"line":693,"column":39}}},"36":{"name":"_findCollectionPK","line":714,"loc":{"start":{"line":714,"column":41},"end":{"line":714,"column":84}}}},"statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":6,"column":26}},"2":{"start":{"line":7,"column":0},"end":{"line":7,"column":29}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":43}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":49}},"5":{"start":{"line":10,"column":0},"end":{"line":10,"column":49}},"6":{"start":{"line":19,"column":0},"end":{"line":43,"column":2}},"7":{"start":{"line":22,"column":2},"end":{"line":22,"column":18}},"8":{"start":{"line":25,"column":2},"end":{"line":25,"column":25}},"9":{"start":{"line":28,"column":2},"end":{"line":28,"column":27}},"10":{"start":{"line":31,"column":2},"end":{"line":31,"column":23}},"11":{"start":{"line":34,"column":2},"end":{"line":34,"column":27}},"12":{"start":{"line":37,"column":2},"end":{"line":37,"column":20}},"13":{"start":{"line":40,"column":2},"end":{"line":40,"column":44}},"14":{"start":{"line":42,"column":2},"end":{"line":42,"column":14}},"15":{"start":{"line":62,"column":0},"end":{"line":88,"column":2}},"16":{"start":{"line":64,"column":2},"end":{"line":64,"column":18}},"17":{"start":{"line":67,"column":2},"end":{"line":67,"column":41}},"18":{"start":{"line":70,"column":2},"end":{"line":86,"column":5}},"19":{"start":{"line":72,"column":4},"end":{"line":72,"column":28}},"20":{"start":{"line":72,"column":13},"end":{"line":72,"column":28}},"21":{"start":{"line":75,"column":4},"end":{"line":75,"column":46}},"22":{"start":{"line":78,"column":4},"end":{"line":78,"column":93}},"23":{"start":{"line":78,"column":38},"end":{"line":78,"column":93}},"24":{"start":{"line":81,"column":4},"end":{"line":84,"column":7}},"25":{"start":{"line":82,"column":6},"end":{"line":82,"column":30}},"26":{"start":{"line":82,"column":15},"end":{"line":82,"column":30}},"27":{"start":{"line":83,"column":6},"end":{"line":83,"column":66}},"28":{"start":{"line":105,"column":0},"end":{"line":112,"column":2}},"29":{"start":{"line":106,"column":2},"end":{"line":106,"column":18}},"30":{"start":{"line":109,"column":2},"end":{"line":111,"column":5}},"31":{"start":{"line":110,"column":4},"end":{"line":110,"column":25}},"32":{"start":{"line":121,"column":0},"end":{"line":158,"column":2}},"33":{"start":{"line":123,"column":2},"end":{"line":123,"column":18}},"34":{"start":{"line":124,"column":2},"end":{"line":124,"column":22}},"35":{"start":{"line":127,"column":2},"end":{"line":144,"column":3}},"36":{"start":{"line":130,"column":4},"end":{"line":130,"column":79}},"37":{"start":{"line":133,"column":4},"end":{"line":133,"column":67}},"38":{"start":{"line":134,"column":4},"end":{"line":134,"column":76}},"39":{"start":{"line":134,"column":25},"end":{"line":134,"column":76}},"40":{"start":{"line":136,"column":4},"end":{"line":141,"column":7}},"41":{"start":{"line":143,"column":4},"end":{"line":143,"column":22}},"42":{"start":{"line":148,"column":2},"end":{"line":148,"column":43}},"43":{"start":{"line":155,"column":2},"end":{"line":155,"column":50}},"44":{"start":{"line":157,"column":2},"end":{"line":157,"column":20}},"45":{"start":{"line":167,"column":0},"end":{"line":232,"column":2}},"46":{"start":{"line":169,"column":2},"end":{"line":169,"column":18}},"47":{"start":{"line":170,"column":2},"end":{"line":170,"column":22}},"48":{"start":{"line":173,"column":2},"end":{"line":173,"column":75}},"49":{"start":{"line":176,"column":2},"end":{"line":176,"column":69}},"50":{"start":{"line":179,"column":2},"end":{"line":179,"column":38}},"51":{"start":{"line":182,"column":2},"end":{"line":229,"column":5}},"52":{"start":{"line":187,"column":4},"end":{"line":187,"column":85}},"53":{"start":{"line":187,"column":78},"end":{"line":187,"column":85}},"54":{"start":{"line":196,"column":4},"end":{"line":196,"column":23}},"55":{"start":{"line":198,"column":4},"end":{"line":226,"column":7}},"56":{"start":{"line":200,"column":6},"end":{"line":200,"column":73}},"57":{"start":{"line":201,"column":6},"end":{"line":201,"column":70}},"58":{"start":{"line":203,"column":6},"end":{"line":208,"column":8}},"59":{"start":{"line":211,"column":6},"end":{"line":214,"column":7}},"60":{"start":{"line":212,"column":8},"end":{"line":212,"column":34}},"61":{"start":{"line":213,"column":8},"end":{"line":213,"column":15}},"62":{"start":{"line":217,"column":6},"end":{"line":217,"column":24}},"63":{"start":{"line":218,"column":6},"end":{"line":222,"column":9}},"64":{"start":{"line":219,"column":8},"end":{"line":219,"column":55}},"65":{"start":{"line":219,"column":48},"end":{"line":219,"column":55}},"66":{"start":{"line":220,"column":8},"end":{"line":220,"column":35}},"67":{"start":{"line":221,"column":8},"end":{"line":221,"column":21}},"68":{"start":{"line":224,"column":6},"end":{"line":224,"column":24}},"69":{"start":{"line":224,"column":17},"end":{"line":224,"column":24}},"70":{"start":{"line":225,"column":6},"end":{"line":225,"column":32}},"71":{"start":{"line":228,"column":4},"end":{"line":228,"column":46}},"72":{"start":{"line":231,"column":2},"end":{"line":231,"column":20}},"73":{"start":{"line":242,"column":0},"end":{"line":302,"column":2}},"74":{"start":{"line":244,"column":2},"end":{"line":244,"column":50}},"75":{"start":{"line":245,"column":2},"end":{"line":247,"column":17}},"76":{"start":{"line":251,"column":2},"end":{"line":279,"column":3}},"77":{"start":{"line":253,"column":4},"end":{"line":253,"column":57}},"78":{"start":{"line":254,"column":4},"end":{"line":254,"column":45}},"79":{"start":{"line":257,"column":4},"end":{"line":257,"column":33}},"80":{"start":{"line":260,"column":4},"end":{"line":263,"column":7}},"81":{"start":{"line":261,"column":6},"end":{"line":261,"column":66}},"82":{"start":{"line":261,"column":59},"end":{"line":261,"column":66}},"83":{"start":{"line":262,"column":6},"end":{"line":262,"column":30}},"84":{"start":{"line":266,"column":4},"end":{"line":278,"column":5}},"85":{"start":{"line":267,"column":6},"end":{"line":272,"column":9}},"86":{"start":{"line":275,"column":6},"end":{"line":275,"column":30}},"87":{"start":{"line":277,"column":6},"end":{"line":277,"column":23}},"88":{"start":{"line":282,"column":2},"end":{"line":282,"column":47}},"89":{"start":{"line":283,"column":2},"end":{"line":283,"column":27}},"90":{"start":{"line":285,"column":2},"end":{"line":285,"column":63}},"91":{"start":{"line":288,"column":2},"end":{"line":290,"column":3}},"92":{"start":{"line":289,"column":4},"end":{"line":289,"column":57}},"93":{"start":{"line":292,"column":2},"end":{"line":292,"column":43}},"94":{"start":{"line":294,"column":2},"end":{"line":299,"column":5}},"95":{"start":{"line":301,"column":2},"end":{"line":301,"column":19}},"96":{"start":{"line":312,"column":0},"end":{"line":384,"column":2}},"97":{"start":{"line":314,"column":2},"end":{"line":314,"column":18}},"98":{"start":{"line":315,"column":2},"end":{"line":315,"column":23}},"99":{"start":{"line":318,"column":2},"end":{"line":322,"column":4}},"100":{"start":{"line":327,"column":2},"end":{"line":382,"column":5}},"101":{"start":{"line":328,"column":4},"end":{"line":328,"column":19}},"102":{"start":{"line":329,"column":4},"end":{"line":329,"column":25}},"103":{"start":{"line":330,"column":4},"end":{"line":330,"column":24}},"104":{"start":{"line":332,"column":4},"end":{"line":337,"column":5}},"105":{"start":{"line":333,"column":6},"end":{"line":333,"column":68}},"106":{"start":{"line":334,"column":6},"end":{"line":334,"column":64}},"107":{"start":{"line":335,"column":6},"end":{"line":335,"column":98}},"108":{"start":{"line":336,"column":6},"end":{"line":336,"column":41}},"109":{"start":{"line":344,"column":4},"end":{"line":380,"column":5}},"110":{"start":{"line":347,"column":6},"end":{"line":349,"column":9}},"111":{"start":{"line":348,"column":8},"end":{"line":348,"column":46}},"112":{"start":{"line":352,"column":6},"end":{"line":352,"column":66}},"113":{"start":{"line":355,"column":6},"end":{"line":355,"column":52}},"114":{"start":{"line":356,"column":6},"end":{"line":356,"column":50}},"115":{"start":{"line":359,"column":6},"end":{"line":359,"column":53}},"116":{"start":{"line":360,"column":6},"end":{"line":360,"column":51}},"117":{"start":{"line":361,"column":6},"end":{"line":361,"column":50}},"118":{"start":{"line":364,"column":6},"end":{"line":364,"column":74}},"119":{"start":{"line":365,"column":6},"end":{"line":365,"column":72}},"120":{"start":{"line":366,"column":6},"end":{"line":366,"column":68}},"121":{"start":{"line":370,"column":6},"end":{"line":370,"column":75}},"122":{"start":{"line":374,"column":6},"end":{"line":374,"column":52}},"123":{"start":{"line":375,"column":6},"end":{"line":375,"column":50}},"124":{"start":{"line":377,"column":6},"end":{"line":377,"column":53}},"125":{"start":{"line":378,"column":6},"end":{"line":378,"column":51}},"126":{"start":{"line":379,"column":6},"end":{"line":379,"column":67}},"127":{"start":{"line":383,"column":2},"end":{"line":383,"column":21}},"128":{"start":{"line":400,"column":0},"end":{"line":413,"column":2}},"129":{"start":{"line":403,"column":2},"end":{"line":405,"column":3}},"130":{"start":{"line":404,"column":4},"end":{"line":404,"column":70}},"131":{"start":{"line":408,"column":2},"end":{"line":408,"column":70}},"132":{"start":{"line":411,"column":2},"end":{"line":411,"column":43}},"133":{"start":{"line":426,"column":0},"end":{"line":441,"column":2}},"134":{"start":{"line":428,"column":2},"end":{"line":428,"column":18}},"135":{"start":{"line":432,"column":2},"end":{"line":439,"column":5}},"136":{"start":{"line":433,"column":4},"end":{"line":433,"column":28}},"137":{"start":{"line":433,"column":13},"end":{"line":433,"column":28}},"138":{"start":{"line":436,"column":4},"end":{"line":438,"column":11}},"139":{"start":{"line":437,"column":6},"end":{"line":437,"column":44}},"140":{"start":{"line":458,"column":0},"end":{"line":576,"column":2}},"141":{"start":{"line":460,"column":2},"end":{"line":460,"column":18}},"142":{"start":{"line":461,"column":2},"end":{"line":461,"column":16}},"143":{"start":{"line":464,"column":2},"end":{"line":575,"column":5}},"144":{"start":{"line":466,"column":4},"end":{"line":466,"column":23}},"145":{"start":{"line":467,"column":4},"end":{"line":467,"column":21}},"146":{"start":{"line":468,"column":4},"end":{"line":468,"column":16}},"147":{"start":{"line":472,"column":4},"end":{"line":478,"column":7}},"148":{"start":{"line":474,"column":6},"end":{"line":474,"column":63}},"149":{"start":{"line":474,"column":56},"end":{"line":474,"column":63}},"150":{"start":{"line":475,"column":6},"end":{"line":475,"column":107}},"151":{"start":{"line":475,"column":100},"end":{"line":475,"column":107}},"152":{"start":{"line":476,"column":6},"end":{"line":476,"column":48}},"153":{"start":{"line":481,"column":4},"end":{"line":481,"column":44}},"154":{"start":{"line":481,"column":30},"end":{"line":481,"column":44}},"155":{"start":{"line":484,"column":4},"end":{"line":484,"column":22}},"156":{"start":{"line":485,"column":4},"end":{"line":485,"column":43}},"157":{"start":{"line":487,"column":4},"end":{"line":487,"column":26}},"158":{"start":{"line":490,"column":4},"end":{"line":515,"column":5}},"159":{"start":{"line":491,"column":6},"end":{"line":491,"column":57}},"160":{"start":{"line":492,"column":6},"end":{"line":492,"column":47}},"161":{"start":{"line":493,"column":6},"end":{"line":493,"column":54}},"162":{"start":{"line":496,"column":6},"end":{"line":511,"column":7}},"163":{"start":{"line":497,"column":8},"end":{"line":510,"column":9}},"164":{"start":{"line":498,"column":10},"end":{"line":498,"column":36}},"165":{"start":{"line":502,"column":10},"end":{"line":507,"column":11}},"166":{"start":{"line":503,"column":12},"end":{"line":503,"column":84}},"167":{"start":{"line":504,"column":12},"end":{"line":504,"column":25}},"168":{"start":{"line":505,"column":12},"end":{"line":505,"column":50}},"169":{"start":{"line":506,"column":12},"end":{"line":506,"column":37}},"170":{"start":{"line":509,"column":10},"end":{"line":509,"column":44}},"171":{"start":{"line":514,"column":6},"end":{"line":514,"column":49}},"172":{"start":{"line":518,"column":4},"end":{"line":518,"column":44}},"173":{"start":{"line":521,"column":4},"end":{"line":554,"column":5}},"174":{"start":{"line":522,"column":6},"end":{"line":541,"column":9}},"175":{"start":{"line":524,"column":8},"end":{"line":524,"column":48}},"176":{"start":{"line":525,"column":8},"end":{"line":525,"column":55}},"177":{"start":{"line":528,"column":8},"end":{"line":528,"column":87}},"178":{"start":{"line":528,"column":50},"end":{"line":528,"column":87}},"179":{"start":{"line":529,"column":8},"end":{"line":529,"column":90}},"180":{"start":{"line":529,"column":51},"end":{"line":529,"column":90}},"181":{"start":{"line":533,"column":8},"end":{"line":539,"column":11}},"182":{"start":{"line":546,"column":6},"end":{"line":552,"column":9}},"183":{"start":{"line":557,"column":4},"end":{"line":560,"column":5}},"184":{"start":{"line":558,"column":6},"end":{"line":558,"column":27}},"185":{"start":{"line":559,"column":6},"end":{"line":559,"column":20}},"186":{"start":{"line":562,"column":4},"end":{"line":567,"column":7}},"187":{"start":{"line":570,"column":4},"end":{"line":570,"column":25}},"188":{"start":{"line":572,"column":4},"end":{"line":572,"column":11}},"189":{"start":{"line":574,"column":4},"end":{"line":574,"column":18}},"190":{"start":{"line":589,"column":0},"end":{"line":622,"column":2}},"191":{"start":{"line":591,"column":2},"end":{"line":591,"column":18}},"192":{"start":{"line":592,"column":2},"end":{"line":592,"column":31}},"193":{"start":{"line":593,"column":2},"end":{"line":593,"column":12}},"194":{"start":{"line":595,"column":2},"end":{"line":595,"column":54}},"195":{"start":{"line":595,"column":34},"end":{"line":595,"column":54}},"196":{"start":{"line":599,"column":2},"end":{"line":620,"column":9}},"197":{"start":{"line":600,"column":4},"end":{"line":619,"column":7}},"198":{"start":{"line":601,"column":6},"end":{"line":601,"column":32}},"199":{"start":{"line":601,"column":15},"end":{"line":601,"column":32}},"200":{"start":{"line":605,"column":6},"end":{"line":607,"column":7}},"201":{"start":{"line":606,"column":8},"end":{"line":606,"column":65}},"202":{"start":{"line":610,"column":6},"end":{"line":610,"column":68}},"203":{"start":{"line":611,"column":6},"end":{"line":611,"column":77}},"204":{"start":{"line":614,"column":6},"end":{"line":614,"column":54}},"205":{"start":{"line":615,"column":6},"end":{"line":615,"column":74}},"206":{"start":{"line":617,"column":6},"end":{"line":617,"column":10}},"207":{"start":{"line":618,"column":6},"end":{"line":618,"column":13}},"208":{"start":{"line":636,"column":0},"end":{"line":704,"column":2}},"209":{"start":{"line":637,"column":2},"end":{"line":637,"column":18}},"210":{"start":{"line":643,"column":2},"end":{"line":648,"column":3}},"211":{"start":{"line":644,"column":4},"end":{"line":647,"column":7}},"212":{"start":{"line":645,"column":6},"end":{"line":645,"column":30}},"213":{"start":{"line":645,"column":15},"end":{"line":645,"column":30}},"214":{"start":{"line":646,"column":6},"end":{"line":646,"column":23}},"215":{"start":{"line":652,"column":2},"end":{"line":652,"column":19}},"216":{"start":{"line":655,"column":2},"end":{"line":655,"column":45}},"217":{"start":{"line":658,"column":2},"end":{"line":660,"column":5}},"218":{"start":{"line":659,"column":4},"end":{"line":659,"column":45}},"219":{"start":{"line":662,"column":2},"end":{"line":662,"column":20}},"220":{"start":{"line":663,"column":2},"end":{"line":663,"column":40}},"221":{"start":{"line":666,"column":2},"end":{"line":680,"column":3}},"222":{"start":{"line":667,"column":4},"end":{"line":667,"column":54}},"223":{"start":{"line":670,"column":4},"end":{"line":676,"column":5}},"224":{"start":{"line":671,"column":6},"end":{"line":675,"column":7}},"225":{"start":{"line":672,"column":8},"end":{"line":672,"column":34}},"226":{"start":{"line":674,"column":8},"end":{"line":674,"column":42}},"227":{"start":{"line":678,"column":4},"end":{"line":678,"column":29}},"228":{"start":{"line":679,"column":4},"end":{"line":679,"column":48}},"229":{"start":{"line":682,"column":2},"end":{"line":682,"column":53}},"230":{"start":{"line":685,"column":2},"end":{"line":685,"column":59}},"231":{"start":{"line":686,"column":2},"end":{"line":686,"column":35}},"232":{"start":{"line":688,"column":2},"end":{"line":703,"column":5}},"233":{"start":{"line":689,"column":4},"end":{"line":689,"column":28}},"234":{"start":{"line":689,"column":13},"end":{"line":689,"column":28}},"235":{"start":{"line":692,"column":4},"end":{"line":696,"column":7}},"236":{"start":{"line":693,"column":6},"end":{"line":695,"column":9}},"237":{"start":{"line":694,"column":8},"end":{"line":694,"column":104}},"238":{"start":{"line":694,"column":65},"end":{"line":694,"column":104}},"239":{"start":{"line":699,"column":4},"end":{"line":699,"column":53}},"240":{"start":{"line":700,"column":4},"end":{"line":700,"column":74}},"241":{"start":{"line":702,"column":4},"end":{"line":702,"column":21}},"242":{"start":{"line":714,"column":0},"end":{"line":726,"column":2}},"243":{"start":{"line":715,"column":2},"end":{"line":715,"column":9}},"244":{"start":{"line":717,"column":2},"end":{"line":723,"column":3}},"245":{"start":{"line":718,"column":4},"end":{"line":718,"column":89}},"246":{"start":{"line":719,"column":4},"end":{"line":722,"column":5}},"247":{"start":{"line":720,"column":6},"end":{"line":720,"column":40}},"248":{"start":{"line":721,"column":6},"end":{"line":721,"column":12}},"249":{"start":{"line":725,"column":2},"end":{"line":725,"column":20}}},"branchMap":{"1":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":4},"end":{"line":72,"column":4}},{"start":{"line":72,"column":4},"end":{"line":72,"column":4}}]},"2":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":4},"end":{"line":78,"column":4}},{"start":{"line":78,"column":4},"end":{"line":78,"column":4}}]},"3":{"line":78,"type":"binary-expr","locations":[{"start":{"line":78,"column":8},"end":{"line":78,"column":16}},{"start":{"line":78,"column":20},"end":{"line":78,"column":36}}]},"4":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":6},"end":{"line":82,"column":6}},{"start":{"line":82,"column":6},"end":{"line":82,"column":6}}]},"5":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":2},"end":{"line":127,"column":2}},{"start":{"line":127,"column":2},"end":{"line":127,"column":2}}]},"6":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":4},"end":{"line":134,"column":4}},{"start":{"line":134,"column":4},"end":{"line":134,"column":4}}]},"7":{"line":187,"type":"if","locations":[{"start":{"line":187,"column":4},"end":{"line":187,"column":4}},{"start":{"line":187,"column":4},"end":{"line":187,"column":4}}]},"8":{"line":187,"type":"binary-expr","locations":[{"start":{"line":187,"column":8},"end":{"line":187,"column":39}},{"start":{"line":187,"column":43},"end":{"line":187,"column":76}}]},"9":{"line":211,"type":"if","locations":[{"start":{"line":211,"column":6},"end":{"line":211,"column":6}},{"start":{"line":211,"column":6},"end":{"line":211,"column":6}}]},"10":{"line":219,"type":"if","locations":[{"start":{"line":219,"column":8},"end":{"line":219,"column":8}},{"start":{"line":219,"column":8},"end":{"line":219,"column":8}}]},"11":{"line":224,"type":"if","locations":[{"start":{"line":224,"column":6},"end":{"line":224,"column":6}},{"start":{"line":224,"column":6},"end":{"line":224,"column":6}}]},"12":{"line":251,"type":"if","locations":[{"start":{"line":251,"column":2},"end":{"line":251,"column":2}},{"start":{"line":251,"column":2},"end":{"line":251,"column":2}}]},"13":{"line":261,"type":"if","locations":[{"start":{"line":261,"column":6},"end":{"line":261,"column":6}},{"start":{"line":261,"column":6},"end":{"line":261,"column":6}}]},"14":{"line":266,"type":"if","locations":[{"start":{"line":266,"column":4},"end":{"line":266,"column":4}},{"start":{"line":266,"column":4},"end":{"line":266,"column":4}}]},"15":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":2},"end":{"line":288,"column":2}},{"start":{"line":288,"column":2},"end":{"line":288,"column":2}}]},"16":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":6},"end":{"line":288,"column":31}},{"start":{"line":288,"column":35},"end":{"line":288,"column":50}}]},"17":{"line":335,"type":"binary-expr","locations":[{"start":{"line":335,"column":36},"end":{"line":335,"column":63}},{"start":{"line":335,"column":67},"end":{"line":335,"column":97}}]},"18":{"line":344,"type":"if","locations":[{"start":{"line":344,"column":4},"end":{"line":344,"column":4}},{"start":{"line":344,"column":4},"end":{"line":344,"column":4}}]},"19":{"line":403,"type":"if","locations":[{"start":{"line":403,"column":2},"end":{"line":403,"column":2}},{"start":{"line":403,"column":2},"end":{"line":403,"column":2}}]},"20":{"line":433,"type":"if","locations":[{"start":{"line":433,"column":4},"end":{"line":433,"column":4}},{"start":{"line":433,"column":4},"end":{"line":433,"column":4}}]},"21":{"line":474,"type":"if","locations":[{"start":{"line":474,"column":6},"end":{"line":474,"column":6}},{"start":{"line":474,"column":6},"end":{"line":474,"column":6}}]},"22":{"line":475,"type":"if","locations":[{"start":{"line":475,"column":6},"end":{"line":475,"column":6}},{"start":{"line":475,"column":6},"end":{"line":475,"column":6}}]},"23":{"line":475,"type":"binary-expr","locations":[{"start":{"line":475,"column":10},"end":{"line":475,"column":46}},{"start":{"line":475,"column":50},"end":{"line":475,"column":98}}]},"24":{"line":481,"type":"if","locations":[{"start":{"line":481,"column":4},"end":{"line":481,"column":4}},{"start":{"line":481,"column":4},"end":{"line":481,"column":4}}]},"25":{"line":490,"type":"if","locations":[{"start":{"line":490,"column":4},"end":{"line":490,"column":4}},{"start":{"line":490,"column":4},"end":{"line":490,"column":4}}]},"26":{"line":496,"type":"if","locations":[{"start":{"line":496,"column":6},"end":{"line":496,"column":6}},{"start":{"line":496,"column":6},"end":{"line":496,"column":6}}]},"27":{"line":497,"type":"if","locations":[{"start":{"line":497,"column":8},"end":{"line":497,"column":8}},{"start":{"line":497,"column":8},"end":{"line":497,"column":8}}]},"28":{"line":502,"type":"if","locations":[{"start":{"line":502,"column":10},"end":{"line":502,"column":10}},{"start":{"line":502,"column":10},"end":{"line":502,"column":10}}]},"29":{"line":521,"type":"if","locations":[{"start":{"line":521,"column":4},"end":{"line":521,"column":4}},{"start":{"line":521,"column":4},"end":{"line":521,"column":4}}]},"30":{"line":521,"type":"binary-expr","locations":[{"start":{"line":521,"column":8},"end":{"line":521,"column":44}},{"start":{"line":521,"column":48},"end":{"line":521,"column":85}}]},"31":{"line":528,"type":"if","locations":[{"start":{"line":528,"column":8},"end":{"line":528,"column":8}},{"start":{"line":528,"column":8},"end":{"line":528,"column":8}}]},"32":{"line":529,"type":"if","locations":[{"start":{"line":529,"column":8},"end":{"line":529,"column":8}},{"start":{"line":529,"column":8},"end":{"line":529,"column":8}}]},"33":{"line":557,"type":"if","locations":[{"start":{"line":557,"column":4},"end":{"line":557,"column":4}},{"start":{"line":557,"column":4},"end":{"line":557,"column":4}}]},"34":{"line":595,"type":"if","locations":[{"start":{"line":595,"column":2},"end":{"line":595,"column":2}},{"start":{"line":595,"column":2},"end":{"line":595,"column":2}}]},"35":{"line":595,"type":"binary-expr","locations":[{"start":{"line":595,"column":6},"end":{"line":595,"column":11}},{"start":{"line":595,"column":15},"end":{"line":595,"column":32}}]},"36":{"line":601,"type":"if","locations":[{"start":{"line":601,"column":6},"end":{"line":601,"column":6}},{"start":{"line":601,"column":6},"end":{"line":601,"column":6}}]},"37":{"line":605,"type":"if","locations":[{"start":{"line":605,"column":6},"end":{"line":605,"column":6}},{"start":{"line":605,"column":6},"end":{"line":605,"column":6}}]},"38":{"line":605,"type":"binary-expr","locations":[{"start":{"line":605,"column":10},"end":{"line":605,"column":25}},{"start":{"line":605,"column":29},"end":{"line":605,"column":36}}]},"39":{"line":610,"type":"binary-expr","locations":[{"start":{"line":610,"column":35},"end":{"line":610,"column":61}},{"start":{"line":610,"column":65},"end":{"line":610,"column":67}}]},"40":{"line":643,"type":"if","locations":[{"start":{"line":643,"column":2},"end":{"line":643,"column":2}},{"start":{"line":643,"column":2},"end":{"line":643,"column":2}}]},"41":{"line":645,"type":"if","locations":[{"start":{"line":645,"column":6},"end":{"line":645,"column":6}},{"start":{"line":645,"column":6},"end":{"line":645,"column":6}}]},"42":{"line":666,"type":"if","locations":[{"start":{"line":666,"column":2},"end":{"line":666,"column":2}},{"start":{"line":666,"column":2},"end":{"line":666,"column":2}}]},"43":{"line":670,"type":"if","locations":[{"start":{"line":670,"column":4},"end":{"line":670,"column":4}},{"start":{"line":670,"column":4},"end":{"line":670,"column":4}}]},"44":{"line":671,"type":"if","locations":[{"start":{"line":671,"column":6},"end":{"line":671,"column":6}},{"start":{"line":671,"column":6},"end":{"line":671,"column":6}}]},"45":{"line":689,"type":"if","locations":[{"start":{"line":689,"column":4},"end":{"line":689,"column":4}},{"start":{"line":689,"column":4},"end":{"line":689,"column":4}}]},"46":{"line":694,"type":"if","locations":[{"start":{"line":694,"column":8},"end":{"line":694,"column":8}},{"start":{"line":694,"column":8},"end":{"line":694,"column":8}}]},"47":{"line":719,"type":"if","locations":[{"start":{"line":719,"column":4},"end":{"line":719,"column":4}},{"start":{"line":719,"column":4},"end":{"line":719,"column":4}}]},"48":{"line":719,"type":"binary-expr","locations":[{"start":{"line":719,"column":8},"end":{"line":719,"column":42}},{"start":{"line":719,"column":46},"end":{"line":719,"column":61}}]},"49":{"line":720,"type":"binary-expr","locations":[{"start":{"line":720,"column":11},"end":{"line":720,"column":26}},{"start":{"line":720,"column":30},"end":{"line":720,"column":39}}]},"50":{"line":725,"type":"binary-expr","locations":[{"start":{"line":725,"column":9},"end":{"line":725,"column":11}},{"start":{"line":725,"column":15},"end":{"line":725,"column":19}}]}},"code":["","/**"," * Module Dependencies"," */","","var _ = require('lodash');","var async = require('async');","var utils = require('../../utils/helpers');","var normalize = require('../../utils/normalize');","var hasOwnProperty = utils.object.hasOwnProperty;","","/**"," * Builds up a set of operations to perform based on search criteria."," *"," * This allows the ability to do cross-adapter joins as well as fake joins"," * on adapters that haven't implemented the join interface yet."," */","","var Operations = module.exports = function(context, criteria, parent) {","","  // Build up a cache","  this.cache = {};","","  // Set context","  this.context = context;","","  // Set criteria","  this.criteria = criteria;","","  // Set parent","  this.parent = parent;","","  // Hold a default value for pre-combined results (native joins)","  this.preCombined = false;","","  // Seed the Cache","  this._seedCache();","","  // Build Up Operations","  this.operations = this._buildOperations();","","  return this;","};","","","/*"," ***********************************************************************************"," * PUBLIC METHODS"," ***********************************************************************************/","","","/**"," * Run Operations"," *"," * Execute a set of generated operations returning an array of results that can"," * joined in-memory to build out a valid results set."," *"," * @param {Function} cb"," * @api public"," */","","Operations.prototype.run = function run(cb) {","","  var self = this;","","  // Grab the parent operation, it will always be the very first operation","  var parentOp = this.operations.shift();","","  // Run The Parent Operation","  this._runOperation(parentOp.collection, parentOp.method, parentOp.criteria, function(err, results) {","","    if (err) return cb(err);","","    // Set the cache values","    self.cache[parentOp.collection] = results;","","    // If results are empty, or we're already combined, nothing else to so do return","    if (!results || self.preCombined) return cb(null, { combined: true, cache: self.cache });","","    // Run child operations and populate the cache","    self._execChildOpts(results, function(err) {","      if (err) return cb(err);","      cb(null, { combined: self.preCombined, cache: self.cache });","    });","","  });","","};","","","/*"," ***********************************************************************************"," * PRIVATE METHODS"," ***********************************************************************************/","","","/**"," * Seed Cache with empty values."," *"," * For each Waterline Collection set an empty array of values into the cache."," *"," * @api private"," */","","Operations.prototype._seedCache = function _seedCache() {","  var self = this;","","  // Fill the cache with empty values for each collection","  Object.keys(this.context.waterline.schema).forEach(function(key) {","    self.cache[key] = [];","  });","};","","/**"," * Build up the operations needed to perform the query based on criteria."," *"," * @return {Array}"," * @api private"," */","","Operations.prototype._buildOperations = function _buildOperations() {","","  var self = this;","  var operations = [];","","  // Check if joins were used, if not only a single operation is needed on a single connection","  if (!hasOwnProperty(this.criteria, 'joins')) {","","    // Grab the collection","    var collection = this.context.waterline.collections[this.context.identity];","","    // Find the name of the connection to run the query on using the dictionary","    var connectionName = collection.adapterDictionary[this.parent];","    if (!connectionName) connectionName = collection.adapterDictionary.find;","","    operations.push({","      connection: connectionName,","      collection: this.context.identity,","      method: this.parent,","      criteria: this.criteria","    });","","    return operations;","  }","","  // Joins were used in this operation. Lets grab the connections needed for these queries. It may","  // only be a single connection in a simple case or it could be multiple connections in some cases.","  var connections = this._getConnections();","","  // Now that all the connections are created, build up operations needed to accomplish the end","  // goal of getting all the results no matter which connection they are on. To do this,","  // figure out if a connection supports joins and if so pass down a criteria object containing","  // join instructions. If joins are not supported by a connection, build a series of operations","  // to achieve the end result.","  operations = this._stageOperations(connections);","","  return operations;","};","","/**"," * Stage Operation Sets"," *"," * @param {Object} connections"," * @api private"," */","","Operations.prototype._stageOperations = function _stageOperations(connections) {","","  var self = this;","  var operations = [];","","  // Build the parent operation and set it as the first operation in the array","  operations = operations.concat(this._createParentOperation(connections));","","  // Parent Connection Name","  var parentConnection = this.context.adapterDictionary[this.parent];","","  // Parent Operation","  var parentOperation = operations[0];","","  // For each additional connection build operations","  Object.keys(connections).forEach(function(connection) {","","    // Ignore the connection used for the parent operation if a join can be used on it.","    // This means all of the operations for the query can take place on a single connection","    // using a single query.","    if (connection === parentConnection && parentOperation.method === 'join') return;","","    // Operations are needed that will be run after the parent operation has been completed.","    // If there are more than a single join, set the parent join and build up children operations.","    // This occurs in a many-to-many relationship when a join table is needed.","","    // Criteria is omitted until after the parent operation has been run so that an IN query can","    // be formed on child operations.","","    var localOpts = [];","","    connections[connection].joins.forEach(function(join, idx) {","","      var optCollection = self.context.waterline.collections[join.child];","      var optConnectionName = optCollection.adapterDictionary['find'];","","      var operation = {","        connection: optConnectionName,","        collection: join.child,","        method: 'find',","        join: join","      };","","      // If this is the first join, it can't have any parents","      if (idx === 0) {","        localOpts.push(operation);","        return;","      }","","      // Look into the previous operations and see if this is a child of any of them","      var child = false;","      localOpts.forEach(function(localOpt) {","        if (localOpt.join.child != join.parent) return;","        localOpt.child = operation;","        child = true;","      });","","      if (child) return;","      localOpts.push(operation);","    });","","    operations = operations.concat(localOpts);","  });","","  return operations;","};","","/**"," * Create The Parent Operation"," *"," * @param {Object} connections"," * @return {Object}"," * @api private"," */","","Operations.prototype._createParentOperation = function _createParentOperation(connections) {","","  var nativeJoin = this.context.adapter.hasJoin();","  var operation,","      connectionName,","      connection;","","  // If the parent supports native joins, check if all the joins on the connection can be","  // run on the same connection and if so just send the entire criteria down to the connection.","  if (nativeJoin) {","","    connectionName = this.context.adapterDictionary.join;","    connection = connections[connectionName];","","    // Hold any joins that can't be run natively on this connection","    var unsupportedJoins = false;","","    // Pull out any unsupported joins","    connection.joins.forEach(function(join) {","      if (connection.collections.indexOf(join.child) > -1) return;","      unsupportedJoins = true;","    });","","    // If all the joins were supported then go ahead and build an operation.","    if (!unsupportedJoins) {","      operation = [{","        connection: connectionName,","        collection: this.context.identity,","        method: 'join',","        criteria: this.criteria","      }];","","      // Set the preCombined flag","      this.preCombined = true;","","      return operation;","    }","  }","","  // Remove the joins from the criteria object, this will be an in-memory join","  var tmpCriteria = _.cloneDeep(this.criteria);","  delete tmpCriteria.joins;","","  connectionName = this.context.adapterDictionary[this.parent];","","  // If findOne was used, use the same connection `find` is on.","  if (this.parent === 'findOne' && !connectionName) {","    connectionName = this.context.adapterDictionary.find;","  }","","  connection = connections[connectionName];","","  operation = [{","    connection: connectionName,","    collection: this.context.identity,","    method: this.parent,","    criteria: tmpCriteria","  }];","","  return operation;","};","","","/**"," * Get the connections used in this query and the join logic for each piece."," *"," * @return {Object}"," * @api private"," */","","Operations.prototype._getConnections = function _getConnections() {","","  var self = this;","  var connections = {};","","  // Default structure for connection objects","  var defaultConnection = {","    collections: [],","    children: [],","    joins: []","  };","","  // For each join build a connection item to build up an entire collection/connection registry","  // for this query. Using this, queries should be able to be seperated into discrete queries","  // which can be run on connections in parallel.","  this.criteria.joins.forEach(function(join) {","    var connection;","    var parentConnection;","    var childConnection;","","    function getConnection(collName) {","      var collection = self.context.waterline.collections[collName];","      var connectionName = collection.adapterDictionary['find'];","      connections[connectionName] = connections[connectionName] || _.cloneDeep(defaultConnection);","      return connections[connectionName];","    }","","    // If this join is a junctionTable, find the parent operation and add it to that connections","    // children instead of creating a new operation on another connection. This allows cross-connection","    // many-to-many joins to be used where the join relies on the results of the parent operation","    // being run first.","","    if (join.junctionTable) {","","      // Find the previous join","      var parentJoin = _.find(self.criteria.joins, function(otherJoin) {","        return otherJoin.child == join.parent;","      });","","      // Grab the parent join connection","      var parentJoinConnection = getConnection(parentJoin.parent);","","      // Find the connection the parent and child collections belongs to","      parentConnection = getConnection(join.parent);","      childConnection = getConnection(join.child);","","      // Update the registry","      parentConnection.collections.push(join.parent);","      childConnection.collections.push(join.child);","      parentConnection.children.push(join.parent);","","      // Ensure the arrays are made up only of unique values","      parentConnection.collections = _.uniq(parentConnection.collections);","      childConnection.collections = _.uniq(childConnection.collections);","      parentConnection.children = _.uniq(parentConnection.children);","","      // Add the join to the correct joins array. We want it to be on the same","      // connection as the operation before so the timing is correct.","      parentJoinConnection.joins = parentJoinConnection.joins.concat(join);","","    // Build up the connection registry like normal","    } else {","      parentConnection = getConnection(join.parent);","      childConnection = getConnection(join.child);","","      parentConnection.collections.push(join.parent);","      childConnection.collections.push(join.child);","      parentConnection.joins = parentConnection.joins.concat(join);","    }","","  });","  return connections;","};","","","/**"," * Run An Operation"," *"," * Performs an operation and runs a supplied callback."," *"," * @param {Object} collectionName"," * @param {String} method"," * @param {Object} criteria"," * @param {Function} cb"," *"," * @api private"," */","","Operations.prototype._runOperation = function _runOperation(collectionName, method, criteria, cb) {","","  // Ensure the collection exist","  if (!hasOwnProperty(this.context.waterline.collections, collectionName)) {","    return cb(new Error('Invalid Collection specfied in operation.'));","  }","","  // Find the connection object to run the operation","  var collection = this.context.waterline.collections[collectionName];","","  // Run the operation","  collection.adapter[method](criteria, cb);","","};","","/**"," * Execute Child Operations"," *"," * If joins are used and an adapter doesn't support them, there will be child operations that will"," * need to be run. Parse each child operation and run them along with any tree joins and return"," * an array of children results that can be combined with the parent results."," *"," * @param {Array} parentResults"," * @param {Function} cb"," */","","Operations.prototype._execChildOpts = function _execChildOpts(parentResults, cb) {","","  var self = this;","","  // Build up a set of child operations that will need to be run","  // based on the results returned from the parent operation.","  this._buildChildOpts(parentResults, function(err, opts) {","    if (err) return cb(err);","","    // Run the generated operations in parallel","    async.each(opts, function(item, next) {","      self._collectChildResults(item, next);","    }, cb);","  });","","};","","/**"," * Build Child Operations"," *"," * Using the results of a parent operation, build up a set of operations that contain criteria"," * based on what is returned from a parent operation. These can be arrays containing more than"," * one operation for each child, which will happen when \"join tables\" would be used."," *"," * Each set should be able to be run in parallel."," *"," * @param {Array} parentResults"," * @param {Function} cb"," * @return {Array}"," * @api private"," */","","Operations.prototype._buildChildOpts = function _buildChildOpts(parentResults, cb) {","","  var self = this;","  var opts = [];","","  // Build up operations that can be run in parallel using the results of the parent operation","  async.each(this.operations, function(item, next) {","","    var localOpts = [];","    var parents = [];","    var idx = 0;","","    // Go through all the parent records and build up an array of keys to look in. This","    // will be used in an IN query to grab all the records needed for the \"join\".","    parentResults.forEach(function(result) {","","      if (!hasOwnProperty(result, item.join.parentKey)) return;","      if (result[item.join.parentKey] === null || typeof result[item.join.parentKey] === undefined) return;","      parents.push(result[item.join.parentKey]);","","    });","","    // If no parents match the join criteria, don't build up an operation","    if (parents.length === 0) return next();","","    // Build up criteria that will be used inside an IN query","    var criteria = {};","    criteria[item.join.childKey] = parents;","","    var _tmpCriteria = {};","","    // Check if the join contains any criteria","    if (item.join.criteria) {","      var userCriteria = _.cloneDeep(item.join.criteria);","      _tmpCriteria = _.cloneDeep(userCriteria);","      _tmpCriteria = normalize.criteria(_tmpCriteria);","","      // Ensure `where` criteria is properly formatted","      if (hasOwnProperty(userCriteria, 'where')) {","        if (userCriteria.where === undefined) {","          delete userCriteria.where;","        } else {","","          // If an array of primary keys was passed in, normalize the criteria","          if (Array.isArray(userCriteria.where)) {","            var pk = self.context.waterline.collections[item.join.child].primaryKey;","            var obj = {};","            obj[pk] = _.clone(userCriteria.where);","            userCriteria.where = obj;","          }","","          userCriteria = userCriteria.where;","        }","      }","","","      criteria = _.merge(userCriteria, criteria);","    }","","    // Normalize criteria","    criteria = normalize.criteria(criteria);","","    // If criteria contains a skip or limit option, an operation will be needed for each parent.","    if (hasOwnProperty(_tmpCriteria, 'skip') || hasOwnProperty(_tmpCriteria, 'limit')) {","      parents.forEach(function(parent) {","","        var tmpCriteria = _.cloneDeep(criteria);","        tmpCriteria.where[item.join.childKey] = parent;","","        // Mixin the user defined skip and limit","        if (hasOwnProperty(_tmpCriteria, 'skip')) tmpCriteria.skip = _tmpCriteria.skip;","        if (hasOwnProperty(_tmpCriteria, 'limit')) tmpCriteria.limit = _tmpCriteria.limit;","","        // Build a simple operation to run with criteria from the parent results.","        // Give it an ID so that children operations can reference it if needed.","        localOpts.push({","          id: idx,","          collection: item.collection,","          method: item.method,","          criteria: tmpCriteria,","          join: item.join","        });","","      });","    } else {","","      // Build a simple operation to run with criteria from the parent results.","      // Give it an ID so that children operations can reference it if needed.","      localOpts.push({","        id: idx,","        collection: item.collection,","        method: item.method,","        criteria: criteria,","        join: item.join","      });","","    }","","    // If there are child records, add the opt but don't add the criteria","    if (!item.child) {","      opts.push(localOpts);","      return next();","    }","","    localOpts.push({","      collection: item.child.collection,","      method: item.child.method,","      parent: idx,","      join: item.child.join","    });","","    // Add the local opt to the opts array","    opts.push(localOpts);","","    next();","  }, function(err) {","    cb(err, opts);","  });","};","","/**"," * Collect Child Operation Results"," *"," * Run a set of child operations and return the results in a namespaced array"," * that can later be used to do an in-memory join."," *"," * @param {Array} opts"," * @param {Function} cb"," * @api private"," */","","Operations.prototype._collectChildResults = function _collectChildResults(opts, cb) {","","  var self = this;","  var intermediateResults = [];","  var i = 0;","","  if (!opts || opts.length === 0) return cb(null, {});","","  // Run the operations and any child operations in series so that each can access the","  // results of the previous operation.","  async.eachSeries(opts, function(opt, next) {","    self._runChildOperations(intermediateResults, opt, function(err, values) {","      if (err) return next(err);","","      // If there are multiple operations and we are on the first one lets put the results","      // into an intermediate results array","      if (opts.length > 1 && i === 0) {","        intermediateResults = intermediateResults.concat(values);","      }","","      // Add values to the cache key","      self.cache[opt.collection] = self.cache[opt.collection] || [];","      self.cache[opt.collection] = self.cache[opt.collection].concat(values);","","      // Ensure the values are unique","      var pk = self._findCollectionPK(opt.collection);","      self.cache[opt.collection] = _.uniq(self.cache[opt.collection], pk);","","      i++;","      next();","    });","  }, cb);","","};","","/**"," * Run A Child Operation"," *"," * Executes a child operation and appends the results as a namespaced object to the"," * main operation results object."," *"," * @param {Object} optResults"," * @param {Object} opt"," * @param {Function} callback"," * @api private"," */","","Operations.prototype._runChildOperations = function _runChildOperations(intermediateResults, opt, cb) {","  var self = this;","","  // Check if value has a parent, if so a join table was used and we need to build up dictionary","  // values that can be used to join the parent and the children together.","","  // If the operation doesn't have a parent operation run it","  if (!hasOwnProperty(opt, 'parent')) {","    return self._runOperation(opt.collection, opt.method, opt.criteria, function(err, values) {","      if (err) return cb(err);","      cb(null, values);","    });","  }","","  // If the operation has a parent, look into the optResults and build up a criteria","  // object using the results of a previous operation","  var parents = [];","","  // Normalize to array","  var res = _.cloneDeep(intermediateResults);","","  // Build criteria that can be used with an `in` query","  res.forEach(function(result) {","    parents.push(result[opt.join.parentKey]);","  });","","  var criteria = {};","  criteria[opt.join.childKey] = parents;","","  // Check if the join contains any criteria","  if (opt.join.criteria) {","    var userCriteria = _.cloneDeep(opt.join.criteria);","","    // Ensure `where` criteria is properly formatted","    if (hasOwnProperty(userCriteria, 'where')) {","      if (userCriteria.where === undefined) {","        delete userCriteria.where;","      } else {","        userCriteria = userCriteria.where;","      }","    }","","    delete userCriteria.sort;","    criteria = _.extend(criteria, userCriteria);","  }","","  criteria = normalize.criteria({ where: criteria });","","  // Empty the cache for the join table so we can only add values used","  var cacheCopy = _.cloneDeep(self.cache[opt.join.parent]);","  self.cache[opt.join.parent] = [];","","  self._runOperation(opt.collection, opt.method, criteria, function(err, values) {","    if (err) return cb(err);","","    // Build up the new join table result","    values.forEach(function(val) {","      cacheCopy.forEach(function(copy) {","        if (copy[opt.join.parentKey] === val[opt.join.childKey]) self.cache[opt.join.parent].push(copy);","      });","    });","","    // Ensure the values are unique","    var pk = self._findCollectionPK(opt.join.parent);","    self.cache[opt.join.parent] = _.uniq(self.cache[opt.join.parent], pk);","","    cb(null, values);","  });","};","","/**"," * Find A Collection's Primary Key"," *"," * @param {String} collectionName"," * @api private"," * @return {String}"," */","","Operations.prototype._findCollectionPK = function _findCollectionPK(collectionName) {","  var pk;","","  for (var attribute in this.context.waterline.collections[collectionName]._attributes) {","    var attr = this.context.waterline.collections[collectionName]._attributes[attribute];","    if (hasOwnProperty(attr, 'primaryKey') && attr.primaryKey) {","      pk = attr.columnName || attribute;","      break;","    }","  }","","  return pk || null;","};",""],"l":{"6":1,"7":1,"8":1,"9":1,"10":1,"19":1,"22":0,"25":0,"28":0,"31":0,"34":0,"37":0,"40":0,"42":0,"62":1,"64":0,"67":0,"70":0,"72":0,"75":0,"78":0,"81":0,"82":0,"83":0,"105":1,"106":0,"109":0,"110":0,"121":1,"123":0,"124":0,"127":0,"130":0,"133":0,"134":0,"136":0,"143":0,"148":0,"155":0,"157":0,"167":1,"169":0,"170":0,"173":0,"176":0,"179":0,"182":0,"187":0,"196":0,"198":0,"200":0,"201":0,"203":0,"211":0,"212":0,"213":0,"217":0,"218":0,"219":0,"220":0,"221":0,"224":0,"225":0,"228":0,"231":0,"242":1,"244":0,"245":0,"251":0,"253":0,"254":0,"257":0,"260":0,"261":0,"262":0,"266":0,"267":0,"275":0,"277":0,"282":0,"283":0,"285":0,"288":0,"289":0,"292":0,"294":0,"301":0,"312":1,"314":0,"315":0,"318":0,"327":0,"328":0,"329":0,"330":0,"332":1,"333":0,"334":0,"335":0,"336":0,"344":0,"347":0,"348":0,"352":0,"355":0,"356":0,"359":0,"360":0,"361":0,"364":0,"365":0,"366":0,"370":0,"374":0,"375":0,"377":0,"378":0,"379":0,"383":0,"400":1,"403":0,"404":0,"408":0,"411":0,"426":1,"428":0,"432":0,"433":0,"436":0,"437":0,"458":1,"460":0,"461":0,"464":0,"466":0,"467":0,"468":0,"472":0,"474":0,"475":0,"476":0,"481":0,"484":0,"485":0,"487":0,"490":0,"491":0,"492":0,"493":0,"496":0,"497":0,"498":0,"502":0,"503":0,"504":0,"505":0,"506":0,"509":0,"514":0,"518":0,"521":0,"522":0,"524":0,"525":0,"528":0,"529":0,"533":0,"546":0,"557":0,"558":0,"559":0,"562":0,"570":0,"572":0,"574":0,"589":1,"591":0,"592":0,"593":0,"595":0,"599":0,"600":0,"601":0,"605":0,"606":0,"610":0,"611":0,"614":0,"615":0,"617":0,"618":0,"636":1,"637":0,"643":0,"644":0,"645":0,"646":0,"652":0,"655":0,"658":0,"659":0,"662":0,"663":0,"666":0,"667":0,"670":0,"671":0,"672":0,"674":0,"678":0,"679":0,"682":0,"685":0,"686":0,"688":0,"689":0,"692":0,"693":0,"694":0,"699":0,"700":0,"702":0,"714":1,"715":0,"717":0,"718":0,"719":0,"720":0,"721":0,"725":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/integrator/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/integrator/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"integrate","line":35,"loc":{"start":{"line":35,"column":17},"end":{"line":35,"column":77}}},"2":{"name":"eachAssociation","line":64,"loc":{"start":{"line":64,"column":4},"end":{"line":64,"column":50}}},"3":{"name":"(anonymous_3)","line":191,"loc":{"start":{"line":191,"column":35},"end":{"line":191,"column":52}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":31}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":47}},"4":{"start":{"line":7,"column":0},"end":{"line":7,"column":39}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":37}},"6":{"start":{"line":35,"column":0},"end":{"line":208,"column":2}},"7":{"start":{"line":38,"column":2},"end":{"line":38,"column":22}},"8":{"start":{"line":39,"column":2},"end":{"line":39,"column":60}},"9":{"start":{"line":40,"column":2},"end":{"line":40,"column":70}},"10":{"start":{"line":41,"column":2},"end":{"line":41,"column":74}},"11":{"start":{"line":42,"column":2},"end":{"line":42,"column":81}},"12":{"start":{"line":43,"column":2},"end":{"line":43,"column":88}},"13":{"start":{"line":44,"column":2},"end":{"line":44,"column":54}},"14":{"start":{"line":45,"column":2},"end":{"line":45,"column":48}},"15":{"start":{"line":46,"column":2},"end":{"line":46,"column":34}},"16":{"start":{"line":46,"column":15},"end":{"line":46,"column":34}},"17":{"start":{"line":50,"column":2},"end":{"line":50,"column":30}},"18":{"start":{"line":51,"column":2},"end":{"line":51,"column":36}},"19":{"start":{"line":56,"column":2},"end":{"line":56,"column":52}},"20":{"start":{"line":63,"column":2},"end":{"line":201,"column":4}},"21":{"start":{"line":66,"column":6},"end":{"line":66,"column":51}},"22":{"start":{"line":69,"column":6},"end":{"line":198,"column":7}},"23":{"start":{"line":73,"column":8},"end":{"line":73,"column":45}},"24":{"start":{"line":74,"column":8},"end":{"line":74,"column":46}},"25":{"start":{"line":75,"column":8},"end":{"line":75,"column":46}},"26":{"start":{"line":76,"column":8},"end":{"line":76,"column":43}},"27":{"start":{"line":104,"column":8},"end":{"line":126,"column":11}},"28":{"start":{"line":129,"column":13},"end":{"line":198,"column":7}},"29":{"start":{"line":133,"column":8},"end":{"line":133,"column":30}},"30":{"start":{"line":134,"column":8},"end":{"line":134,"column":30}},"31":{"start":{"line":135,"column":8},"end":{"line":135,"column":46}},"32":{"start":{"line":136,"column":8},"end":{"line":136,"column":43}},"33":{"start":{"line":140,"column":8},"end":{"line":147,"column":9}},"34":{"start":{"line":143,"column":10},"end":{"line":143,"column":52}},"35":{"start":{"line":167,"column":8},"end":{"line":183,"column":11}},"36":{"start":{"line":189,"column":8},"end":{"line":197,"column":9}},"37":{"start":{"line":191,"column":10},"end":{"line":195,"column":13}},"38":{"start":{"line":192,"column":12},"end":{"line":192,"column":62}},"39":{"start":{"line":193,"column":12},"end":{"line":193,"column":33}},"40":{"start":{"line":194,"column":12},"end":{"line":194,"column":26}},"41":{"start":{"line":206,"column":2},"end":{"line":206,"column":27}}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":12},"end":{"line":39,"column":19}},{"start":{"line":39,"column":23},"end":{"line":39,"column":59}}]},"2":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":12},"end":{"line":40,"column":19}},{"start":{"line":40,"column":23},"end":{"line":40,"column":69}}]},"3":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":12},"end":{"line":41,"column":19}},{"start":{"line":41,"column":23},"end":{"line":41,"column":73}}]},"4":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":12},"end":{"line":42,"column":19}},{"start":{"line":42,"column":23},"end":{"line":42,"column":80}}]},"5":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":12},"end":{"line":43,"column":19}},{"start":{"line":43,"column":23},"end":{"line":43,"column":87}}]},"6":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":12},"end":{"line":44,"column":19}},{"start":{"line":44,"column":23},"end":{"line":44,"column":53}}]},"7":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":12},"end":{"line":45,"column":19}},{"start":{"line":45,"column":23},"end":{"line":45,"column":47}}]},"8":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":2},"end":{"line":46,"column":2}},{"start":{"line":46,"column":2},"end":{"line":46,"column":2}}]},"9":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":6},"end":{"line":69,"column":6}},{"start":{"line":69,"column":6},"end":{"line":69,"column":6}}]},"10":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":13},"end":{"line":129,"column":13}},{"start":{"line":129,"column":13},"end":{"line":129,"column":13}}]},"11":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":8},"end":{"line":140,"column":8}},{"start":{"line":140,"column":8},"end":{"line":140,"column":8}}]},"12":{"line":189,"type":"if","locations":[{"start":{"line":189,"column":8},"end":{"line":189,"column":8}},{"start":{"line":189,"column":8},"end":{"line":189,"column":8}}]},"13":{"line":189,"type":"binary-expr","locations":[{"start":{"line":189,"column":12},"end":{"line":189,"column":47}},{"start":{"line":189,"column":51},"end":{"line":189,"column":91}}]}},"code":["/**"," * Module dependencies"," */","var anchor = require('anchor');","var _ = require('lodash');","var leftOuterJoin = require('./leftOuterJoin');","var innerJoin = require('./innerJoin');","var populate = require('./populate');","","","/**"," * Query Integrator"," *"," * Combines the results from multiple child queries into"," * the final return format using an in-memory join."," * Final step in fulfilling a `.find()` with one or more"," * `populate(alias[n])` modifiers."," *"," *    > Why is this asynchronous?"," *    >"," *    > While this function isn't doing anything strictly"," *    > asynchronous, it still expects a callback to enable"," *    > future use of `process[setImmediate|nextTick]()` as"," *    > an optimization."," *"," * @param  {Object}   cache"," * @param  {Array}    joinInstructions      - see JOIN_INSTRUCTIONS.md"," * @callback  {Function} cb(err, results)"," *           @param {Error}"," *           @param {Array}  [results, complete w/ populations]"," *"," * @throws {Error} on invalid input"," * @asynchronous"," */","module.exports = function integrate(cache, joinInstructions, primaryKey, cb) {","","  // Ensure valid usage","  var invalid = false;","  invalid = invalid || anchor(cache).to({ type: 'object' });","  invalid = invalid || anchor(joinInstructions).to({ type: 'array' });","  invalid = invalid || anchor(joinInstructions[0]).to({ type: 'object' });","  invalid = invalid || anchor(joinInstructions[0].parent).to({ type: 'string' });","  invalid = invalid || anchor(cache[joinInstructions[0].parent]).to({ type: 'object' });","  invalid = invalid || typeof primaryKey !== 'string';","  invalid = invalid || typeof cb !== 'function';","  if (invalid) return cb(invalid);","","","  // Constant: String prepended to child attribute keys for use in namespacing.","  var CHILD_ATTR_PREFIX = '.';","  var GRANDCHILD_ATTR_PREFIX = '..';","","","  // We'll reuse the cached data from the `parent` table modifying it in-place","  // and returning it as our result set. (`results`)","  var results = cache[ joinInstructions[0].parent ];","","  // Group the joinInstructions array by alias, then interate over each one","  // s.t. `instructions` in our lambda function contains a list of join instructions","  // for the particular `populate` on the specified key (i.e. alias).","  //","  // Below, `results` are mutated inline.","  _.each(_.groupBy(joinInstructions, 'alias'),","    function eachAssociation(instructions, alias) {","","      var parentPK, fkToParent, fkToChild, childPK;","","      // N..N Association","      if (instructions.length === 2) {","","        // Name keys explicitly","        // (makes it easier to see what's going on)","        parentPK = instructions[0].parentKey;","        fkToParent = instructions[0].childKey;","        fkToChild = instructions[1].parentKey;","        childPK = instructions[1].childKey;","","        // console.log('\\n\\n------------:: n..m leftOuterJoin ::--------\\n',","        //   leftOuterJoin({","        //     left: cache[instructions[0].parent],","        //     right: cache[instructions[0].child],","        //     leftKey: parentPK,","        //     rightKey: fkToParent","        //   })","        // );","        // console.log('------------:: / ::--------\\n');","","        // console.log('\\n\\n------------:: n..m childRows ::--------\\n',innerJoin({","        //   left: leftOuterJoin({","        //     left: cache[instructions[0].parent],","        //     right: cache[instructions[0].child],","        //     leftKey: parentPK,","        //     rightKey: fkToParent","        //   }),","        //   right: cache[instructions[1].child],","        //   leftKey: CHILD_ATTR_PREFIX+fkToChild,","        //   rightKey: childPK,","        //   childNamespace: GRANDCHILD_ATTR_PREFIX","        // }));","        // console.log('------------:: / ::--------\\n');","","        // Calculate and sanitize join data,","        // then shove it into the parent results under `alias`","        populate({","          parentRows: results,","          alias: alias,","","          childRows: innerJoin({","            left: leftOuterJoin({","              left: cache[instructions[0].parent],","              right: cache[instructions[0].child],","              leftKey: parentPK,","              rightKey: fkToParent","            }),","            right: cache[instructions[1].child],","            leftKey: CHILD_ATTR_PREFIX + fkToChild,","            rightKey: childPK,","            childNamespace: GRANDCHILD_ATTR_PREFIX","          }),","","          parentPK: parentPK,   // e.g. `id` (of message)","          fkToChild: CHILD_ATTR_PREFIX + fkToChild, // e.g. `user_id` (of join table)","          childPK: GRANDCHILD_ATTR_PREFIX + childPK,      // e.g. `id` (of user)","","          childNamespace: GRANDCHILD_ATTR_PREFIX","        });","","      // 1 ..N Association","      } else if (instructions.length === 1) {","","        // Name keys explicitly","        // (makes it easier to see what's going on)","        parentPK = primaryKey;","        fkToParent = parentPK;","        fkToChild = instructions[0].parentKey;","        childPK = instructions[0].childKey;","","        // Determine if this is a \"hasOne\" or a \"belongsToMany\"","        // if the parent's primary key is the same as the fkToChild, it must be belongsToMany","        if (parentPK === fkToChild) {","          // In belongsToMany case, fkToChild needs prefix because it's actually the","          // console.log('belongsToMany');","          fkToChild = CHILD_ATTR_PREFIX + fkToChild;","        // \"hasOne\" case","        } else {","          // console.log('hasOne');","        }","","        // var childRows = innerJoin({","        //   left: cache[instructions[0].parent],","        //   right: cache[instructions[0].child],","        //   leftKey: instructions[0].parentKey,","        //   rightKey: instructions[0].childKey","        // });","","        // console.log('1..N JOIN--------------\\n',instructions,'\\n^^^^^^^^^^^^^^^^^^^^^^');","        // console.log('1..N KEYS--------------\\n',{","        //   parentPK: parentPK,","        //   fkToParent: fkToParent,","        //   fkToChild: fkToChild,","        //   childPK: childPK,","        // },'\\n^^^^^^^^^^^^^^^^^^^^^^');","        // console.log('1..N CHILD ROWS--------\\n',childRows);","","        // Calculate and sanitize join data,","        // then shove it into the parent results under `alias`","        populate({","          parentRows: results,","          alias: alias,","","          childRows: innerJoin({","            left: cache[instructions[0].parent],","            right: cache[instructions[0].child],","            leftKey: instructions[0].parentKey,","            rightKey: instructions[0].childKey","          }),","","          parentPK: fkToParent,  // e.g. `id` (of message)","          fkToChild: fkToChild,  // e.g. `from`","          childPK: childPK,      // e.g. `id` (of user)","","          childNamespace: CHILD_ATTR_PREFIX","        });","","        // If the alias isn't the same as the parent_key AND removeParentKey is set to true","        // in the instructions this means that we are turning a FK into an embedded record and a","        // columnName was used. We need to move the values attached to the alias property to","        // the parent key value. If we don't then when we run the transformer everything would get crazy.","        if (alias !== instructions[0].parentKey && instructions[0].removeParentKey === true) {","","          results = _.map(results, function(result) {","            result[instructions[0].parentKey] = result[alias];","            delete result[alias];","            return result;","          });","","        }","      }","","    }","  );","","","  // And call the callback","  // (the final joined data is in the cache -- also referenced by `results`)","  return cb(null, results);","","};",""],"l":{"4":1,"5":1,"6":1,"7":1,"8":1,"35":1,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"50":0,"51":0,"56":0,"63":0,"66":0,"69":0,"73":0,"74":0,"75":0,"76":0,"104":0,"129":0,"133":0,"134":0,"135":0,"136":0,"140":0,"143":0,"167":0,"189":0,"191":0,"192":0,"193":0,"194":0,"206":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/integrator/leftOuterJoin.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/integrator/leftOuterJoin.js","s":{"1":1,"2":1,"3":0,"4":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"leftOuterJoin","line":23,"loc":{"start":{"line":23,"column":17},"end":{"line":23,"column":49}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":30}},"2":{"start":{"line":23,"column":0},"end":{"line":26,"column":2}},"3":{"start":{"line":24,"column":2},"end":{"line":24,"column":25}},"4":{"start":{"line":25,"column":2},"end":{"line":25,"column":23}}},"branchMap":{},"code":["/**"," * Module dependencies"," */","var join = require('./_join');","","","/**"," * Left outer join"," *"," * Return a result set with data from child and parent"," * merged on childKey===parentKey, where t.e. at least one"," * entry for each row of parent (unmatched columns in child are null)."," *"," * @option {Array} parent       [rows from the \"lefthand table\"]"," * @option {Array} child        [rows from the \"righthand table\"]"," * @option {String} parentKey   [primary key of the \"lefthand table\"]"," * @option {String} childKey    [foreign key from the \"righthand table\" to the \"lefthand table\"]"," * @return {Array}              [a new array of joined row data]"," *"," * @throws {Error} on invalid input"," * @synchronous"," */","module.exports = function leftOuterJoin(options) {","  options.outer = 'left';","  return join(options);","};",""],"l":{"4":1,"23":1,"24":0,"25":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/integrator/_join.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/integrator/_join.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"_join","line":29,"loc":{"start":{"line":29,"column":17},"end":{"line":29,"column":41}}},"2":{"name":"eachParentRow","line":66,"loc":{"start":{"line":66,"column":43},"end":{"line":66,"column":83}}},"3":{"name":"eachChildRow","line":70,"loc":{"start":{"line":70,"column":45},"end":{"line":70,"column":95}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":31}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"4":{"start":{"line":29,"column":0},"end":{"line":105,"column":2}},"5":{"start":{"line":33,"column":2},"end":{"line":33,"column":22}},"6":{"start":{"line":34,"column":2},"end":{"line":36,"column":5}},"7":{"start":{"line":39,"column":2},"end":{"line":45,"column":5}},"8":{"start":{"line":47,"column":2},"end":{"line":49,"column":5}},"9":{"start":{"line":50,"column":2},"end":{"line":52,"column":5}},"10":{"start":{"line":53,"column":2},"end":{"line":55,"column":5}},"11":{"start":{"line":56,"column":2},"end":{"line":58,"column":5}},"12":{"start":{"line":60,"column":2},"end":{"line":61,"column":57}},"13":{"start":{"line":63,"column":2},"end":{"line":63,"column":29}},"14":{"start":{"line":63,"column":15},"end":{"line":63,"column":29}},"15":{"start":{"line":66,"column":2},"end":{"line":100,"column":9}},"16":{"start":{"line":70,"column":4},"end":{"line":91,"column":14}},"17":{"start":{"line":72,"column":6},"end":{"line":78,"column":9}},"18":{"start":{"line":86,"column":6},"end":{"line":89,"column":7}},"19":{"start":{"line":87,"column":8},"end":{"line":87,"column":26}},"20":{"start":{"line":88,"column":8},"end":{"line":88,"column":20}},"21":{"start":{"line":90,"column":6},"end":{"line":90,"column":30}},"22":{"start":{"line":95,"column":4},"end":{"line":97,"column":5}},"23":{"start":{"line":96,"column":6},"end":{"line":96,"column":40}},"24":{"start":{"line":99,"column":4},"end":{"line":99,"column":16}},"25":{"start":{"line":103,"column":2},"end":{"line":103,"column":19}}},"branchMap":{"1":{"line":34,"type":"binary-expr","locations":[{"start":{"line":34,"column":12},"end":{"line":34,"column":19}},{"start":{"line":34,"column":23},"end":{"line":36,"column":4}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":20},"end":{"line":44,"column":42}},{"start":{"line":44,"column":46},"end":{"line":44,"column":49}}]},"3":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":12},"end":{"line":47,"column":19}},{"start":{"line":47,"column":23},"end":{"line":49,"column":4}}]},"4":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":12},"end":{"line":50,"column":19}},{"start":{"line":50,"column":23},"end":{"line":52,"column":4}}]},"5":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":12},"end":{"line":53,"column":19}},{"start":{"line":53,"column":23},"end":{"line":55,"column":4}}]},"6":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":12},"end":{"line":56,"column":19}},{"start":{"line":56,"column":23},"end":{"line":58,"column":4}}]},"7":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":12},"end":{"line":60,"column":19}},{"start":{"line":60,"column":24},"end":{"line":61,"column":55}}]},"8":{"line":60,"type":"cond-expr","locations":[{"start":{"line":61,"column":4},"end":{"line":61,"column":47}},{"start":{"line":61,"column":50},"end":{"line":61,"column":55}}]},"9":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":2},"end":{"line":63,"column":2}},{"start":{"line":63,"column":2},"end":{"line":63,"column":2}}]},"10":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":6},"end":{"line":86,"column":6}},{"start":{"line":86,"column":6},"end":{"line":86,"column":6}}]},"11":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":4},"end":{"line":95,"column":4}},{"start":{"line":95,"column":4},"end":{"line":95,"column":4}}]},"12":{"line":95,"type":"binary-expr","locations":[{"start":{"line":95,"column":8},"end":{"line":95,"column":19}},{"start":{"line":95,"column":23},"end":{"line":95,"column":47}}]}},"code":["/**"," * Module dependencies"," */","var anchor = require('anchor');","var _ = require('lodash');","var partialJoin = require('./_partialJoin');","","","/**"," * _join"," *"," * @api private"," *"," * Helper method- can perform and inner -OR- outer join."," *"," * @option {String|Boolean} outer    [whether to do an outer join, and if so the direction (\"left\"|\"right\")]"," * @option {Array} parent            [rows from the \"lefthand table\"]"," * @option {Array} child             [rows from the \"righthand table\"]"," * @option {String} parentKey        [primary key of the \"lefthand table\"]"," * @option {String} childKey         [foreign key from the \"righthand table\" to the \"lefthand table\"]"," * @option {String} childNamespace   [string prepended to child attribute keys (default='.')]"," *"," * @return {Array} new joined row data"," *"," * @throws {Error} on invalid input"," *"," * @synchronous"," */","module.exports = function _join(options) {","","","  // Usage","  var invalid = false;","  invalid = invalid || anchor(options).to({","    type: 'object'","  });","","  // Tolerate `right` and `left` usage","  _.defaults(options, {","    parent: options.left,","    child: options.right,","    parentKey: options.leftKey,","    childKey: options.rightKey,","    childNamespace: options.childNamespace || '.'","  });","","  invalid = invalid || anchor(options.parent).to({","    type: 'array'","  });","  invalid = invalid || anchor(options.child).to({","    type: 'array'","  });","  invalid = invalid || anchor(options.parentKey).to({","    type: 'string'","  });","  invalid = invalid || anchor(options.childKey).to({","    type: 'string'","  });","","  invalid = invalid || (options.outer === 'right' ?","    new Error('Right joins not supported yet.') : false);","","  if (invalid) throw invalid;","","","  var resultSet = _.reduce(options.parent, function eachParentRow(memo, parentRow) {","","    // For each childRow whose childKey matches","    // this parentRow's parentKey...","    var foundMatch = _.reduce(options.child, function eachChildRow(hasFoundMatchYet, childRow) {","","      var newRow = partialJoin({","        parentRow: parentRow,","        childRow: childRow,","        parentKey: options.parentKey,","        childKey: options.childKey,","        childNamespace: options.childNamespace","      });","","      // console.log('PARENT ROW: ', parentRow);","      // console.log('CHILD ROW: ', childRow);","      // console.log('JOIN ROW: ', newRow);","","      // Save the new row for the join result if it exists","      // and mark the match as found","      if (newRow) {","        memo.push(newRow);","        return true;","      }","      return hasFoundMatchYet;","    }, false);","","    // If this is a left outer join and we didn't find a match","    // for this parentRow, add it to the result set anyways","    if (!foundMatch && options.outer === 'left') {","      memo.push(_.cloneDeep(parentRow));","    }","","    return memo;","  }, []);","","  // console.log('JOIN RESULT SET::', resultSet);","  return resultSet;","","};",""],"l":{"4":1,"5":1,"6":1,"29":1,"33":0,"34":0,"39":0,"47":0,"50":0,"53":0,"56":0,"60":0,"63":0,"66":0,"70":0,"72":0,"86":0,"87":0,"88":0,"90":0,"95":0,"96":0,"99":0,"103":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/integrator/_partialJoin.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/integrator/_partialJoin.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"partialJoin","line":49,"loc":{"start":{"line":49,"column":17},"end":{"line":49,"column":47}}},"2":{"name":"(anonymous_2)","line":78,"loc":{"start":{"line":78,"column":21},"end":{"line":78,"column":42}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":31}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"3":{"start":{"line":49,"column":0},"end":{"line":90,"column":2}},"4":{"start":{"line":52,"column":2},"end":{"line":52,"column":22}},"5":{"start":{"line":53,"column":2},"end":{"line":53,"column":44}},"6":{"start":{"line":54,"column":2},"end":{"line":54,"column":54}},"7":{"start":{"line":55,"column":2},"end":{"line":55,"column":53}},"8":{"start":{"line":56,"column":2},"end":{"line":56,"column":54}},"9":{"start":{"line":57,"column":2},"end":{"line":57,"column":53}},"10":{"start":{"line":58,"column":2},"end":{"line":58,"column":19}},"11":{"start":{"line":60,"column":2},"end":{"line":60,"column":58}},"12":{"start":{"line":63,"column":2},"end":{"line":68,"column":3}},"13":{"start":{"line":67,"column":4},"end":{"line":67,"column":17}},"14":{"start":{"line":71,"column":2},"end":{"line":71,"column":49}},"15":{"start":{"line":77,"column":2},"end":{"line":77,"column":29}},"16":{"start":{"line":78,"column":2},"end":{"line":81,"column":5}},"17":{"start":{"line":79,"column":4},"end":{"line":79,"column":48}},"18":{"start":{"line":80,"column":4},"end":{"line":80,"column":45}},"19":{"start":{"line":85,"column":2},"end":{"line":85,"column":48}},"20":{"start":{"line":89,"column":2},"end":{"line":89,"column":27}}},"branchMap":{"1":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":12},"end":{"line":53,"column":19}},{"start":{"line":53,"column":23},"end":{"line":53,"column":43}}]},"2":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":12},"end":{"line":54,"column":19}},{"start":{"line":54,"column":23},"end":{"line":54,"column":53}}]},"3":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":12},"end":{"line":55,"column":19}},{"start":{"line":55,"column":23},"end":{"line":55,"column":52}}]},"4":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":12},"end":{"line":56,"column":19}},{"start":{"line":56,"column":23},"end":{"line":56,"column":53}}]},"5":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":12},"end":{"line":57,"column":19}},{"start":{"line":57,"column":23},"end":{"line":57,"column":52}}]},"6":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":27},"end":{"line":60,"column":49}},{"start":{"line":60,"column":53},"end":{"line":60,"column":56}}]},"7":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":2},"end":{"line":63,"column":2}},{"start":{"line":63,"column":2},"end":{"line":63,"column":2}}]}},"code":["/**"," * Module dependencies"," */","var assert = require('assert');","var _ = require('lodash');","","","/**"," * _partialJoin"," *"," * @api private"," *"," * Check whether two rows match on the specified keys,"," * and if they do, merge `parentRow` into a copy of `childRow`"," * and return it (omit `childRow`'s key, since it === `parentRow`'s)."," *"," * Hypothetically, this function could be operated by a stream,"," * but in the case of a left outer join, at least, the final"," * result set cannot be accurately known until both the complete"," * contents of both the `left` and `right` data set have been checked."," *"," * An optimization from polynomial to logarithmic computational"," * complexity could potentially be achieved by taking advantage"," * of the known L[k..l] and R[m..n] values as each new L[i] or R[j]"," * arrives from a stream, but a comparably-sized cache would have to"," * be maintained, so we'd still be stuck with polynomial memory usage."," * i.e. O( |R|*|L| )  This could be resolved by batching-- e.g. grab the"," * first 3000 parent and child rows, join matches together, discard"," * the unneeded data, and repeat."," *"," * Anyways, worth investigating, since this is a hot code path for"," * cross-adapter joins."," *"," *"," * Usage:"," *"," * partialJoin({"," *   parentRow: { id: 5, name: 'Lucy', email: 'lucy@fakemail.org' }"," *   childRow:  { owner_id: 5, name: 'Rover', breed: 'Australian Shepherd' }"," *   parentKey: 'id'"," *   childKey:  'owner_id',"," *   childNamespace:  '.'"," * })"," *"," * @param  {Object} options"," * @return {Object|False}   If false, don't save the join row."," * @synchronous"," */","module.exports = function partialJoin(options) {","","  // Usage","  var invalid = false;","  invalid = invalid || !_.isObject(options);","  invalid = invalid || !_.isString(options.parentKey);","  invalid = invalid || !_.isString(options.childKey);","  invalid = invalid || !_.isObject(options.parentRow);","  invalid = invalid || !_.isObject(options.childRow);","  assert(!invalid);","","  var CHILD_ATTR_PREFIX = (options.childNamespace || '.');","","  // If the rows aren't a match, bail out","  if (","    options.childRow[options.childKey] !==","    options.parentRow[options.parentKey]","    ) {","    return false;","  }","","  // deep clone the childRow, then delete `childKey` in the copy.","  var newJoinRow = _.cloneDeep(options.childRow);","  // console.log('deleting childKEy :: ',options.childKey);","  // var _childKeyValue = newJoinRow[options.childKey];","  // delete newJoinRow[options.childKey];","","  // namespace the remaining attributes in childRow","  var namespacedJoinRow = {};","  _.each(newJoinRow, function(value, key) {","    var namespacedKey = CHILD_ATTR_PREFIX + key;","    namespacedJoinRow[namespacedKey] = value;","  });","","","  // Merge namespaced values from current parentRow into the copy.","  _.merge(namespacedJoinRow, options.parentRow);","","","  // Return the newly joined row.","  return namespacedJoinRow;","};","",""],"l":{"4":1,"5":1,"49":1,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"60":0,"63":0,"67":0,"71":0,"77":0,"78":0,"79":0,"80":0,"85":0,"89":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/integrator/innerJoin.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/integrator/innerJoin.js","s":{"1":1,"2":1,"3":0,"4":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"leftOuterJoin","line":23,"loc":{"start":{"line":23,"column":17},"end":{"line":23,"column":49}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":30}},"2":{"start":{"line":23,"column":0},"end":{"line":26,"column":2}},"3":{"start":{"line":24,"column":2},"end":{"line":24,"column":24}},"4":{"start":{"line":25,"column":2},"end":{"line":25,"column":23}}},"branchMap":{},"code":["/**"," * Module dependencies"," */","var join = require('./_join');","","","/**"," * Inner join"," *"," * Return a result set with data from child and parent"," * merged on childKey===parentKey, where t.e. exactly one"," * entry for each match."," *"," * @option {Array} parent    [rows from the \"lefthand table\"]"," * @option {Array} child   [rows from the \"righthand table\"]"," * @option {String} parentKey     [primary key of the \"lefthand table\"]"," * @option {String} childKey     [foreign key from the \"righthand table\" to the \"lefthand table\"]"," * @return {Array}          [a new array of joined row data]"," *"," * @throws {Error} on invalid input"," * @synchronous"," */","module.exports = function leftOuterJoin(options) {","  options.outer = false;","  return join(options);","};",""],"l":{"4":1,"23":1,"24":0,"25":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/integrator/populate.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/integrator/populate.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"populate","line":25,"loc":{"start":{"line":25,"column":17},"end":{"line":25,"column":44}}},"2":{"name":"_insertJoinedResults","line":38,"loc":{"start":{"line":38,"column":27},"end":{"line":38,"column":68}}},"3":{"name":"(anonymous_3)","line":52,"loc":{"start":{"line":52,"column":34},"end":{"line":52,"column":59}}},"4":{"name":"(anonymous_4)","line":65,"loc":{"start":{"line":65,"column":42},"end":{"line":65,"column":62}}},"5":{"name":"(anonymous_5)","line":71,"loc":{"start":{"line":71,"column":34},"end":{"line":71,"column":54}}},"6":{"name":"(anonymous_6)","line":84,"loc":{"start":{"line":84,"column":28},"end":{"line":84,"column":58}}},"7":{"name":"_cons","line":105,"loc":{"start":{"line":105,"column":0},"end":{"line":105,"column":27}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":26}},"2":{"start":{"line":25,"column":0},"end":{"line":96,"column":2}},"3":{"start":{"line":27,"column":2},"end":{"line":27,"column":38}},"4":{"start":{"line":28,"column":2},"end":{"line":28,"column":28}},"5":{"start":{"line":29,"column":2},"end":{"line":29,"column":36}},"6":{"start":{"line":31,"column":2},"end":{"line":31,"column":34}},"7":{"start":{"line":32,"column":2},"end":{"line":32,"column":32}},"8":{"start":{"line":33,"column":2},"end":{"line":33,"column":36}},"9":{"start":{"line":34,"column":2},"end":{"line":34,"column":28}},"10":{"start":{"line":36,"column":2},"end":{"line":36,"column":52}},"11":{"start":{"line":38,"column":2},"end":{"line":95,"column":5}},"12":{"start":{"line":41,"column":4},"end":{"line":44,"column":6}},"13":{"start":{"line":48,"column":4},"end":{"line":48,"column":59}},"14":{"start":{"line":51,"column":4},"end":{"line":92,"column":11}},"15":{"start":{"line":56,"column":6},"end":{"line":56,"column":81}},"16":{"start":{"line":56,"column":69},"end":{"line":56,"column":81}},"17":{"start":{"line":60,"column":6},"end":{"line":60,"column":45}},"18":{"start":{"line":61,"column":6},"end":{"line":61,"column":39}},"19":{"start":{"line":65,"column":6},"end":{"line":67,"column":9}},"20":{"start":{"line":66,"column":8},"end":{"line":66,"column":39}},"21":{"start":{"line":71,"column":6},"end":{"line":77,"column":9}},"22":{"start":{"line":72,"column":8},"end":{"line":76,"column":9}},"23":{"start":{"line":73,"column":10},"end":{"line":73,"column":41}},"24":{"start":{"line":75,"column":10},"end":{"line":75,"column":40}},"25":{"start":{"line":79,"column":6},"end":{"line":79,"column":35}},"26":{"start":{"line":82,"column":6},"end":{"line":82,"column":20}},"27":{"start":{"line":83,"column":6},"end":{"line":83,"column":64}},"28":{"start":{"line":84,"column":6},"end":{"line":87,"column":9}},"29":{"start":{"line":85,"column":8},"end":{"line":85,"column":64}},"30":{"start":{"line":86,"column":8},"end":{"line":86,"column":44}},"31":{"start":{"line":90,"column":6},"end":{"line":90,"column":26}},"32":{"start":{"line":91,"column":6},"end":{"line":91,"column":18}},"33":{"start":{"line":94,"column":4},"end":{"line":94,"column":21}},"34":{"start":{"line":105,"column":0},"end":{"line":109,"column":1}},"35":{"start":{"line":106,"column":2},"end":{"line":106,"column":15}},"36":{"start":{"line":107,"column":2},"end":{"line":107,"column":19}},"37":{"start":{"line":108,"column":2},"end":{"line":108,"column":13}}},"branchMap":{"1":{"line":36,"type":"binary-expr","locations":[{"start":{"line":36,"column":23},"end":{"line":36,"column":45}},{"start":{"line":36,"column":49},"end":{"line":36,"column":51}}]},"2":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":6},"end":{"line":56,"column":6}},{"start":{"line":56,"column":6},"end":{"line":56,"column":6}}]},"3":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":10},"end":{"line":56,"column":45}},{"start":{"line":56,"column":49},"end":{"line":56,"column":67}}]},"4":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":8},"end":{"line":72,"column":8}},{"start":{"line":72,"column":8},"end":{"line":72,"column":8}}]}},"code":["/**"," * Module dependencies"," */","var _ = require('lodash');","","","/**"," * populate()"," *"," * Destructive mapping of `parentRows` to include a new key, `alias`,"," * which is an ordered array of child rows."," *"," * @option [{Object}] parentRows    - the parent rows the joined rows will be folded into"," * @option {String} alias           - the alias of the association"," * @option [{Object}] childRows     - the unfolded result set from the joins"," *"," * @option {String} parentPK        - the primary key of the parent table (optional- only needed for M..N associations)"," * @option {String} fkToChild       - the foreign key associating a row with the child table"," * @option {String} childPK         - the primary key of the child table"," *"," * @option [{String}] childNamespace- attributes to keep"," *"," * @return {*Object} reference to `parentRows`"," */","module.exports = function populate(options) {","","  var parentRows = options.parentRows;","  var alias = options.alias;","  var childRows = options.childRows;","","  var parentPK = options.parentPK;","  var childPK = options.childPK;","  var fkToChild = options.fkToChild;","  var fkToParent = parentPK;// At least for all use cases currently, `fkToParent` <=> `parentPK`","","  var childNamespace = options.childNamespace || '';","","  return _.map(parentRows, function _insertJoinedResults(parentRow) {","","    // Gather the subset of child rows associated with the current parent row","    var associatedChildRows = _.where(childRows,","      // { (parentPK): (parentRow[(parentPK)]) }, e.g. { id: 3 }","      _cons(fkToParent, parentRow[parentPK])","    );","","    // Clone the `associatedChildRows` to avoid mutating the original","    // `childRows` in the cache.","    associatedChildRows = _.cloneDeep(associatedChildRows);","","    // Stuff the sanitized associated child rows into the parent row.","    parentRow[alias] =","    _.reduce(associatedChildRows, function(memo, childRow) {","","      // Ignore child rows without an appropriate foreign key","      // to an instance in the REAL child collection.","      if (!childRow[childNamespace + childPK] && !childRow[childPK]) return memo;","","      // Rename childRow's [fkToChild] key to [childPK]","      // (so that it will have the proper primary key attribute for its collection)","      var childPKValue = childRow[fkToChild];","      childRow[childPK] = childPKValue;","","      // Determine if we have any double nested attributes.","      // These would come from m:m joins","      var doubleNested = _.find(childRow, function(name, key) {","        return _.startsWith(key, '..');","      });","","      // Grab all the keys that start with a dot or double dot depending on","      // the status of doubleNested","      childRow = _.pick(childRow, function(name, key) {","        if (doubleNested) {","          return _.startsWith(key, '..');","        } else {","          return _.startsWith(key, '.');","        }","      });","","      var _origChildRow = childRow;","","      // Strip off childNamespace prefix","      childRow = {};","      var PREFIX_REGEXP = new RegExp('^' + childNamespace + '');","      _.each(_origChildRow, function(attrValue, attrName) {","        var unprefixedKey = attrName.replace(PREFIX_REGEXP, '');","        childRow[unprefixedKey] = attrValue;","      });","","      // Build the set of rows to stuff into our parent row.","      memo.push(childRow);","      return memo;","    }, []);","","    return parentRow;","  });","};","","","/**"," * Dumb little helper because I hate naming anonymous objects just to use them once."," *"," * @return {Object} [a tuple]"," * @api private"," */","function _cons(key, value) {","  var obj = {};","  obj[key] = value;","  return obj;","}",""],"l":{"4":1,"25":1,"27":0,"28":0,"29":0,"31":0,"32":0,"33":0,"34":0,"36":0,"38":0,"41":0,"48":0,"51":0,"56":0,"60":0,"61":0,"65":0,"66":0,"71":0,"72":0,"73":0,"75":0,"79":0,"82":0,"83":0,"84":0,"85":0,"86":0,"90":0,"91":0,"94":0,"105":1,"106":0,"107":0,"108":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/finders/helpers.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/finders/helpers.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":15},"end":{"line":15,"column":47}}},"2":{"name":"(anonymous_2)","line":25,"loc":{"start":{"line":25,"column":12},"end":{"line":25,"column":44}}},"3":{"name":"(anonymous_3)","line":36,"loc":{"start":{"line":36,"column":14},"end":{"line":36,"column":46}}},"4":{"name":"applyStartsWith","line":39,"loc":{"start":{"line":39,"column":69},"end":{"line":39,"column":104}}},"5":{"name":"(anonymous_5)","line":49,"loc":{"start":{"line":49,"column":12},"end":{"line":49,"column":44}}},"6":{"name":"applyEndsWith","line":52,"loc":{"start":{"line":52,"column":69},"end":{"line":52,"column":102}}},"7":{"name":"(anonymous_7)","line":62,"loc":{"start":{"line":62,"column":12},"end":{"line":62,"column":44}}},"8":{"name":"applyContains","line":65,"loc":{"start":{"line":65,"column":69},"end":{"line":65,"column":102}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":51}},"2":{"start":{"line":8,"column":0},"end":{"line":8,"column":43}},"3":{"start":{"line":9,"column":0},"end":{"line":9,"column":49}},"4":{"start":{"line":11,"column":0},"end":{"line":74,"column":2}},"5":{"start":{"line":16,"column":4},"end":{"line":16,"column":96}},"6":{"start":{"line":19,"column":4},"end":{"line":19,"column":69}},"7":{"start":{"line":20,"column":4},"end":{"line":20,"column":79}},"8":{"start":{"line":20,"column":19},"end":{"line":20,"column":79}},"9":{"start":{"line":22,"column":4},"end":{"line":22,"column":40}},"10":{"start":{"line":26,"column":4},"end":{"line":26,"column":93}},"11":{"start":{"line":29,"column":4},"end":{"line":29,"column":69}},"12":{"start":{"line":30,"column":4},"end":{"line":30,"column":79}},"13":{"start":{"line":30,"column":19},"end":{"line":30,"column":79}},"14":{"start":{"line":32,"column":4},"end":{"line":32,"column":37}},"15":{"start":{"line":37,"column":4},"end":{"line":37,"column":95}},"16":{"start":{"line":39,"column":4},"end":{"line":41,"column":7}},"17":{"start":{"line":40,"column":6},"end":{"line":40,"column":28}},"18":{"start":{"line":43,"column":4},"end":{"line":43,"column":79}},"19":{"start":{"line":43,"column":19},"end":{"line":43,"column":79}},"20":{"start":{"line":45,"column":4},"end":{"line":45,"column":37}},"21":{"start":{"line":50,"column":4},"end":{"line":50,"column":95}},"22":{"start":{"line":52,"column":4},"end":{"line":54,"column":7}},"23":{"start":{"line":53,"column":6},"end":{"line":53,"column":28}},"24":{"start":{"line":56,"column":4},"end":{"line":56,"column":79}},"25":{"start":{"line":56,"column":19},"end":{"line":56,"column":79}},"26":{"start":{"line":58,"column":4},"end":{"line":58,"column":37}},"27":{"start":{"line":63,"column":4},"end":{"line":63,"column":95}},"28":{"start":{"line":65,"column":4},"end":{"line":67,"column":7}},"29":{"start":{"line":66,"column":6},"end":{"line":66,"column":34}},"30":{"start":{"line":69,"column":4},"end":{"line":69,"column":79}},"31":{"start":{"line":69,"column":19},"end":{"line":69,"column":79}},"32":{"start":{"line":71,"column":4},"end":{"line":71,"column":37}}},"branchMap":{"1":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":4},"end":{"line":20,"column":4}},{"start":{"line":20,"column":4},"end":{"line":20,"column":4}}]},"2":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":30,"column":4}},{"start":{"line":30,"column":4},"end":{"line":30,"column":4}}]},"3":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":4},"end":{"line":43,"column":4}},{"start":{"line":43,"column":4},"end":{"line":43,"column":4}}]},"4":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":4},"end":{"line":56,"column":4}},{"start":{"line":56,"column":4},"end":{"line":56,"column":4}}]},"5":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":4},"end":{"line":69,"column":4}},{"start":{"line":69,"column":4},"end":{"line":69,"column":4}}]}},"code":["/**"," * Finder Helper Queries"," *"," * (these call other collection-level methods)"," */","","var usageError = require('../../utils/usageError');","var utils = require('../../utils/helpers');","var normalize = require('../../utils/normalize');","","module.exports = {","","  // Return models where ALL of the specified attributes match queryString","","  findOneLike: function(criteria, options, cb) {","    var usage = utils.capitalize(this.identity) + '.findOneLike([criteria],[options],callback)';","","    // Normalize criteria","    criteria = normalize.likeCriteria(criteria, this._schema.schema);","    if (!criteria) return usageError('Criteria must be an object!', usage, cb);","","    this.findOne(criteria, options, cb);","  },","","  findLike: function(criteria, options, cb) {","    var usage = utils.capitalize(this.identity) + '.findLike([criteria],[options],callback)';","","    // Normalize criteria","    criteria = normalize.likeCriteria(criteria, this._schema.schema);","    if (!criteria) return usageError('Criteria must be an object!', usage, cb);","","    this.find(criteria, options, cb);","  },","","  // Return models where >= 1 of the specified attributes start with queryString","  startsWith: function(criteria, options, cb) {","    var usage = utils.capitalize(this.identity) + '.startsWith([criteria],[options],callback)';","","    criteria = normalize.likeCriteria(criteria, this._schema.schema, function applyStartsWith(criteria) {","      return criteria + '%';","    });","","    if (!criteria) return usageError('Criteria must be an object!', usage, cb);","","    this.find(criteria, options, cb);","  },","","  // Return models where >= 1 of the specified attributes end with queryString","  endsWith: function(criteria, options, cb) {","    var usage = utils.capitalize(this.identity) + '.startsWith([criteria],[options],callback)';","","    criteria = normalize.likeCriteria(criteria, this._schema.schema, function applyEndsWith(criteria) {","      return '%' + criteria;","    });","","    if (!criteria) return usageError('Criteria must be an object!', usage, cb);","","    this.find(criteria, options, cb);","  },","","  // Return models where >= 1 of the specified attributes contain queryString","  contains: function(criteria, options, cb) {","    var usage = utils.capitalize(this.identity) + '.startsWith([criteria],[options],callback)';","","    criteria = normalize.likeCriteria(criteria, this._schema.schema, function applyContains(criteria) {","      return '%' + criteria + '%';","    });","","    if (!criteria) return usageError('Criteria must be an object!', usage, cb);","","    this.find(criteria, options, cb);","  }","","};",""],"l":{"7":1,"8":1,"9":1,"11":1,"16":0,"19":0,"20":0,"22":0,"26":0,"29":0,"30":0,"32":0,"37":0,"39":0,"40":0,"43":0,"45":0,"50":0,"52":0,"53":0,"56":0,"58":0,"63":0,"65":0,"66":0,"69":0,"71":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/finders/dynamicFinders.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/finders/dynamicFinders.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":1,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":1,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":1,"92":0,"93":0,"94":0,"95":0,"96":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0,0,0,0,0,0,0,0,0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":29},"end":{"line":22,"column":40}}},"2":{"name":"(anonymous_2)","line":26,"loc":{"start":{"line":26,"column":40},"end":{"line":26,"column":59}}},"3":{"name":"(anonymous_3)","line":43,"loc":{"start":{"line":43,"column":33},"end":{"line":43,"column":50}}},"4":{"name":"(anonymous_4)","line":46,"loc":{"start":{"line":46,"column":32},"end":{"line":46,"column":49}}},"5":{"name":"(anonymous_5)","line":65,"loc":{"start":{"line":65,"column":31},"end":{"line":65,"column":74}}},"6":{"name":"dynamicMethod","line":76,"loc":{"start":{"line":76,"column":27},"end":{"line":76,"column":70}}},"7":{"name":"(anonymous_7)","line":180,"loc":{"start":{"line":180,"column":36},"end":{"line":180,"column":55}}},"8":{"name":"dynamicAssociationMethod","line":202,"loc":{"start":{"line":202,"column":47},"end":{"line":202,"column":92}}},"9":{"name":"dynamicAssociationMethod","line":216,"loc":{"start":{"line":216,"column":44},"end":{"line":216,"column":89}}},"10":{"name":"buildJoin","line":235,"loc":{"start":{"line":235,"column":0},"end":{"line":235,"column":21}}},"11":{"name":"(anonymous_11)","line":243,"loc":{"start":{"line":243,"column":40},"end":{"line":243,"column":54}}},"12":{"name":"associationQueryCriteria","line":275,"loc":{"start":{"line":275,"column":0},"end":{"line":275,"column":60}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":26}},"2":{"start":{"line":8,"column":0},"end":{"line":8,"column":51}},"3":{"start":{"line":9,"column":0},"end":{"line":9,"column":43}},"4":{"start":{"line":10,"column":0},"end":{"line":10,"column":49}},"5":{"start":{"line":11,"column":0},"end":{"line":11,"column":49}},"6":{"start":{"line":13,"column":0},"end":{"line":13,"column":33}},"7":{"start":{"line":22,"column":0},"end":{"line":51,"column":2}},"8":{"start":{"line":23,"column":2},"end":{"line":23,"column":18}},"9":{"start":{"line":26,"column":2},"end":{"line":50,"column":5}},"10":{"start":{"line":29,"column":4},"end":{"line":34,"column":5}},"11":{"start":{"line":30,"column":6},"end":{"line":32,"column":7}},"12":{"start":{"line":31,"column":8},"end":{"line":31,"column":50}},"13":{"start":{"line":33,"column":6},"end":{"line":33,"column":13}},"14":{"start":{"line":36,"column":4},"end":{"line":37,"column":63}},"15":{"start":{"line":39,"column":4},"end":{"line":39,"column":70}},"16":{"start":{"line":42,"column":4},"end":{"line":49,"column":5}},"17":{"start":{"line":43,"column":6},"end":{"line":45,"column":9}},"18":{"start":{"line":44,"column":8},"end":{"line":44,"column":53}},"19":{"start":{"line":46,"column":6},"end":{"line":48,"column":9}},"20":{"start":{"line":47,"column":8},"end":{"line":47,"column":59}},"21":{"start":{"line":65,"column":0},"end":{"line":168,"column":2}},"22":{"start":{"line":66,"column":2},"end":{"line":66,"column":18}},"23":{"start":{"line":67,"column":2},"end":{"line":67,"column":15}},"24":{"start":{"line":70,"column":2},"end":{"line":70,"column":80}},"25":{"start":{"line":73,"column":2},"end":{"line":73,"column":65}},"26":{"start":{"line":76,"column":2},"end":{"line":167,"column":4}},"27":{"start":{"line":78,"column":4},"end":{"line":81,"column":5}},"28":{"start":{"line":79,"column":6},"end":{"line":79,"column":19}},"29":{"start":{"line":80,"column":6},"end":{"line":80,"column":21}},"30":{"start":{"line":83,"column":4},"end":{"line":83,"column":28}},"31":{"start":{"line":85,"column":4},"end":{"line":85,"column":108}},"32":{"start":{"line":87,"column":4},"end":{"line":87,"column":90}},"33":{"start":{"line":87,"column":38},"end":{"line":87,"column":90}},"34":{"start":{"line":88,"column":4},"end":{"line":88,"column":123}},"35":{"start":{"line":88,"column":23},"end":{"line":88,"column":123}},"36":{"start":{"line":91,"column":4},"end":{"line":91,"column":23}},"37":{"start":{"line":92,"column":4},"end":{"line":92,"column":36}},"38":{"start":{"line":94,"column":4},"end":{"line":166,"column":5}},"39":{"start":{"line":104,"column":8},"end":{"line":104,"column":41}},"40":{"start":{"line":107,"column":8},"end":{"line":111,"column":11}},"41":{"start":{"line":113,"column":8},"end":{"line":113,"column":42}},"42":{"start":{"line":123,"column":8},"end":{"line":123,"column":38}},"43":{"start":{"line":126,"column":8},"end":{"line":130,"column":11}},"44":{"start":{"line":132,"column":8},"end":{"line":132,"column":39}},"45":{"start":{"line":142,"column":8},"end":{"line":142,"column":39}},"46":{"start":{"line":145,"column":8},"end":{"line":149,"column":11}},"47":{"start":{"line":151,"column":8},"end":{"line":151,"column":40}},"48":{"start":{"line":159,"column":8},"end":{"line":159,"column":44}},"49":{"start":{"line":162,"column":8},"end":{"line":162,"column":42}},"50":{"start":{"line":165,"column":8},"end":{"line":165,"column":42}},"51":{"start":{"line":180,"column":0},"end":{"line":228,"column":2}},"52":{"start":{"line":181,"column":2},"end":{"line":181,"column":18}},"53":{"start":{"line":182,"column":2},"end":{"line":182,"column":18}},"54":{"start":{"line":186,"column":2},"end":{"line":197,"column":3}},"55":{"start":{"line":189,"column":4},"end":{"line":189,"column":38}},"56":{"start":{"line":191,"column":4},"end":{"line":191,"column":50}},"57":{"start":{"line":191,"column":41},"end":{"line":191,"column":50}},"58":{"start":{"line":193,"column":4},"end":{"line":196,"column":5}},"59":{"start":{"line":194,"column":6},"end":{"line":194,"column":17}},"60":{"start":{"line":195,"column":6},"end":{"line":195,"column":26}},"61":{"start":{"line":199,"column":2},"end":{"line":199,"column":30}},"62":{"start":{"line":199,"column":23},"end":{"line":199,"column":30}},"63":{"start":{"line":202,"column":2},"end":{"line":213,"column":4}},"64":{"start":{"line":205,"column":4},"end":{"line":206,"column":30}},"65":{"start":{"line":208,"column":4},"end":{"line":208,"column":90}},"66":{"start":{"line":208,"column":38},"end":{"line":208,"column":90}},"67":{"start":{"line":209,"column":4},"end":{"line":209,"column":89}},"68":{"start":{"line":209,"column":37},"end":{"line":209,"column":89}},"69":{"start":{"line":211,"column":4},"end":{"line":211,"column":67}},"70":{"start":{"line":212,"column":4},"end":{"line":212,"column":38}},"71":{"start":{"line":216,"column":2},"end":{"line":227,"column":4}},"72":{"start":{"line":219,"column":4},"end":{"line":220,"column":30}},"73":{"start":{"line":222,"column":4},"end":{"line":222,"column":90}},"74":{"start":{"line":222,"column":38},"end":{"line":222,"column":90}},"75":{"start":{"line":223,"column":4},"end":{"line":223,"column":89}},"76":{"start":{"line":223,"column":37},"end":{"line":223,"column":89}},"77":{"start":{"line":225,"column":4},"end":{"line":225,"column":67}},"78":{"start":{"line":226,"column":4},"end":{"line":226,"column":35}},"79":{"start":{"line":235,"column":0},"end":{"line":269,"column":1}},"80":{"start":{"line":236,"column":2},"end":{"line":236,"column":18}},"81":{"start":{"line":237,"column":2},"end":{"line":237,"column":15}},"82":{"start":{"line":240,"column":2},"end":{"line":240,"column":63}},"83":{"start":{"line":243,"column":2},"end":{"line":247,"column":5}},"84":{"start":{"line":244,"column":4},"end":{"line":246,"column":5}},"85":{"start":{"line":245,"column":6},"end":{"line":245,"column":15}},"86":{"start":{"line":249,"column":2},"end":{"line":249,"column":88}},"87":{"start":{"line":249,"column":13},"end":{"line":249,"column":88}},"88":{"start":{"line":254,"column":2},"end":{"line":254,"column":77}},"89":{"start":{"line":259,"column":2},"end":{"line":266,"column":4}},"90":{"start":{"line":268,"column":2},"end":{"line":268,"column":14}},"91":{"start":{"line":275,"column":0},"end":{"line":290,"column":1}},"92":{"start":{"line":278,"column":2},"end":{"line":281,"column":4}},"93":{"start":{"line":284,"column":2},"end":{"line":284,"column":37}},"94":{"start":{"line":285,"column":2},"end":{"line":285,"column":28}},"95":{"start":{"line":288,"column":2},"end":{"line":288,"column":35}},"96":{"start":{"line":289,"column":2},"end":{"line":289,"column":18}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]},"2":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":6},"end":{"line":30,"column":6}},{"start":{"line":30,"column":6},"end":{"line":30,"column":6}}]},"3":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":4},"end":{"line":42,"column":4}},{"start":{"line":42,"column":4},"end":{"line":42,"column":4}}]},"4":{"line":70,"type":"cond-expr","locations":[{"start":{"line":70,"column":42},"end":{"line":70,"column":50}},{"start":{"line":70,"column":53},"end":{"line":70,"column":79}}]},"5":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":4},"end":{"line":78,"column":4}},{"start":{"line":78,"column":4},"end":{"line":78,"column":4}}]},"6":{"line":83,"type":"binary-expr","locations":[{"start":{"line":83,"column":14},"end":{"line":83,"column":21}},{"start":{"line":83,"column":25},"end":{"line":83,"column":27}}]},"7":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":4},"end":{"line":87,"column":4}},{"start":{"line":87,"column":4},"end":{"line":87,"column":4}}]},"8":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":4},"end":{"line":88,"column":4}},{"start":{"line":88,"column":4},"end":{"line":88,"column":4}}]},"9":{"line":94,"type":"switch","locations":[{"start":{"line":102,"column":6},"end":{"line":102,"column":24}},{"start":{"line":103,"column":6},"end":{"line":104,"column":41}},{"start":{"line":106,"column":6},"end":{"line":113,"column":42}},{"start":{"line":121,"column":6},"end":{"line":121,"column":21}},{"start":{"line":122,"column":6},"end":{"line":123,"column":38}},{"start":{"line":125,"column":6},"end":{"line":132,"column":39}},{"start":{"line":140,"column":6},"end":{"line":140,"column":22}},{"start":{"line":141,"column":6},"end":{"line":142,"column":39}},{"start":{"line":144,"column":6},"end":{"line":151,"column":40}},{"start":{"line":158,"column":6},"end":{"line":159,"column":44}},{"start":{"line":161,"column":6},"end":{"line":162,"column":42}},{"start":{"line":164,"column":6},"end":{"line":165,"column":42}}]},"10":{"line":191,"type":"if","locations":[{"start":{"line":191,"column":4},"end":{"line":191,"column":4}},{"start":{"line":191,"column":4},"end":{"line":191,"column":4}}]},"11":{"line":193,"type":"if","locations":[{"start":{"line":193,"column":4},"end":{"line":193,"column":4}},{"start":{"line":193,"column":4},"end":{"line":193,"column":4}}]},"12":{"line":199,"type":"if","locations":[{"start":{"line":199,"column":2},"end":{"line":199,"column":2}},{"start":{"line":199,"column":2},"end":{"line":199,"column":2}}]},"13":{"line":199,"type":"binary-expr","locations":[{"start":{"line":199,"column":6},"end":{"line":199,"column":11}},{"start":{"line":199,"column":15},"end":{"line":199,"column":21}}]},"14":{"line":208,"type":"if","locations":[{"start":{"line":208,"column":4},"end":{"line":208,"column":4}},{"start":{"line":208,"column":4},"end":{"line":208,"column":4}}]},"15":{"line":209,"type":"if","locations":[{"start":{"line":209,"column":4},"end":{"line":209,"column":4}},{"start":{"line":209,"column":4},"end":{"line":209,"column":4}}]},"16":{"line":222,"type":"if","locations":[{"start":{"line":222,"column":4},"end":{"line":222,"column":4}},{"start":{"line":222,"column":4},"end":{"line":222,"column":4}}]},"17":{"line":223,"type":"if","locations":[{"start":{"line":223,"column":4},"end":{"line":223,"column":4}},{"start":{"line":223,"column":4},"end":{"line":223,"column":4}}]},"18":{"line":244,"type":"if","locations":[{"start":{"line":244,"column":4},"end":{"line":244,"column":4}},{"start":{"line":244,"column":4},"end":{"line":244,"column":4}}]},"19":{"line":244,"type":"binary-expr","locations":[{"start":{"line":244,"column":8},"end":{"line":244,"column":59}},{"start":{"line":244,"column":63},"end":{"line":244,"column":95}}]},"20":{"line":249,"type":"if","locations":[{"start":{"line":249,"column":2},"end":{"line":249,"column":2}},{"start":{"line":249,"column":2},"end":{"line":249,"column":2}}]},"21":{"line":261,"type":"binary-expr","locations":[{"start":{"line":261,"column":15},"end":{"line":261,"column":30}},{"start":{"line":261,"column":34},"end":{"line":261,"column":36}}]}},"code":["/**"," * Dynamic Queries"," *"," * Query the collection using the name of the attribute directly"," */","","var _ = require('lodash');","var usageError = require('../../utils/usageError');","var utils = require('../../utils/helpers');","var normalize = require('../../utils/normalize');","var hasOwnProperty = utils.object.hasOwnProperty;","","var finder = module.exports = {};","","/**"," * buildDynamicFinders"," *"," * Attaches shorthand dynamic methods to the prototype for each attribute"," * in the schema."," */","","finder.buildDynamicFinders = function() {","  var self = this;","","  // For each defined attribute, create a dynamic finder function","  Object.keys(this._attributes).forEach(function(attrName) {","","    // Check if attribute is an association, if so generate limited dynamic finders","    if (hasOwnProperty(self._schema.schema[attrName], 'foreignKey')) {","      if (self.associationFinders !== false) {","        self.generateAssociationFinders(attrName);","      }","      return;","    }","","    var capitalizedMethods = ['findOneBy*', 'findOneBy*In', 'findOneBy*Like', 'findBy*', 'findBy*In',","      'findBy*Like', 'countBy*', 'countBy*In', 'countBy*Like'];","","    var lowercasedMethods = ['*StartsWith', '*Contains', '*EndsWith'];","","","    if (self.dynamicFinders !== false) {","      capitalizedMethods.forEach(function(method) {","        self.generateDynamicFinder(attrName, method);","      });","      lowercasedMethods.forEach(function(method) {","        self.generateDynamicFinder(attrName, method, true);","      });","    }","  });","};","","","/**"," * generateDynamicFinder"," *"," * Creates a dynamic method based off the schema. Used for shortcuts for various"," * methods where a criteria object can automatically be built."," *"," * @param {String} attrName"," * @param {String} method"," * @param {Boolean} dont capitalize the attrName or do, defaults to false"," */","","finder.generateDynamicFinder = function(attrName, method, dontCapitalize) {","  var self = this;","  var criteria;","","  // Capitalize Attribute Name for camelCase","  var preparedAttrName = dontCapitalize ? attrName : utils.capitalize(attrName);","","  // Figure out actual dynamic method name by injecting attribute name","  var actualMethodName = method.replace(/\\*/g, preparedAttrName);","","  // Assign this finder to the collection","  this[actualMethodName] = function dynamicMethod(value, options, cb) {","","    if (typeof options === 'function') {","      cb = options;","      options = null;","    }","","    options = options || {};","","    var usage = utils.capitalize(self.identity) + '.' + actualMethodName + '(someValue,[options],callback)';","","    if (typeof value === 'undefined') return usageError('No value specified!', usage, cb);","    if (options.where) return usageError('Cannot specify `where` option in a dynamic ' + method + '*() query!', usage, cb);","","    // Build criteria query and submit it","    options.where = {};","    options.where[attrName] = value;","","    switch (method) {","","","      ///////////////////////////////////////","      // Finders","      ///////////////////////////////////////","","","      case 'findOneBy*':","      case 'findOneBy*In':","        return self.findOne(options, cb);","","      case 'findOneBy*Like':","        criteria = _.extend(options, {","          where: {","            like: options.where","          }","        });","","        return self.findOne(criteria, cb);","","","      ///////////////////////////////////////","      // Aggregate Finders","      ///////////////////////////////////////","","","      case 'findBy*':","      case 'findBy*In':","        return self.find(options, cb);","","      case 'findBy*Like':","        criteria = _.extend(options, {","          where: {","            like: options.where","          }","        });","","        return self.find(criteria, cb);","","","      ///////////////////////////////////////","      // Count Finders","      ///////////////////////////////////////","","","      case 'countBy*':","      case 'countBy*In':","        return self.count(options, cb);","","      case 'countBy*Like':","        criteria = _.extend(options, {","          where: {","            like: options.where","          }","        });","","        return self.count(criteria, cb);","","","      ///////////////////////////////////////","      // Searchers","      ///////////////////////////////////////","","      case '*StartsWith':","        return self.startsWith(options, cb);","","      case '*Contains':","        return self.contains(options, cb);","","      case '*EndsWith':","        return self.endsWith(options, cb);","    }","  };","};","","","/**"," * generateAssociationFinders"," *"," * Generate Dynamic Finders for an association."," * Adds a .findBy<name>() method for has_one and belongs_to associations."," *"," * @param {String} attrName, the column name of the attribute"," */","","finder.generateAssociationFinders = function(attrName) {","  var self = this;","  var name, model;","","  // Find the user defined key for this attrName, look in self defined columnName","  // properties and if that's not set see if the generated columnName matches the attrName","  for (var key in this._attributes) {","","    // Cache the value","    var cache = this._attributes[key];","","    if (!hasOwnProperty(cache, 'model')) continue;","","    if (cache.model.toLowerCase() + '_id' === attrName) {","      name = key;","      model = cache.model;","    }","  }","","  if (!name || !model) return;","","  // Build a findOneBy<attrName> dynamic finder that forces a join on the association","  this['findOneBy' + utils.capitalize(name)] = function dynamicAssociationMethod(value, cb) {","","    // Check proper usage","    var usage = utils.capitalize(self.identity) + '.' + 'findBy' + utils.capitalize(name) +","      '(someValue, callback)';","","    if (typeof value === 'undefined') return usageError('No value specified!', usage, cb);","    if (typeof value === 'function') return usageError('No value specified!', usage, cb);","","    var criteria = associationQueryCriteria(self, value, attrName);","    return this.findOne(criteria, cb);","  };","","  // Build a findBy<attrName> dynamic finder that forces a join on the association","  this['findBy' + utils.capitalize(name)] = function dynamicAssociationMethod(value, cb) {","","    // Check proper usage","    var usage = utils.capitalize(self.identity) + '.' + 'findBy' + utils.capitalize(name) +","      '(someValue, callback)';","","    if (typeof value === 'undefined') return usageError('No value specified!', usage, cb);","    if (typeof value === 'function') return usageError('No value specified!', usage, cb);","","    var criteria = associationQueryCriteria(self, value, attrName);","    return this.find(criteria, cb);","  };","};","","","/**"," * Build Join Array"," */","","function buildJoin() {","  var self = this;","  var pk, attr;","","  // Set the attr value to the generated schema attribute","  attr = self.waterline.schema[self.identity].attributes[name];","","  // Get the current collection's primary key attribute","  Object.keys(self._attributes).forEach(function(key) {","    if (hasOwnProperty(self._attributes[key], 'primaryKey') && self._attributes[key].primaryKey) {","      pk = key;","    }","  });","","  if (!attr) throw new Error('Attempting to populate an attribute that doesn\\'t exist');","","  // Grab the key being populated to check if it is a has many to belongs to","  // If it's a belongs_to the adapter needs to know that it should replace the foreign key","  // with the associated value.","  var parentKey = self.waterline.collections[self.identity].attributes[name];","","","  // Build the initial join object that will link this collection to either another collection","  // or to a junction table.","  var join = {","    parent: self._tableName,","    parentKey: attr.columnName || pk,","    child: attr.references,","    childKey: attr.on,","    select: true,","    removeParentKey: !!parentKey.model","  };","","  return join;","}","","/**"," * Query Criteria Builder for associations"," */","","function associationQueryCriteria(context, value, attrName) {","","  // Build a criteria object","  var criteria = {","    where: {},","    joins: []","  };","","  // Build a join condition","  var join = buildJoin.call(context);","  criteria.joins.push(join);","","  // Add where values","  criteria.where[attrName] = value;","  return criteria;","}",""],"l":{"7":1,"8":1,"9":1,"10":1,"11":1,"13":1,"22":1,"23":0,"26":0,"29":0,"30":0,"31":0,"33":0,"36":0,"39":0,"42":0,"43":0,"44":0,"46":0,"47":0,"65":1,"66":0,"67":0,"70":0,"73":0,"76":0,"78":0,"79":0,"80":0,"83":0,"85":0,"87":0,"88":0,"91":0,"92":0,"94":0,"104":0,"107":0,"113":0,"123":0,"126":0,"132":0,"142":0,"145":0,"151":0,"159":0,"162":0,"165":0,"180":1,"181":0,"182":0,"186":0,"189":0,"191":0,"193":0,"194":0,"195":0,"199":0,"202":0,"205":0,"208":0,"209":0,"211":0,"212":0,"216":0,"219":0,"222":0,"223":0,"225":0,"226":0,"235":1,"236":0,"237":0,"240":0,"243":0,"244":0,"245":0,"249":0,"254":0,"259":0,"268":0,"275":1,"278":0,"284":0,"285":0,"288":0,"289":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/stream.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/query/stream.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":19,"loc":{"start":{"line":19,"column":10},"end":{"line":19,"column":45}}},"2":{"name":"(anonymous_2)","line":36,"loc":{"start":{"line":36,"column":21},"end":{"line":36,"column":32}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":48}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":40}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":46}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":45}},"5":{"start":{"line":10,"column":0},"end":{"line":48,"column":2}},"6":{"start":{"line":20,"column":4},"end":{"line":20,"column":20}},"7":{"start":{"line":22,"column":4},"end":{"line":22,"column":82}},"8":{"start":{"line":25,"column":4},"end":{"line":25,"column":44}},"9":{"start":{"line":28,"column":4},"end":{"line":28,"column":53}},"10":{"start":{"line":32,"column":4},"end":{"line":32,"column":49}},"11":{"start":{"line":36,"column":4},"end":{"line":43,"column":7}},"12":{"start":{"line":39,"column":6},"end":{"line":39,"column":21}},"13":{"start":{"line":42,"column":6},"end":{"line":42,"column":44}},"14":{"start":{"line":45,"column":4},"end":{"line":45,"column":18}}},"branchMap":{},"code":["/**"," * Streaming Queries"," */","","var usageError = require('../utils/usageError');","var utils = require('../utils/helpers');","var normalize = require('../utils/normalize');","var ModelStream = require('../utils/stream');","","module.exports = {","","  /**","   * Stream a Result Set","   *","   * @param {Object} criteria","   * @param {Object} transformation, defaults to JSON","   */","","  stream: function(criteria, transformation) {","    var self = this;","","    var usage = utils.capitalize(this.identity) + '.stream([criteria],[options])';","","    // Normalize criteria and fold in options","    criteria = normalize.criteria(criteria);","","    // Transform Search Criteria","    criteria = self._transformer.serialize(criteria);","","    // Configure stream to adapter, kick off fetch, and return stream object","    // so that user code can use it as it fires data events","    var stream = new ModelStream(transformation);","","    // very important to wait until next tick before triggering adapter","    // otherwise write() and end() won't fire properly","    process.nextTick(function() {","","      // Write once immediately to force prefix in case no models are returned","      stream.write();","","      // Trigger Adapter Method","      self.adapter.stream(criteria, stream);","    });","","    return stream;","  }","","};",""],"l":{"5":1,"6":1,"7":1,"8":1,"10":1,"20":0,"22":0,"25":0,"28":0,"32":0,"36":0,"39":0,"42":0,"45":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/stream.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/stream.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":35},"end":{"line":12,"column":60}}},"2":{"name":"(anonymous_2)","line":35,"loc":{"start":{"line":35,"column":30},"end":{"line":35,"column":50}}},"3":{"name":"writeToStream","line":39,"loc":{"start":{"line":39,"column":47},"end":{"line":39,"column":93}}},"4":{"name":"(anonymous_4)","line":57,"loc":{"start":{"line":57,"column":28},"end":{"line":57,"column":46}}},"5":{"name":"(anonymous_5)","line":66,"loc":{"start":{"line":66,"column":26},"end":{"line":66,"column":48}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":27}},"2":{"start":{"line":8,"column":0},"end":{"line":8,"column":31}},"3":{"start":{"line":9,"column":0},"end":{"line":9,"column":51}},"4":{"start":{"line":10,"column":0},"end":{"line":10,"column":26}},"5":{"start":{"line":12,"column":0},"end":{"line":22,"column":2}},"6":{"start":{"line":15,"column":2},"end":{"line":15,"column":63}},"7":{"start":{"line":18,"column":2},"end":{"line":18,"column":17}},"8":{"start":{"line":21,"column":2},"end":{"line":21,"column":23}},"9":{"start":{"line":24,"column":0},"end":{"line":24,"column":35}},"10":{"start":{"line":35,"column":0},"end":{"line":51,"column":2}},"11":{"start":{"line":36,"column":2},"end":{"line":36,"column":18}},"12":{"start":{"line":39,"column":2},"end":{"line":49,"column":5}},"13":{"start":{"line":42,"column":4},"end":{"line":42,"column":17}},"14":{"start":{"line":45,"column":4},"end":{"line":45,"column":49}},"15":{"start":{"line":48,"column":4},"end":{"line":48,"column":27}},"16":{"start":{"line":48,"column":12},"end":{"line":48,"column":27}},"17":{"start":{"line":57,"column":0},"end":{"line":79,"column":2}},"18":{"start":{"line":58,"column":2},"end":{"line":58,"column":18}},"19":{"start":{"line":60,"column":2},"end":{"line":64,"column":3}},"20":{"start":{"line":61,"column":4},"end":{"line":61,"column":36}},"21":{"start":{"line":62,"column":4},"end":{"line":62,"column":27}},"22":{"start":{"line":62,"column":12},"end":{"line":62,"column":27}},"23":{"start":{"line":63,"column":4},"end":{"line":63,"column":11}},"24":{"start":{"line":66,"column":2},"end":{"line":78,"column":5}},"25":{"start":{"line":68,"column":4},"end":{"line":72,"column":5}},"26":{"start":{"line":69,"column":6},"end":{"line":69,"column":30}},"27":{"start":{"line":70,"column":6},"end":{"line":70,"column":29}},"28":{"start":{"line":70,"column":14},"end":{"line":70,"column":29}},"29":{"start":{"line":71,"column":6},"end":{"line":71,"column":13}},"30":{"start":{"line":75,"column":4},"end":{"line":75,"column":42}},"31":{"start":{"line":75,"column":16},"end":{"line":75,"column":42}},"32":{"start":{"line":76,"column":4},"end":{"line":76,"column":21}},"33":{"start":{"line":77,"column":4},"end":{"line":77,"column":24}},"34":{"start":{"line":77,"column":12},"end":{"line":77,"column":24}}},"branchMap":{"1":{"line":15,"type":"binary-expr","locations":[{"start":{"line":15,"column":24},"end":{"line":15,"column":38}},{"start":{"line":15,"column":42},"end":{"line":15,"column":62}}]},"2":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":4},"end":{"line":48,"column":4}},{"start":{"line":48,"column":4},"end":{"line":48,"column":4}}]},"3":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":2},"end":{"line":60,"column":2}},{"start":{"line":60,"column":2},"end":{"line":60,"column":2}}]},"4":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":4},"end":{"line":62,"column":4}},{"start":{"line":62,"column":4},"end":{"line":62,"column":4}}]},"5":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":4},"end":{"line":68,"column":4}},{"start":{"line":68,"column":4},"end":{"line":68,"column":4}}]},"6":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":6},"end":{"line":70,"column":6}},{"start":{"line":70,"column":6},"end":{"line":70,"column":6}}]},"7":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":4},"end":{"line":75,"column":4}},{"start":{"line":75,"column":4},"end":{"line":75,"column":4}}]},"8":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":4},"end":{"line":77,"column":4}},{"start":{"line":77,"column":4},"end":{"line":77,"column":4}}]}},"code":["/**"," * Streams"," *"," * A Streaming API with support for Transformations"," */","","var util = require('util');","var Stream = require('stream');","var Transformations = require('./transformations');","var _ = require('lodash');","","var ModelStream = module.exports = function(transformation) {","","  // Use specified, or otherwise default, JSON transformation","  this.transformation = transformation || Transformations.json;","","  // Reset write index","  this.index = 0;","","  // Make stream writable","  this.writable = true;","};","","util.inherits(ModelStream, Stream);","","/**"," * Write to stream"," *"," * Extracts args to write and emits them as data events"," *"," * @param {Object} model"," * @param {Function} cb"," */","","ModelStream.prototype.write = function(model, cb) {","  var self = this;","","  // Run transformation on this item","  this.transformation.write(model, this.index, function writeToStream(err, transformedModel) {","","    // Increment index for next time","    self.index++;","","    // Write transformed model to stream","    self.emit('data', _.clone(transformedModel));","","    // Inform that we're finished","    if (cb) return cb(err);","  });","","};","","/**"," * End Stream"," */","","ModelStream.prototype.end = function(err, cb) {","  var self = this;","","  if (err) {","    this.emit('error', err.message);","    if (cb) return cb(err);","    return;","  }","","  this.transformation.end(function(err, suffix) {","","    if (err) {","      self.emit('error', err);","      if (cb) return cb(err);","      return;","    }","","    // Emit suffix if specified","    if (suffix) self.emit('data', suffix);","    self.emit('end');","    if (cb) return cb();","  });","};",""],"l":{"7":1,"8":1,"9":1,"10":1,"12":1,"15":0,"18":0,"21":0,"24":1,"35":1,"36":0,"39":0,"42":0,"45":0,"48":0,"57":1,"58":0,"60":0,"61":0,"62":0,"63":0,"66":0,"68":0,"69":0,"70":0,"71":0,"75":0,"76":0,"77":0}},"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/transformations.js":{"path":"/home/travis/build/npmtest/node-npmtest-waterline/waterline/lib/waterline/utils/transformations.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":29},"end":{"line":16,"column":56}}},"2":{"name":"(anonymous_2)","line":42,"loc":{"start":{"line":42,"column":27},"end":{"line":42,"column":40}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":42}},"2":{"start":{"line":8,"column":0},"end":{"line":8,"column":26}},"3":{"start":{"line":16,"column":0},"end":{"line":37,"column":2}},"4":{"start":{"line":17,"column":2},"end":{"line":17,"column":23}},"5":{"start":{"line":19,"column":2},"end":{"line":19,"column":36}},"6":{"start":{"line":19,"column":14},"end":{"line":19,"column":36}},"7":{"start":{"line":22,"column":2},"end":{"line":28,"column":3}},"8":{"start":{"line":23,"column":4},"end":{"line":27,"column":5}},"9":{"start":{"line":24,"column":6},"end":{"line":24,"column":47}},"10":{"start":{"line":26,"column":6},"end":{"line":26,"column":19}},"11":{"start":{"line":31,"column":2},"end":{"line":31,"column":46}},"12":{"start":{"line":31,"column":21},"end":{"line":31,"column":44}},"13":{"start":{"line":34,"column":2},"end":{"line":34,"column":59}},"14":{"start":{"line":34,"column":17},"end":{"line":34,"column":59}},"15":{"start":{"line":36,"column":2},"end":{"line":36,"column":29}},"16":{"start":{"line":42,"column":0},"end":{"line":45,"column":2}},"17":{"start":{"line":43,"column":2},"end":{"line":43,"column":19}},"18":{"start":{"line":44,"column":2},"end":{"line":44,"column":19}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":2},"end":{"line":19,"column":2}},{"start":{"line":19,"column":2},"end":{"line":19,"column":2}}]},"2":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":2},"end":{"line":22,"column":2}},{"start":{"line":22,"column":2},"end":{"line":22,"column":2}}]},"3":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":2},"end":{"line":31,"column":2}},{"start":{"line":31,"column":2},"end":{"line":31,"column":2}}]},"4":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":2},"end":{"line":34,"column":2}},{"start":{"line":34,"column":2},"end":{"line":34,"column":2}}]}},"code":["/**"," * Transformations"," */","","var Transformations = module.exports = {};","","// Add JSON Transformation methods","Transformations.json = {};","","/**"," * Write Method Transformations"," *"," * Used to stream back valid JSON from Waterline"," */","","Transformations.json.write = function(model, index, cb) {","  var transformedModel;","","  if (!model) transformedModel = '';","","  // Transform to JSON","  if (model) {","    try {","      transformedModel = JSON.stringify(model);","    } catch (e) {","      return cb(e);","    }","  }","","  // Prefix with opening [","  if (index === 0) { transformedModel = '['; }","","  // Prefix with comma after first model","  if (index > 1) transformedModel = ',' + transformedModel;","","  cb(null, transformedModel);","};","","/**"," * Close off JSON Array"," */","Transformations.json.end = function(cb) {","  var suffix = ']';","  cb(null, suffix);","};",""],"l":{"5":1,"8":1,"16":1,"17":0,"19":0,"22":0,"23":0,"24":0,"26":0,"31":0,"34":0,"36":0,"42":1,"43":0,"44":0}}}